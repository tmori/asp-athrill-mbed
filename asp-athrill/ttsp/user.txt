
	TTSP - TOPPERS Test Suite Package -
	ユーザーズマニュアル

----------------------------------------------------------------------
 TTSP
     TOPPERS Test Suite Package

 Copyright (C) 2009-2012 by Center for Embedded Computing Systems
             Graduate School of Information Science, Nagoya Univ., JAPAN
 Copyright (C) 2009-2011 by Digital Craft Inc.
 Copyright (C) 2009-2011 by NEC Communication Systems, Ltd.
 Copyright (C) 2009-2012 by FUJISOFT INCORPORATED
 Copyright (C) 2009-2010 by Mitsuhiro Matsuura
 Copyright (C) 2011 by Industrial Technology Institute,
                                    Miyagi Prefectural Government, JAPAN

 上記著作権者は，以下の (1)〜(3) の条件を満たす場合に限り，本ドキュメ
 ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
     および下記の無保証規定が，そのままの形でドキュメント中に含まれて
     いること．
 (2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
     を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
     ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
     りではない．
 (3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
     からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
     本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
     く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

 本ドキュメントは，無保証で提供されているものである．上記著作権者およ
 びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
 る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
 により直接的または間接的に生じたいかなる損害に関しても，その責任を負
 わない．

 $Id: user.txt 2 2012-05-09 02:23:52Z nces-shigihara $
----------------------------------------------------------------------

本ドキュメントは，TTSPを使用するために必要な事項を説明するものである．

○目次

(1) 用語説明
(2) TTSP概要
	(2.1) TTSPの構成
		(2.1.1) APIテスト用フォルダの構成
		(2.1.2) ドキュメント用フォルダの構成
		(2.1.3) テストライブラリ用フォルダの構成
		(2.1.4) TTB構成ファイル用フォルダの構成
		(2.1.5) SILテスト用フォルダの構成
		(2.1.6) ツール用フォルダの構成
	(2.2) 対象とする統合仕様書およびカーネル
	(2.3) 動作環境
(3) テスト概要
	(3.1) APIテスト
		(3.1.1) オートコードテスト
		(3.1.2) スクラッチコードテスト
		(3.1.3) コンフィギュレーションエラーテスト
	(3.2) SILテスト
(4) 環境構築手順
	(4.1) カーネル付属のサンプルプログラムビルド手順
		(4.1.1) カーネルパッケージの入手と展開
		(4.1.2) コンフィギュレータの作成
		(4.1.3) サンプルプログラムの生成
		(4.1.4) サンプルプログラムの実行
	(4.2) TTSPの配置
	(4.3) TTB環境設定ファイルの設定
	(4.4) ターゲット依存部の設定
		(4.4.1) ターゲット依存部が用意されている場合
		(4.4.2) ターゲット依存部が用意されていない場合
(5) TTBの実行方法
(6) TTB実行に関するフォルダ構成
	(6.1) APIテスト
		(6.1.1) オートコードテスト
		(6.1.2) スクラッチコードテスト
		(6.1.3) コンフィギュレーションエラーテスト
		(6.1.4) 特定のTESRYデータを対象にしたオートコードテスト
	(6.2) SILテスト
	(6.3) ターゲット依存APIのチェック
		(6.3.1) CPU例外発生機能
(7) テスト実施
	(7.1) APIテスト
		(7.1.1) オートコードテスト
		(7.1.2) スクラッチコードテスト
		(7.1.3) コンフィギュレーションエラーテスト
		(7.1.4) 特定のTESRYデータを対象にしたオートコードテスト
	(7.2) SILテスト
		(7.2.1) 必要なターゲット依存API
		(7.2.2) 必要な割込み番号
		(7.2.3) 実施手順
(8) 実行結果の確認方法
	(8.1) TTG実行結果
	(8.2) make depend / make実行結果
	(8.3) APIテスト コンフィギュレーションエラーテストの実行結果
	(8.4) 実行モジュールの実行結果
(9) ターゲット依存APIのチェック
(10) カーネルライブラリ作成(任意)
	(10.1) カーネルライブラリを使用するための設定
	(10.2) カーネルライブラリの作成
(11) 注意事項，制限事項
	(11.1) カーネルに対する制限事項
		(11.1.1) タイムティック
		(11.1.2) グローバルIRC
		(11.1.3) ローカルタイマ方式におけるタイマ割込みの割込み優先度
	(11.2) テストケースの制限事項
		(11.2.1) ext_ker
		(11.2.2) カーネル管理外の割込みハンドラ
		(11.2.3) テストシートに記載されている項目
	(11.3) テスト実施に関する注意事項
		(11.3.1) コンフィギュレーションエラーテストの実行結果確認方法
		(11.3.2) ターゲットによりテスト実施が不可となるテストケース
		(11.3.3) タイマ割込みの割込み優先度が-1の場合
	(11.4) その他
		(11.4.1) ARMCCでのコンパイル
		(11.4.2) strict aliasing ルール違反
	(11.5) その他
		(11.5.1) Linuxでの使用について
		(11.5.2) TTBを使用せずにmakeを実行する方法
(12) 実施事例(ASPカーネル)
	(12.1) at91skyeye_gcc
		(12.1.1) Cygwinインストール
		(12.1.2) Sourcery G++ Liteインストール
		(12.1.3) devicemanager.exeインストールとskyeye配置
		(12.1.4) ASPカーネル展開
		(12.1.5) TTSPの配置と環境設定
		(12.1.6) 実行モジュール作成
		(12.1.7) 実行モジュールの実行
		(12.1.8) 実行結果の確認方法
	(12.2) apsh2a_gcc
(13) 実施事例(FMPカーネル)
	(13.1) at91skyeye_gcc
		(13.1.1) TTSPの配置と環境設定
		(13.1.2) 実行モジュール作成
		(13.1.3) 実行モジュールの実行
		(13.1.4) 実行結果の確認方法
	(13.2) apsh2ad_gcc

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(1) 用語説明
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
■TTG(TOPPERS Test Generator)
  TESRYデータを入力データとして，テストプログラムを生成するツール．TTG
  の詳細は，ユーザーズマニュアル(ttsp/tools/doc/user.txt)を参照する．
  TTGのユーザーズマニュアルの用語定義に記述のある用語は本ドキュメントで
  は省略しているため，TTGのユーザーズマニュアルを参照する．

■TTB(TOPPERS Test Builder)
  各種テストや，環境構築の確認に関する一連の流れを支援するCUIツール．

■TTB環境設定ファイル(configure.sh)
  TTB実行時に必要なパラメータ設定ファイル．TTSPのルートフォルダに格納さ
  れている．

■TTBターゲット依存設定ファイル(ttsp_target.sh)
  TTB実行時に必要な，ターゲット依存となるパラメータの設定ファイル．ター
  ゲット依存部テストライブラリフォルダに格納する．
  ※新規ターゲット用に雛形ファイル(ttsp/scripts/ttsp_target.sh)を用意し
    ている．

■TTG環境設定ファイル(configure.yaml)
  TTG実行時に必要な，パラメータ設定ファイル．

■テストシート
  API毎に仕様，テストケースなどテストに関する情報をまとめたテキストファ
  イル．

■データキュー，優先度データキュー
  格納数  ：データ管理領域に格納できるデータ数
  データ数：データ管理領域に格納されているデータ数

■内部関数
  API内で呼び出しているAPIではない関数．

■待ちタスク
  オブジェクトの待ち行列につながれているタスク．

■マニフェストファイル
  実施するテストケースを指定するためのファイルパス，もしくは，フォルダ
  パスの一覧．

■遅延ディスパッチ
  非タスクコンテキスト内で，ディスパッチ要求が発生した後，タスクコンテ
  キストへ切り替わった際に，ディスパッチが発生することを，遅延ディスパ
  ッチと呼ぶ．

■レディキュー
  タスクの優先順位の管理を実現しているデータ構造．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(2) TTSP概要
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
TOPPERS Test Suite Package(本テストスイートパッケージ(以下，TTSP))は，
TOPPERS新世代カーネルを対象とした，各種テストツール，テストプログラム，
テストデータ，ドキュメントの統合体である．

----------------------------------------------------------------------
(2.1) TTSPの構成
----------------------------------------------------------------------
TTSPのフォルダ構成とファイル構成は以下である．

	ttsp/
		configure.sh	TTB環境設定ファイル
		ttb.sh			TTB実行モジュール
		user.txt		TTSPユーザーズマニュアル(本ファイル)

		api_test/		APIテスト
		docs/			ドキュメント
		library/		テストライブラリ
		scripts/		TTB構成ファイル
		sil_test/		SILテスト
		tools/			ツール

(2.1.1) APIテスト用フォルダの構成
APIテストのフォルダ構成とファイル構成について記述する．フォルダは機能毎
に分類している．

	api_test/
		ASP/				ASPカーネル
			developer.txt	ASPカーネルのAPIテスト開発文書
			alarm/			アラームハンドラ機能
			cyclic/			周期ハンドラ機能
			dataqueue/		データキュー機能
			eventflag/		イベントフラグ機能
			exception/		CPU例外管理機能
			interrupt/		割込み管理機能
			mailbox/		メールボックス機能
			mempfix/		固定長メモリプール機能
			pridataq/		優先度データキュー機能
			semaphore/		セマフォ機能
			staticAPI/		静的API
			sys_manage/		システム状態管理機能
			task_except/	タスク例外処理機能
			task_manage/	タスク管理機能
			task_refer/		タスク状態参照機能
			task_sync/		タスク付属同期機能
			time_manage/	システム時刻管理機能
		FMP/				FMPカーネル
			developer.txt	FMPカーネルのAPIテスト開発文書
			alarm/			アラームハンドラ機能
			cyclic/			周期ハンドラ機能
			dataqueue/		データキュー機能
			eventflag/		イベントフラグ機能
			exception/		CPU例外管理機能
			interrupt/		割込み管理機能
			mailbox/		メールボックス機能
			mempfix/		固定長メモリプール機能
			pridataq/		優先度データキュー機能
			semaphore/		セマフォ機能
			staticAPI/		静的API
			spin_lock/		スピンロック機能
			sys_manage/		システム状態管理機能
			task_except/	タスク例外処理機能
			task_manage/	タスク管理機能
			task_refer/		タスク状態参照機能
			task_sync/		タスク付属同期機能
			time_manage/	システム時刻管理機能

各機能のフォルダには，API名をフォルダ名としたフォルダがあり，そのフォル
ダにテストシートと，APIテストに必要なTESRYデータやスクラッチプログラム
を格納している．スクラッチプログラムについては(3.1)節を参照する．
なお，TESRYデータにCopyrightは付与しないが，本ドキュメントと同じとする．

例1) ASPカーネルのアラームハンドラ機能
	alarm/
		ista_alm/				ista_alm
			ista_alm.txt		ista_almテストシート
			ista_alm_a-1.yaml	ista_alm_a-1のTESRYデータ
			ista_alm_a-2.yaml	ista_alm_a-2のTESRYデータ
			ista_alm_b-1.yaml	ista_alm_b-1のTESRYデータ
			ista_alm_b-2.yaml	ista_alm_b-2のTESRYデータ
			ista_alm_c-1.yaml	ista_alm_c-1のTESRYデータ
			ista_alm_c-2.yaml	ista_alm_c-2のTESRYデータ
			ista_alm_d.yaml		ista_alm_dのTESRYデータ
			ista_alm_e.yaml		ista_alm_eのTESRYデータ
			ista_alm_f.yaml		ista_alm_fのTESRYデータ
			ista_alm_g.yaml		ista_alm_gのTESRYデータ
		istp_alm/				istp_alm
			istp_alm.txt		istp_almテストシート
			istp_alm_a-1.yaml	istp_alm_a-1のTESRYデータ
				:
		ref_alm/				ref_alm
			ref_alm.txt			ref_almテストシート
			ref_alm_a-1.yaml	ref_alm_a-1のTESRYデータ
				:
		sta_alm/				sta_alm
			sta_alm.txt			sta_almテストシート
			sta_alm_a-1.yaml	sta_alm_a-1のTESRYデータ
				:
		stp_alm/				stp_alm
			stp_alm.txt			stp_almテストシート
			stp_alm_a-1.yaml	stp_alm_a-1のTESRYデータ
				:

例2) FMPカーネルの静的APIのATT_INI
	staticAPI/
		ATT_INI/				ATT_INI
			ATT_INI.txt			ATT_INIテストシート
			ATT_INI_F-b-1.yaml	ATT_INI_F-b-1のTESRYデータ
			ATT_INI_F-b-2.yaml	ATT_INI_F-b-2のTESRYデータ
			ATT_INI_F-a/		ATT_INI_F-aのスクラッチプログラム
				err_code.txt	エラーチェックファイル
				out.c			テストプログラムファイル
				out.cfg			テストプログラムコンフィグファイル
				out.h			テストプログラムヘッダファイル
				variation.txt	バリエーション判別ファイル

(2.1.2) ドキュメント用フォルダの構成
	docs/
		version.txt		変更履歴

(2.1.3) テストライブラリ用フォルダの構成
	library/
		ASP/
			arch/						ターゲット依存部共通テストライブラリフォルダ
			check_library/				テストライブラリチェック
				alt_func/				代替API
					alarm/				アラームハンドラ機能
					cyclic/				周期ハンドラ機能
					dataqueue/			データキュー機能
					eventflag/			イベントフラグ機能
					interrupt/			割込み管理機能
					mailbox/			メールボックス機能
					mempfix/			固定長メモリプール機能
					pridataq/			優先度データキュー機能
					semaphore/			セマフォ機能
					task_except/		タスク例外処理機能
					task_refer/			タスク状態参照機能
				exception/				CPU例外発生機能
				interrupt/				割込み発生機能
				timer/					時間制御機能
			target/						ターゲット依存部のテストライブラリ
				at91skyeye_gcc/			at91skyeye_gccのテストライブラリ
					ttsp_target.sh		TTBターゲット依存設定ファイル
					ttsp_target_test.c	ターゲット依存APIテストライブラリファイル
					ttsp_target_test.h	ターゲット依存APIテストライブラリヘッダファイル
			test/						共通部のテストライブラリ
				ttsp_obj_head.cfg		スクラッチプログラムのFMPカーネル拡張用ファイル
				ttsp_obj_head_timer.cfg	スクラッチプログラムのFMPカーネル拡張用ファイル
				ttsp_obj_tail.cfg		スクラッチプログラムのFMPカーネル拡張用ファイル
				ttsp_obj_tail_timer.cfg	スクラッチプログラムのFMPカーネル拡張用ファイル
				ttsp_test_lib.c			共通部テストライブラリファイル
				ttsp_test_lib.h			共通部テストライブラリヘッダファイル
		FMP/
			arch/							ターゲット依存部共通テストライブラリフォルダ
				arm_gcc/					arm_gcc用テストライブラリ
					mpcore/
						ttsp_chip_timer.c	タイマドライバファイル
						ttsp_chip_timer.h	タイマドライバヘッダファイル
			check_library/					テストライブラリチェック
				alt_func/					代替API
					alarm/					アラームハンドラ機能
					cyclic/					周期ハンドラ機能
					dataqueue/				データキュー機能
					eventflag/				イベントフラグ機能
					interrupt/				割込み管理機能
					mailbox/				メールボックス機能
					mempfix/				固定長メモリプール機能
					pridataq/				優先度データキュー機能
					semaphore/				セマフォ機能
					spin_lock/				スピンロック機能
					task_except/			タスク例外処理機能
					task_refer/				タスク状態参照機能
				exception/					CPU例外発生機能
				interrupt/					割込み発生機能
				timer/						時間制御機能
			target/							ターゲット依存部のテストライブラリ
				at91skyeye_gcc/				at91skyeye_gccのテストライブラリ
					ttsp_target.sh			TTBターゲット依存設定ファイル
					ttsp_target_test.c		ターゲット依存APIテストライブラリファイル
					ttsp_target_test.h		ターゲット依存APIテストライブラリヘッダファイル
					ttsp_target_timer.c		タイマドライバファイル
			test/							共通部のテストライブラリ
				ttsp_obj_head.cfg			スクラッチプログラムのFMPカーネル拡張用ファイル
				ttsp_obj_head_timer.cfg		スクラッチプログラムのFMPカーネル拡張用ファイル
				ttsp_obj_tail.cfg			スクラッチプログラムのFMPカーネル拡張用ファイル
				ttsp_obj_tail_timer.cfg		スクラッチプログラムのFMPカーネル拡張用ファイル
				ttsp_test_lib.c				共通部テストライブラリファイル
				ttsp_test_lib.h				共通部テストライブラリヘッダファイル

(2.1.4) TTB構成ファイル用フォルダの構成
	scripts/
		api_test.sh			APIテスト用シェルスクリプト
		sil_test.sh			SILテスト用シェルスクリプト
		check_library.sh	テストライブラリチェック用シェルスクリプト
		kernel_lib.sh		カーネルライブラリ用シェルスクリプト
		common.sh			TTB共通処理用シェルスクリプト
		ttsp_target.sh		TTBターゲット依存設定ファイルの雛形ファイル

(2.1.5) SILテスト用フォルダの構成
	sil_test/
		ASP/			ASPカーネル
			out.c		テストプログラムファイル
			out.cfg		テストプログラムヘッダファイル
			out.h		テストプログラムコンフィグファイル
		FMP/			FMPカーネル用フォルダ
			out.c		テストプログラムファイル
			out.cfg		テストプログラムヘッダファイル
			out.h		テストプログラムコンフィグファイル
		developer.txt	SILテスト開発文書
		matrix.xls		テスト条件組合せ設計書

(2.1.6) ツール用フォルダの構成
TTGのユーザーズマニュアルを参照する．

----------------------------------------------------------------------
(2.2) 対象とする統合仕様書およびカーネル
----------------------------------------------------------------------
・統合仕様書 : Release 1.3.0
・ASPカーネル: Release 1.7.0
・FMPカーネル: Release 1.2.0
               ※ただし，以下のターゲット依存部のみRelease 1.2.1に対応
                 ・at91skyeye_armcc
                 ・at91skyeye_gcc
                 ・naviengine_armcc
                 ・naviengine_gcc

----------------------------------------------------------------------
(2.3) 動作環境
----------------------------------------------------------------------
TTSPは，ASPカーネルおよびFMPカーネルをビルド可能な環境で使用することを
想定している．makeやperlなどの一般的なGNUツールに加え，TTGの実行には
rubyが必要である．

動作確認は以下の環境で行った．

・WindowsXP SP3，Windows7 SP1(64bit)
・Cygwin 1.7.7(0.230/5/3)
  ・setup.exe version 2.697 にて全パッケージインストール
    ・make: 3.81
    ・perl: 5.10.1
    ・ruby: 1.8.7
・ASPカーネル at91skyeye_gcc依存部: Release 1.7.0
・FMPカーネル at91skyeye_gcc依存部: Release 1.2.1
・クロスコンパイラ: arm-2010.09-51-arm-none-eabi.exe
・SkyEye: skyeye_devm_package-1.0.5.zip

※Linuxで使用する場合は(11.7)節を参照する．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(3) テスト概要
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
TTSPでサポートしているテストについて記述する．

----------------------------------------------------------------------
(3.1) APIテスト
----------------------------------------------------------------------
APIテストとは，全てのAPIが統合仕様書に記載されている通りに振舞うことを
確認するものである．具体的には，API発行前のシステム状態(前状態)を定義し，
その状態でテスト対象となるAPIを発行(処理)し，API発行後のシステム状態(後
状態)を確認するテストプログラムを実行する．

テストプログラムの生成手法や実行結果確認内容に従い，APIテストは以下の3
つに分類される．

(3.1.1) オートコードテスト
テストケース毎にTESRYデータと呼ばれるテストシナリオを形式化したデータで
構成しているテスト．テストプログラムは，このTESRYデータからTTGにより生
成される．複数のテストケースを1つの実行モジュールとしてビルド可能である．

(3.1.2) スクラッチコードテスト
TTGでは対応できないテストケースはスクラッチプログラムを用意している．こ
のテストは，テストケース毎にビルドする．
TTGで対応出来ないテストケースは，CRE_TSKの一部と，DEF_ICSの全てのテスト
ケースである．理由については，各APIのテストシートを参照する．

(3.1.3) コンフィギュレーションエラーテスト
静的APIのエラー動作を確認する．ビルド時にエラーを出力するかどうかの確認
であるため，予想されるエラーメッセージもあらかじめ用意しておき，正しく
エラーメッセージが表示されることでテストを実施する．テストケース毎にス
クラッチプログラムを用意している．

----------------------------------------------------------------------
(3.2) SILテスト
----------------------------------------------------------------------
SILテストとは，全てのシステムインタフェースレイヤAPI(以下，SIL関数)が統
合仕様書に記載された通りに振舞うことを確認するものである．テスト内容の
詳細は，SILテスト開発文書(developer.txt)を参照する．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(4) 環境構築手順
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ASPカーネルを例にTTSPの環境構築手順を説明する．

----------------------------------------------------------------------
(4.1) カーネル付属のサンプルプログラムビルド手順
----------------------------------------------------------------------
カーネルの環境構築手順とサンプルプログラム実行について，以下にまとめる．

(4.1.1) カーネルパッケージの入手と展開
TTSPに対応するカーネルパッケージのバージョンを使用する．

ASPカーネル : http://www.toppers.jp/asp-kernel.html
FMPカーネル : http://www.toppers.jp/fmp-kernel.html

入手したカーネルパッケージを展開する．

(4.1.2) コンフィギュレータの作成
asp/cfg/cfg/cfg.exeが無い場合，makeして作成する．

# cd asp/cfg
# ./configure

作成されたMakefile.configを編集する．(1行目を"-mt"へ変更)

LIBBOOST_SUFFIX=-mt

Makefile.config編集後，makeを実行する

# make

※cfg.exeは以下のサイトからもダウンロード可能である．
http://www.toppers.jp/cfg.html

(4.1.3) サンプルプログラムの生成
カーネルパッケージのユーザーズマニュアルを参照し，サンプルプログラムを
生成，実行モジュールを作成する．

例) at91skyeye_gccの場合
# cd asp
# mkdir obj
# ../configure -T at91skyeye_gcc
# make depend
# make

(4.1.4) サンプルプログラムの実行
(4.1.3)節で生成された実行モジュールをターゲットシステム上で実行する．
実行モジュール実行時の詳細については，カーネルパッケージのsample/
sample1.cを参照する．

例) at91skyeye_gccの場合
# skyeye.exe -e asp.exe -c ../target/at91skyeye_gcc/skyeye.conf

サンプルプログラムの実行まで正常に行えなかった場合，カーネルの環境構築
に問題があるため，カーネルパッケージのユーザーズマニュアルを参照する．

----------------------------------------------------------------------
(4.2) TTSPの配置
----------------------------------------------------------------------
カーネルパッケージのルートフォルダにTTSPを使用するためのフォルダを配置
する．フォルダ名(ttsp)は任意であるため，変更可能である．

# cp -rp ttsp asp/.
         ^^^^

----------------------------------------------------------------------
(4.3) TTB環境設定ファイルの設定
----------------------------------------------------------------------
実行環境やターゲットに合わせ，TTB環境設定ファイルの各項目を設定する．パ
ラメータの詳細については，TTB環境設定ファイルのコメントを参照する．
特に，ターゲット略称の定義，およびプロファイル設定は必須であるので，必
ず設定する．

----------------------------------------------------------------------
(4.4) ターゲット依存部の設定
----------------------------------------------------------------------
(4.4.1) ターゲット依存部が用意されている場合
設定の必要はない．

(4.4.2) ターゲット依存部が用意されていない場合
以下の手順で作成したファイルは，ターゲット依存部のテストライブラリ用フ
ォルダttsp/library/target/{ASP,FMP}にターゲット略称の名前でフォルダを作
成し，そのフォルダに格納する．at91skyeye_gcc依存部は，すでに実装されて
いるので参考にする．

(a) TTBターゲット依存設定ファイルの作成
雛形ファイル(ttsp/scripts/ttsp_target.sh)を作成したターゲット依存部のフ
ォルダにコピーし，ターゲットに合わせて，TTBターゲット依存設定ファイルの
各項目を設定する．パラメータの詳細については，TTBターゲット依存設定ファ
イルのコメントを参照する．なお，シェルスクリプトから実行モジュールを実
行可能なターゲットの場合，EXC_MODULEをtrueに設定し，関数simulation()を
実装することで，TTBからの実行が可能となる．

なお，TTGへのオプション設定の内，以下のオプションはTTBが指定するので，
TTG_OPTへの指定を不可とする．

<ASPカーネル/FMPカーネル共通>
・-a，-f (カーネルの設定)
  ・TTB環境設定ファイルの"PROFILE_NAME"より判断して，-aもしくは，-fを指
    定
・-c (読み込むTTG環境設定ファイルの指定)
  ・対象ターゲットのターゲット依存部テストライブラリフォルダに，TTG設定
    ファイルが用意されている場合は，そのファイルパスを指定
  ・上記フォルダにTTG環境設定ファイルが存在しなければ，デフォルトのTTG
    設定ファイルを使用する
・--out_file_name (アプリケーション名)
  ・TTB環境設定ファイルで設定する"APPLI_NAME"の値を指定
・--func_time (システム時刻制御関数の有無)
  ・TTBターゲット依存設定ファイルで設定する"FUNC_TIME"の値を指定
・--func_interrupt (割込み発生関数の有無)
  ・TTBターゲット依存設定ファイルで設定する"FUNC_INTERRUPT"の値を指定
・--func_exception (CPU例外発生関数の有無)
  ・TTBターゲット依存設定ファイルで設定する"FUNC_EXCEPTION"の値を指定

<FMPカーネル限定>
・--timer_arch (タイマアーキテクチャの設定)
  ・TTBターゲット依存設定ファイルで設定する"TIMER_ARCH"の値を指定
・--prc_num (プロセッサ数)
  ・TTBターゲット依存設定ファイルで設定する"PROCESSOR_NUM"の値を指定
・--irc_arch (IRCアーキテクチャの設定)
  ・TTBターゲット依存設定ファイルで設定する"IRC_ARCH"の値を指定

(b) ターゲット依存APIおよび，ターゲット依存マクロの実装
ターゲット依存部が用意されていない場合は，ターゲット依存APIとターゲット
依存マクロを実装する必要がある.ターゲット依存APIの仕様はTTGのユーザーズ
マニュアルの(5)，(6)章を，定義が必要なターゲット依存マクロはTTGのユーザ
ーズマニュアルの(4.3)節を参照する．実装したファイルへのリンクは，(a)で
用意したTTBターゲット依存設定ファイルのKERNEL_COBJS_TARGETを修正するこ
とで行う．TTBでは，makeコマンドのオプションでKERNEL_COBJSを上書きするた
め，Makefile.target等で追加するターゲット依存のオブジェクトファイルも，
KERNEL_COBJS_TARGETへすべて記述し，ターゲット依存APIの実装に合わせて必
要なファイルを追加する．
※代替APIへのリンクはTTBによって行われる

(c) TTG環境設定ファイルの作成
TTG付属のデフォルト設定ファイル(ttsp/tools/ttg/bin/configure.yaml)を作
成したターゲット依存部のフォルダにコピーし，ターゲットに合わせて，TTG環
境設定ファイルの各項目を設定する．パラメータの詳細については，TTG環境設
定ファイルのコメントを参照する．ターゲット依存部のフォルダに
configure.yamlを用意しない場合，TTG付属のデフォルト設定ファイルが使用さ
れる．
なお，以下のパラメータは，TTB環境設定ファイルに設定したパラメータによっ
て上書きされるため，TTG環境設定ファイルで設定する必要はない．
・prc_num
・timer_arch
・irc_arch
・func_time
・func_interrupt
・func_exception
・out_file_name

(d) ターゲット依存部のチェック
ターゲット依存部の環境構築が正常にできたことを確認する．実施方法は，(9)
章を参照する．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(5) TTBの実行方法
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
TTBはCUIツールであり，ツール実行によりメニュー画面に表示される数字やア
ルファベットを入力することで，各種処理を実行する．

# cd asp/ttsp
# ./ttb.sh

ttb.shを実行すると，TTBのメインメニューが表示されるので，実施したいテス
トや処理を選択し，Enterキーを押下する．メインメニューに戻る処理や，TTB
を終了する処理も用意している．

※TTBでは実行モジュール(.exe，.elf等)の作成まで行うものとし，プログラ
  ムの実行はターゲット毎に方法が異なるため，ユーザ側で実施するものとす
  る．ただし，SkyEye(at91skyeye_gcc)の場合は実行できる．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(6) TTB実行に関するフォルダ構成
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
TTBを使用した場合のフォルダ構成やファイル構成について処理毎に記述する．
フォルダやファイルの説明の前に付与した[*]は，他の章で説明するフォルダや
ファイルと関連付けるためのタグである．

	ttsp/
		kernel_lib/			[K]カーネルライブラリフォルダ
		obj/				[O]テストオブジェクト出力フォルダ
			api_test/		[A]APIテスト用テストフォルダ
			check_library/	[C]ターゲット依存関数チェックフォルダ
			sil_test/		[S]SILテスト用フォルダ

----------------------------------------------------------------------
(6.1) APIテスト
----------------------------------------------------------------------
	api_test/					[A]
		MANIFEST_AUTO_CODE		[MA-1]オートコードテストマニフェストファイル
		MANIFEST_CONFIG_ERROR	[MA-2]コンフィギュレーションエラーテストマニフェストファイル
		MANIFEST_SCRATCH_CODE	[MA-3]スクラッチコードテストマニフェストファイル

		auto_code_1/			[AUT]オートコードテスト第1ブロック用テストフォルダ
		auto_code_2/			[AUT]オートコードテスト第2ブロック用テストフォルダ
		auto_code_3/			[AUT]オートコードテスト第3ブロック用テストフォルダ
		 :
		config_error/			[CFG]コンフィギュレーションエラーテスト用テストフォルダ
		scratch_code/			[SCR]スクラッチコードテスト用テストフォルダ
		specified_tesry/		[SPC]特定のTESRYデータ用テストフォルダ

(6.1.1) オートコードテスト
	auto_code_1/				[AUT]
		asp.exe					[AA-01]実行モジュール
		MANIFEST_AUTO_CODE_1	[AA-02]オートコードテスト第1ブロックのマニフェストファイル
		out.c					[AA-03]TTG生成プログラムファイル
		out.cfg					[AA-04]TTG生成プログラムコンフィグファイル
		out.h					[AA-05]TTG生成プログラムヘッダファイル
		result_make.log			[L-MAK]make実行のログファイル
		result_make_depend.log	[L-DPN]make depend実行のログファイル
		result_ttg.log			[L-TTG]TTG実行のログファイル
		skyeye_***.log			[L-SKY]SkyEye実行のログファイル
		ttg_exclusion_list.txt	[L-XCL]TTG実行により除外されたテストケース一覧
		 :

(6.1.2) スクラッチコードテスト
	scratch_code/					[SCR]
		CRE_TSK_F-b-3/				[AS-01]テスト対象テストケース用テストフォルダ
			fmp.exe					[AS-02]実行モジュール
			result_make.log			[L-MAK]make実行のログファイル
			result_make_depend.log	[L-DPN]make depend実行のログファイル
			out.c					[AS-03]ハンドコーディングプログラムファイル
			out.cfg					[AS-04]ハンドコーディングプログラムコンフィグファイル
			out.h					[AS-05]ハンドコーディングプログラムヘッダファイル
			skyeye_***.log			[L-SKY]SkyEye実行のログファイル
			variation.txt			[AS-06]バリエーション判別ファイル(FMP対象テストケース限定)
			 :

(6.1.3) コンフィギュレーションエラーテスト
	config_error/					[CFG]
		result_config_error.log		[AC-01]エラー確認ログファイル
		ATT_INI_F-a/				[AC-02]テスト対象テストケース用テストファイル
			err_code.txt			[AC-03]エラー内容確認用ファイル
			result_make_depend.log	[L-DPN]make depend実行のログファイル
			out.c					[AC-04]ハンドコーディングプログラムファイル
			out.cfg					[AC-05]ハンドコーディングプログラムコンフィグファイル
			out.h					[AC-06]ハンドコーディングプログラムヘッダファイル
			variation.txt			[AC-07]バリエーション判別ファイル(FMP対象テストケース限定)
			 :

(6.1.4) 特定のTESRYデータを対象にしたオートコードテスト
(6.1.1)節を参照する．

----------------------------------------------------------------------
(6.2) SILテスト
----------------------------------------------------------------------
	sil_test/	[S]
		asp.exe					[S-01]実行モジュール
		out.c					[S-02]ハンドコーディングプログラムファイル
		out.cfg					[S-03]ハンドコーディングプログラムコンフィグファイル
		out.h 					[S-04]ハンドコーディングプログラムヘッダファイル
		result_make.log			[L-MAK]make実行のログファイル
		result_make_depend.log	[L-DPN]make depend実行のログファイル
		skyeye_***.log			[L-SKY]SkyEye実行のログファイル
		 :

----------------------------------------------------------------------
(6.3) ターゲット依存APIのチェック
----------------------------------------------------------------------
	check_library/	[C]
		exception/	[CE]CPU例外ハンドラ用テストフォルダ
		interrupt/	[CI]割込みハンドラ用テストフォルダ
		timer/		[CT]タイマ用テストフォルダ

(6.3.1) CPU例外発生機能
※割込み発生機能や時間制御機能のチェックをした場合も，同様のフォルダ構
  成となる

	exception/					[CE]
		fmp.exe					[C-01]実行モジュール
		result_make.log			[L-MAK]make実行のログファイル
		result_make_depend.log	[L-DPN]make depend実行のログファイル
		out.c					[C-02]ハンドコーディングプログラムファイル
		out.cfg					[C-03]ハンドコーディングプログラムコンフィグファイル
		out.h					[C-04]ハンドコーディングプログラムヘッダファイル
		skyeye_***.log			[L-SKY]SkyEye実行のログファイル
		 :

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(7) テスト実施
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
TTBでテスト実施する際の詳細について記述する．なお，シミュレータや実機で
の実施事例は(12)，(13)章を参照する．

----------------------------------------------------------------------
(7.1) APIテスト
----------------------------------------------------------------------
APIテストに用いるTESRYデータやスクラッチプログラムは，以下のフォルダに
あるファイルを指している．【】内に示す英数字はCUIツール上のメニュー番号
に対応する．

ASPカーネルのテストの場合 : APIテストフォルダのASPカーネルフォルダ
FMPカーネルのテストの場合 : APIテストフォルダ

TTBのメインメニューでAPIテスト実施を選択すると，次の4種類のテスト内容を
選択する画面に遷移する．各テストについて，順に記述する．

・オートコードテスト【1】
・スクラッチコードテスト【2】
・コンフィギュレーションエラーテスト【3】
・特定のTESRYデータを対象にしたオートコードテスト【4】

(7.1.1) オートコードテスト
オートコードテストを選択した場合には，以下の処理が実行できるメニューに
遷移する．

(a) マニフェストファイル作成
TTGの入力対象とするTESRYデータの絶対パスをマニフェストファイルに記述す
る．改行のみの行で区切ることにより，TTGへの入力を分割できる．そのため，
テストプログラムを分割でき，結果として，モジュールの分割ができる．また，
テスト対象外にしたいテストケースがある場合には，そのテストケースの行を
削除するか，行の先頭に"#"を付与することで，(c)の処理でTTGの入力対象外と
なる．

オートコードテストのマニフェストファイル[MA-1]の作成方法は3種類ある．

  (a-1) 分割なし【1】
  APIテスト対象の全TESRYデータを一括でテスト実施するためのマニフェスト
  ファイルである．

  (a-2) 機能毎で分割【2】
  機能毎にテスト実施するためのマニフェストファイルである．各機能の区切
  りに，改行のみの行が出力される．ttsp/scripts/common.shで定義されてい
  るTEST_TARGETのいずれかがTESRYデータの絶対パスに含まれる場合に，マニ
  フェストファイルに含まれる．機能の種類については，(2.1.1)節を参照する．

  (a-3) 指定数で分割【3】
  全TESRYデータを指定数で分割してテスト実施するためのマニフェストファイ
  ルである．全TESRYデータを一括で実施する際に，ターゲットのメモリ容量が
  不足する場合に有用である．分割の区切りとなる箇所には，改行のみの行が
  出力される．分割数は，TTB環境設定ファイルで指定するか，TTB環境設定フ
  ァイルで指定されていなかった場合は，マニフェストファイル作成時に指定
  する．
  ※全TESRYデータ数が100件で分割数3だった場合，33件，33件，34件に分けて
    テスト実施できるマニフェストファイルを作成する

(b) テストフォルダ作成【5】
作成したマニフェストファイルを基に，テスト実施用フォルダ[AUT]を作成する．
マニフェストファイルの，改行のみの行で区切られたブロック数分のフォルダ
を作成する．また，作成したフォルダ内に，Makefileを作成し，各フォルダで
テスト対象となるTESRYデータ一覧が記載された，各ブロックのマニフェストフ
ァイル[AA-02]を出力する．

(c) TTG実行【6】
作成したテストフォルダ毎に，TTGを実行し，テストプログラム[AA-03]〜
[AA-05]を生成する．各ブロックのマニフェストファイルに指定されている
TESRYデータをTTGの入力とする．

(d) make(make depend / make / make clean / make realclean)【7】〜【a】
生成されたテストプログラムを用いて，各フォルダでmakeを実行する．実行モ
ジュール[AA-01]を生成するためには，make depend，makeの順で実行する．
※TTBを使用せずにmakeする場合は，(11.5.2)節を参照する．

(e) 特定のテストフォルダに対する操作【b】
特定のテスト実施用フォルダ[AUT]に対して，オートコードテストを実施するメ
ニュー画面に遷移する．【b】を押下するとまず，対象とするテスト実行用フォ
ルダを指定する画面になる．遷移後のメニュー画面で指定する処理内容は，本
節の(c)，(d)，(f)と同様である．

(f) モジュール実行(ターゲット依存部が実装されている場合のみ)【e】
生成した実行モジュールを実行する．

(7.1.2) スクラッチコードテスト
スクラッチコードテストを選択した場合には，以下の処理が実行できるメニュ
ーに遷移する．

(a) マニフェストファイル作成【1】
スクラッチコードテストの対象となるテストケースは，スクラッチプログラム
が用意されているテストケースの内，err_code.txtが用意されていないテスト
ケースである．ただし，err_code.txtの内容に"warining"と記述されているテ
ストケースに関しては，スクラッチコードテストでも実施するためスクラッチ
コードテストに含める．マニフェストファイル[MA-3]は，対象テストケースの
テストプログラムが格納されているフォルダへの絶対パスの一覧となる．
また，テスト対象外にしたいテストケースがある場合には，そのテストケース
の行を削除するか，行の先頭に"#"を付与することで，(b)〜(d)の処理を実施す
る際に対象外となる

※FMPカーネルの場合，バリエーション判別が必要となるテストケースでは，テ
  ストプログラムと同じフォルダにvariation.txtが格納されている．このテキ
  ストファイルに以下の記述されている内容と意味は以下である．また，項目
  とその値は半角コロン(:)で区切り，コロンの前後にスペースは含まないもの
  とする

  項目           | 値     | 意味
  --------------------------------------------------------------------------------
  timer_arch     | local  | ローカルタイマ方式限定
                 | global | グローバルタイマ方式限定
  --------------------------------------------------------------------------------
  prc_num        | 数字   | テスト実施に必要なプロセッサ数
  --------------------------------------------------------------------------------
  func_timer     | true   | システム時刻制御関数が必要
                 | false  | システム時刻制御関数が不要(本項目を省略した場合も同様)
  --------------------------------------------------------------------------------
  func_interrupt | true   | 割込み発生関数が必要
                 | false  | 割込み発生関数が不要(本項目を省略した場合も同様)
  --------------------------------------------------------------------------------
  func_exception | true   | CPU例外発生関数が必要
                 | false  | CPU例外発生関数が不要(本項目を省略した場合も同様)

(b) テストフォルダ作成【3】
作成したマニフェストファイルを基に，テスト実施用フォルダ[SCR]，[AS-01]
をテストケース毎に作成する．フォルダ名はテストIDと同名となる．作成した
フォルダ内に，Makefileを作成し，マニフェストファイルに記載されているフ
ォルダに格納されている全ファイルをコピーする([AS-03]〜[AS-06])．

(c) make(make depend / make / make clean / make realclean)【4】〜【7】
作成したフォルダ毎に，各フォルダにコピーされたテストプログラムを用いて
makeを実行する．実行モジュール[AS-02]を生成するためには，make depend，
makeの順で実行する．
※TTBを使用せずにmakeする場合は，(11.5.2)節を参照する．

(d) モジュール実行(ターゲット依存部が実装されている場合のみ)【e】
生成した実行モジュールを実行する．

(7.1.3) コンフィギュレーションエラーテスト
コンフィギュレーションエラーテストを選択した場合には，以下の処理が実行
できるメニューに遷移する．

(a) マニフェストファイル作成【1】

コンフィギュレーションエラーテストの対象となるテストケースは，スクラッ
チプログラムが用意されているテストケースの内，err_code.txtが用意されて
いるテストケースである．マニフェストファイル[MA-2]は，対象テストケース
のテストプログラムが格納されているフォルダへの絶対パスの一覧となる．
また，テスト対象外にしたいテストケースがある場合には，そのテストケース
の行を削除するか，行の先頭に"#"を付与することで，(b)〜(c)の処理を実施す
る際に対象外となる．

※FMPカーネルの場合のバリエーション判別については，スクラッチコードテス
  トを参照する

(b) テストフォルダ作成【2】
作成したマニフェストファイルを基に，テスト実施用フォルダ[CFG]，[AC-02]
をテストケース毎に作成する．フォルダ名はテストIDと同名となる．作成した
フォルダ内に，Makefileを作成し，マニフェストファイルに記載されているフ
ォルダに格納されている全ファイルをコピーする([AC-03]〜[AC-07])．

(c) コンフィギュレーションエラーの確認【3】
作成したフォルダ毎に，各フォルダにコピーされたテストプログラムを用いて
コンフィギュレーションエラーの確認を行う．make dependとmakeをエラーが出
るまで実行し，出たエラー内容と，err_code.txtの内容を比較する．両者の内
容が一致していた場合にテスト成功とし，両者が一致しない，もしくは，ビル
ド時にエラーが出ない場合にはテスト失敗とする．
※TTBを使用せずにmakeする場合は，(11.5.2)節を参照する．

(7.1.4) 特定のTESRYデータを対象にしたオートコードテスト
特定のTESRYデータを対象にしたオートコードテストを選択した場合には，以下
の処理が実行できるメニューに遷移する．

(a) テストフォルダ作成【2】
テスト実施のためのフォルダ[SPC]を作成する．また，作成したフォルダ内に，
Makefileを作成する．

(b) TTG実行【3】
オートコードテストの説明を参照．
なお，TTGの入力とするTESRYデータは，TTB環境設定ファイルで指定するか，
TTB環境設定ファイルで指定されていなかった場合は，TTG実行時に指定する．

(c) make(make depend / make / make clean / make realclean)【4】〜【7】
実施方法は，(7.1.1)節を参照する．
※TTBを使用せずにmakeする場合は，(11.5.2)節を参照する．

(d) モジュール実行(ターゲット依存部が実装されている場合のみ)【e】
実施方法は，(7.1.1)節を参照する．

----------------------------------------------------------------------
(7.2) SILテスト
----------------------------------------------------------------------
(7.2.1) 必要なターゲット依存API
SILテストでは，SIL_LOC_INTやSIL_LOC_SPNにより，割込みがロックされること
を確認するため，割込みを発生させるターゲット依存APIの実装は必須である．
なお，タイムイベントハンドラからの割込み発生確認のため，タイマ割込みよ
り高い優先度が設定可能である必要がある．また，CPU例外ハンドラからのSIL
関数発行のテストも行うため，CPU例外を発生させるターゲット依存APIも必須
である．

(7.2.2) 必要な割込み番号
割込み発生確認用に1つ必要である．ただし，2つ用意されていれば，割込みハ
ンドラからのSIL関数発行のテストも行う．3つ用意されていれば，割込みサー
ビスルーチンからのSIL関数発行のテストも行う．

(7.2.3) 実施手順
SILテストに用いるスクラッチプログラムは，以下のフォルダにあるファイルを
指している．【】内に示す英数字はCUIツール上のメニュー番号に対応する．

ASPカーネルのテストの場合 : SILテストフォルダのASPカーネルフォルダ
FMPカーネルのテストの場合 : SILテストフォルダのFMPカーネルフォルダ

TTBのメインメニューでSILテスト実施を選択すると，以下の処理が実行できる
メニューに遷移する．

(a) テストフォルダ作成【2】
テスト実施用フォルダ[S]を作成する．また，作成したフォルダ内に，
Makefileを作成し，SILテスト用フォルダの対象カーネルのフォルダに格納され
ている全ファイルをコピーする([S-02]〜[S-04])．

(b) make(make depend / make / make clean / make realclean)【3】〜【6】
作成したフォルダで，makeを実行する．実行モジュール[S-01]を生成するため
には，make depend，makeの順で実行する．
※TTBを使用せずにmakeする場合は，(11.5.2)節を参照する．

(c) モジュール実行(ターゲット依存部が実装されている場合のみ)【e】
生成した実行モジュールを実行する．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(8) 実行結果の確認方法
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
各処理の実行結果の確認方法について記述する．

(8.1) TTG実行結果
TTGを実行した場合，実行したテストファイルにログファイル[L-TTG]が出力さ
れる．また，TTGのバリエーション判別機能により，除外されたテストケース
については，一覧がテキストファイル[L-XCL]に出力される．

(8.2) make depend / make実行結果
ビルドした場合，実行したテストファイルにログファイルが出力される．

・make depend実行 : [L-DPN]
・make実行        : [L-MAK]

(8.3) APIテスト コンフィギュレーションエラーテストの実行結果
コンフィギュレーションエラー確認の実行結果は，コンフィギュレーションテ
スト用テストフォルダにログファイル[AC-01]が出力される．

(8.4) 実行モジュールの実行結果
ターゲット依存部が実装されている場合のみ，結果の確認ができる．
なお，at91skyeye_gccの場合，各テストフォルダに，SkyEye実行のログファイ
ル[L-SKY]が出力される．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(9) ターゲット依存APIのチェック
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
TTBは，ターゲット依存部テストライブラリフォルダに作成するテストライブラ
リをチェックする．チェックできる項目は，以下である．

・CPU例外発生機能(exception)
・割込み発生機能(interrupt)
・時間制御機能(timer)

TTBのメインメニューで，ターゲット依存部のライブラリをチェックする項目を
選択すると，上記3機能を合わせて確認するか，特定の機能を確認するかを選択
できるメニューに遷移する．

チェックする項目を選択した後の処理内容について記述する(どの機能を選択し
ても処理内容は同様である)．

(a) テストフォルダ作成
テスト実施する機能のテスト実施フォルダ[C]，[CE]，[CI]，[CT]を作成する．
フォルダ名は機能の英名となる．また，作成したフォルダ内に，Makefileを作
成し，テストライブラリチェックプログラムフォルダに格納されている全ファ
イルをコピーする([C-02]〜[C-04])．

(b) make(make depend / make / make clean / make realclean)
作成したフォルダ毎に，各フォルダにコピーされたテストプログラムを用いて
makeを実行する．実行モジュール[C-01]を生成するためには，make depend，
makeの順で実行する．

(c) モジュール実行(ターゲット依存部が実装されている場合のみ)
生成した実行モジュールを実行する．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(10) カーネルライブラリ作成(任意)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
テスト対象カーネルのカーネルライブラリの作成について記述する．

カーネルライブラリとは，カーネルのオブジェクトファイルを事前に作成して
おくことにより，ビルドの時間を短縮するためのものである．詳細は，カーネ
ルパッケージのユーザーズマニュアルを参照する．
カーネルのソースコードを変更した際には，カーネルライブラリを再度作成す
る必要がある．

(10.1) カーネルライブラリを使用するための設定
TTB環境設定ファイルで設定する．

(10.2) カーネルライブラリの作成
TTBのメインメニューで，カーネルライブラリの項目を選択すると，カーネルラ
イブラリの処理に関するメニュー画面に遷移する．実行できる処理は以下であ
る．

(a) カーネルライブラリフォルダ作成
カーネルライブラリフォルダ[K]を作成する．また，作成したフォルダに
Makefileを作成し，カーネルのサンプルプログラムをコピーする．

(b) make(make depend / make / make clean / make realclean)
作成したフォルダで，makeを実行する．カーネルライブラリを生成するために
は，make depend，makeの順で実行する．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(11) 注意事項，制限事項
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
TTSPの注意事項，制限事項について記述する．

----------------------------------------------------------------------
(11.1) カーネルに対する制限事項
----------------------------------------------------------------------
(11.1.1) タイムティック
タイムティック=1msであるターゲットを前提とする．

(11.1.2) グローバルIRC
TTSPはローカルIRCのターゲットを想定して開発しているため，グローバルIRC
のターゲットは未サポートである．

(11.1.3) ローカルタイマ方式におけるタイマ割込みの割込み優先度
TTSPでは，ローカルタイマ方式における各プロセッサのタイマ割込みの割込み
優先度は，同一であることを前提とする．

----------------------------------------------------------------------
(11.2) テストケースの制限事項
----------------------------------------------------------------------
(11.2.1) ext_ker
カーネルを終了させるAPIであるext_kerを発行すると，カーネルが終了してし
まうため，ext_kerのテストは実施対象外とする．

(11.2.2) カーネル管理外の割込みハンドラ
カーネル管理外の割込みハンドラはターゲット依存であるため，対象外とする．

(11.2.3) テストシートに記載されている項目
テストシートがあるAPIに，テスト対象外となる項目がある場合は，その内容を
テストシートに記載しているので，テストシートを参照する．

※テストケース抽出ポリシーは，APIテストのdeveloper.txtを参照．

----------------------------------------------------------------------
(11.3) テスト実施に関する注意事項
----------------------------------------------------------------------
(11.3.1) コンフィギュレーションエラーテストの実行結果確認方法
err_code.txtには統合仕様書に記載されているエラーコードのみ記述されてい
る．これは，ターゲットによってエラーメッセージが異なる場合があるからで
ある(warningを確認するテストケース，もしくは，エラーコードが出力されな
いテストケースを除く)．
また，err_code.txtのエラー内容が，リダイレクションしたエラーメッセージ
に存在するか否かの確認のみ実施している．err_code.txtのエラー内容以外の
エラーが出る場合については関与しない．

(11.3.2) ターゲットによりテスト実施が不可となるテストケース
静的APIのテストケースにおいて，以下のマクロの定義の有無によって，コンフ
ィギュレータのエラー条件が異なる．TTSPでは，以下に示したマクロの有無の
状態である前提で作成している．

■マクロ定義あり
  ・CHECK_FUNC_ALIGN
  ・CHECK_FUNC_NONNULL
  ・CHECK_STKSZ_ALIGN
  ・CHECK_STACK_ALIGN
  ・CHECK_STACK_NONNULL
  ・CHECK_MPF_ALIGN
  ・CHECK_MPF_NONNULL
  ・INTNO_CFGINT_VALID
  ・INTPRI_CFGINT_VALID
  ・INHNO_DEFINH_VALID

■マクロ定義なし
  ・USE_TSKINICTXB
  ・TARGET_MIN_STKSZ
  ・INTNO_FIX_KERNEL
  ・INTNO_FIX_NONKERNEL
  ・INHNO_FIX_KERNEL
  ・INHNO_FIX_NONKERNEL

上記のマクロ定義ありのマクロが用意されていない場合は，以下のテストケー
スを実施対象外とする必要がある．逆にマクロ定義なしのマクロが用意されて
いる場合は，TTSPではサポート外となるため，必要に応じてユーザが別途テス
トを実施する．

・CHECK_FUNC_ALIGN
  - ASP/staticAPI/CRE_ALM/CRE_ALM_b
  - ASP/staticAPI/CRE_CYC/CRE_CYC_b
  - ASP/staticAPI/CRE_TSK/CRE_TSK_b
  - ASP/staticAPI/DEF_TEX/DEF_TEX_b

・CHECK_FUNC_NONNULL
  - ASP/staticAPI/CRE_ALM/CRE_ALM_W_a
  - ASP/staticAPI/CRE_CYC/CRE_CYC_W_a
  - ASP/staticAPI/CRE_TSK/CRE_TSK_W_c

・CHECK_STKSZ_ALIGN
  - ASP/staticAPI/CRE_TSK/CRE_TSK_d
  - ASP/staticAPI/DEF_ICS/DEF_ICS_a

・CHECK_STACK_ALIGN
  - ASP/staticAPI/CRE_TSK/CRE_TSK_e
  - ASP/staticAPI/DEF_ICS/DEF_ICS_b

・CHECK_STACK_NONNULL
  - ASP/staticAPI/CRE_TSK/CRE_TSK_W_c
  - ASP/staticAPI/DEF_ICS/DEF_ICS_W_a

・CHECK_MPF_ALIGN
  - ASP/staticAPI/CRE_MPF/CRE_MPF_b-3/

・CHECK_MPF_NONNULL
  - ASP/staticAPI/CRE_MPF/CRE_MPF_W_a/

・INTNO_CFGINT_VALID
  - ASP/staticAPI/CFG_INT/CFG_INT_b-1

・INTPRI_CFGINT_VALID
  - ASP/staticAPI/CFG_INT/CFG_INT_b-2-1
  - ASP/staticAPI/CFG_INT/CFG_INT_b-2-2

・INHNO_DEFINH_VALID
  - ASP/staticAPI/DEF_INH/DEF_INH_b

(11.3.3) タイマ割込みの割込み優先度が-1の場合
TTGが生成するテストプログラムでは，アラームハンドラを起動させるために，
ターゲット依存APIによってシステム時刻を進める．FMPカーネルにおいては，
あるプロセッサAが割込み優先度マスクが0でない状態で，別のプロセッサBに起
動中のアラームハンドラが登場するテストケースが存在する．ここで，プロセ
ッサAの割込み優先度マスクが，タイマ割込みの割込み優先度より高い場合，プ
ロセッサA→プロセッサBの順にシステム時刻を進めようとした際に，プロセッ
サAにタイマ割込みが発生しない状態となるため，プロセッサAのシステム時刻
が進められずにエラーとなってしまう．そこで該当するTESRYデータでは，"タ
イマ割込みより低い任意の割込み優先度マスク(ANY_IPM_FOR_TIMER)"というマ
クロを設け，タイマ割込みの割込み優先度から+1した値を指定している．

しかし，割込み優先度が1段階しかないターゲットシステムなど，タイマ割込み
の割込み優先度が-1である場合，該当のテストケースとなる状況がないため，
実施する必要性がない．該当するテストケースは以下であるので，割込み優先
度が1段階のみの場合は，マニュフェストファイルから以下の削除することで除
外する必要がある．(ASPカーネルには該当テストケースは存在しない)
また，configure.yamlにおいて，ANY_IPM_FOR_TIMERが0となりTTGがエラーとな
ることを避けるため，ANY_IPM_FOR_TIMERを-1などの負の値へ設定する．

・FMP/dataqueue/ifsnd_dtq/ifsnd_dtq_F-b-1-1-3.yaml
・FMP/dataqueue/ifsnd_dtq/ifsnd_dtq_F-b-2-1-3.yaml
・FMP/dataqueue/ipsnd_dtq/ipsnd_dtq_F-b-1-1-3.yaml
・FMP/dataqueue/ipsnd_dtq/ipsnd_dtq_F-b-2-1-3.yaml
・FMP/eventflag/iset_flg/iset_flg_F-c-1-3.yaml
・FMP/eventflag/iset_flg/iset_flg_F-d-1-3.yaml
・FMP/pridataq/ipsnd_pdq/ipsnd_pdq_F-b-1-1-3.yaml
・FMP/pridataq/ipsnd_pdq/ipsnd_pdq_F-b-2-1-3.yaml
・FMP/semaphore/isig_sem/isig_sem_F-b-1-3.yaml
・FMP/semaphore/isig_sem/isig_sem_F-c-1-3.yaml
・FMP/sys_manage/imrot_rdq/imrot_rdq_F-e-1-1-3.yaml
・FMP/sys_manage/imrot_rdq/imrot_rdq_F-e-2-1-3.yaml
・FMP/task_manage/iact_tsk/iact_tsk_F-c-1-3.yaml
・FMP/task_manage/iact_tsk/iact_tsk_F-d-6-5.yaml
・FMP/task_manage/imact_tsk/imact_tsk_F-g-1-1-1-3.yaml
・FMP/task_manage/imact_tsk/imact_tsk_F-h-2-6-5.yaml
・FMP/task_manage/imact_tsk/imact_tsk_F-i-1-1-1-3.yaml
・FMP/task_manage/imact_tsk/imact_tsk_F-i-2-6-5.yaml
・FMP/task_manage/imact_tsk/imact_tsk_F-j-1-1-1-3.yaml
・FMP/task_manage/imact_tsk/imact_tsk_F-j-2-6-5.yaml
・FMP/task_sync/irel_wai/irel_wai_F-c-5-5.yaml
・FMP/task_sync/irel_wai/irel_wai_F-d-1-3.yaml
・FMP/task_sync/irel_wai/irel_wai_F-e-1-3.yaml
・FMP/task_sync/irel_wai/irel_wai_F-f-1-3.yaml
・FMP/task_sync/irel_wai/irel_wai_F-g-1-3.yaml
・FMP/task_sync/iwup_tsk/iwup_tsk_F-d-1-1-3.yaml
・FMP/task_sync/iwup_tsk/iwup_tsk_F-d-7-5.yaml

----------------------------------------------------------------------
(11.4) コンパイル時の注意事項
----------------------------------------------------------------------
(11.4.1) ARMCCでのコンパイル
TTGが生成するテストプログラムを始め，TTSPに含まれるテストプログラムを，
ARMCCでコンパイルする場合，以下のWarningが出力されることがあるが，いず
れも以下にまとめた理由により，問題ないと判断した．
※ARMCC 5.0 [Build 177]で確認

■#550-D: variable "ercd" was set but never used

APIテスト等で，APIの戻り値を確認するための変数として，"ercd"を使用する．
上記Warningが出力される箇所では，ercdが使用されていないのではなく，if文
の中だけでしか使用されていないだけであるので問題ない．

■#68-D: integer conversion resulted in a change of sign

APIテストのブラックボックステストでは，引数の異常系のテストで，最小値
-1と最大値+1という境界値分析を適用している．引数が符号無し整数型の場合，
最小値-1は負数(-1)となり有り得ない数値であるが，指定可能であるためテス
トを実施する．このテストのコンパイルでは，上記Warningが出力されるが，
-1が反転して結果的に異常値となるので問題はない．

■#1254-D: arithmetic on pointer to void or function type

タスクのスタックタイズや，固定長メモリプールのブロックサイズを確かめる
テストにおいては，ポインタ算術演算が必要となる．このテストのコンパイル
では，上記Warningが出力されるが，意図した演算であるので，問題はない．

■#111-D: statement is unreachable

TTGが生成がするテストプログラムでは，入力されたTESRYデータの処理をその
まま実行する．テストによっては処理単位を意図的に終了させるために，APIの
代わりに"return"を記述することがあるが，TTGは"return"により処理単位が終
了することまでは解析しないので，上記Warningが出力されるテストプログラム
を生成することがある．しかし，テストとして，ある処理単位の"return"発行
後の状態では，別の処理単位が必ず実行状態となるので，テストプログラムの
動作として問題は発生しない．

(11.4.2) strict aliasing ルール違反
コンパイラによっては，テストプログラムコンパイル時，以下のような警告メ
ッセージが出ることがある．

warning: dereferencing type-punned pointer will break strict-aliasing rules

これは，型キャストに伴う警告メッセージであり，以下のようなコードに対し
て出力される．

T_MSG_PRI* p_msgpri;
 :
ercd = ttsp_ref_msg(ASP_mailbox_snd_mbx_e_2_1_MBX1, 1, (T_MSG**)&p_msgpri);

ただし，上記コードはテストプログラム内にあり，tsp_ref_msgの実体は別ファ
イル(共通部テストライブラリ)で定義されているため，最適化は効かず実害は
ない．(詳細はASPカーネルのdesign.txt参照)本警告を抑止する場合は，
MakefileのCOPTSへ，"-fno-strict-aliasing"オプションを追加する．

----------------------------------------------------------------------
(11.5) その他
----------------------------------------------------------------------
(11.5.1) Linuxでの使用について
クロスコンパイラのようなOS環境依存のプログラムを除いて，TTBおよびTTGを
構成しているシェルスクリプト，Rubyプログラムが，以下のLinux環境で動作す
ることは確認している．
・CentOS release 5.5 (Final) <2.6.18-194.32.1.el5>
  ・make: 3.81
  ・perl: 5.8.8
  ・ruby: 1.8.5

ただし，他のディストリビューションによっては，使用できないコマンドや，
サポートされていないメソッド等が存在する可能性がある．

(11.5.2) TTBを使用せずにmakeを実行する方法
TTBでは，make実行時に，TTBターゲット依存設定ファイルで設定した，「ター
ゲット依存部でKERNEL_COBJSへ追加するオブジェクトファイル」をオプション
として指定している．これによりテストライブラリをビルドしているため，
TTBを使わずに手動でmakeを実行するとエラーが発生する．手動でmakeを実行し
たい場合は，カーネルのターゲット依存部のMakefile.targetに定義されている
KERNEL_COBJSを修正し，TTBターゲット依存設定ファイルで設定した
KERNEL_COBJSと同じ状態とする．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(12) 実施事例(ASPカーネル)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
シュミレータや，実機でのASPカーネルテスト実施事例について，ターゲット毎
にまとめる．

----------------------------------------------------------------------
(12.1) at91skyeye_gcc
----------------------------------------------------------------------
動作確認に使用したバージョンについては，(2.3)節を参照する．

(12.1.1) Cygwinインストール
・http://www.cygwin.com/ からsetup.exeをダウンロードし，実行する
・Install from internetを選択する
  ※ダウンロードサイト等は任意
・All Installとし，全パッケージをインストールする
・Cygwinのバージョンが1.7.5以上であることを確認する
  # uname -r
  # 1.7.5(0.225/5/3)

(12.1.2) Sourcery G++ Liteインストール
・http://www.codesourcery.com/sgpp/lite/arm
  からarm-2010.09-51-arm-none-eabi.exeをダウンロードし，実行する
・インストールパスにスペースを含まないパスを指定してインストールする
  例) C:\cygwin\usr\local\SourceryG++Lite
  ※cygwinにて，
  # arm-none-eabi-gcc -v
  と入力し，バージョンが出力されれば問題ない

(12.1.3) devicemanager.exeインストールとskyeye配置
・http://www.toppers.jp/sim.html
  から，デバイスマネージャとskyeyeのパッケージをダウンロードする
・devicemanager.exeとdevicemanagerps.dllが配置されているディレクトリに
  て，regist.batを実行する
  ※成功メッセージが出力されれば問題ない．されない場合は上記ファイルの
    実行権限を確認する
・skyeye.exeをパスの通ったディレクトリへコピーする
  例) Cygwin上の/usr/local/bin

(12.1.4) ASPカーネル展開
・(4.1)節を参照する

(12.1.5) TTSPの配置と環境設定
・TTSPの配置については，(4.2)節を参照する
・TTB環境設定ファイルの以下の項目を設定する
  ・TARGET_NAME="at91skyeye_gcc"
  ・PROFILE_NAME="ASP"
・ターゲット依存部の設定
  TTBターゲット依存設定ファイルは，at91skyeye_gccのターゲット依存部の
  テストライブラリにあるファイルを用いる．

(12.1.6) 実行モジュール作成
・(7)章を参照し，TTBを用いて実行モジュールを作成する

(12.1.7) 実行モジュールの実行
・TTBはat91skyeye_gcc依存部の実行モジュールの実行について，実装済みであ
  るので，TTBを用いて実行する

(12.1.8) 実行結果の確認方法
・各テストフォルダに，SkyEye実行のログファイル[L-SKY]が出力される
・確認方法については，TTGのユーザーズマニュアルの(7.7)節を参照する

----------------------------------------------------------------------
(12.2) apsh2a_gcc
----------------------------------------------------------------------
動作確認は以下の環境で行った．

・WindowsXP SP3
・Cygwin 1.7.7(0.230/5/3)
  ・setup.exe version 2.697 にて全パッケージインストール
    ・make: 3.81
    ・perl: 5.10.1
    ・ruby: 1.8.7
・ASPカーネル apsh2a_gcc依存部: Release 1.7.1
　　（簡易パッケージ：asp_apsh2a_gcc-20110809.tar.gz）
・クロスコンパイラ: sh-elf-gcc 4.3.2
・コンフィギュレータ: cfg-1.7.0.tar.gz
    筆者の環境では，コンフィギュレータのCygwin用バイナリパッケージ
    cfg-cygwin-1_7_0.tar.gzでは動作せず，Windows用パッケージ
    cfg-mingw-static-1_7_0.zipを用いて動作確認した．
・デバッグ環境
    Xross Finder((株)アルファプロジェクト製)
    詳細は，asp/target/apsh2a_gcc/target_user.txtの「デバッグ環境」を
    参照

(12.2.1) Cygwinのインストール
・http://www.cygwin.com/ からsetup.exeをダウンロードし，実行する
・Install from internetを選択する
  ※ダウンロードサイト等は任意
・All Installとし，全パッケージをインストールする

(12.2.2) クロスコンパイラのインストール
・http://www.superh-tkernel.org/jpn/download/tools/index.html
  からバイナリパッケージsh-elf-4.3.2.090207.tar.bz2
  (gcc-4.3.2 Cygwin host)をダウンロードする
・スペースを含まないパスを指定して，所望のディレクトリで展開する
  例) C:\cygwin\usr\local\sh-elf-4.3.2
  ※cygwinにて，
  # sh-elf-gcc -v
  と入力し，バージョンが出力されれば問題ない

(12.2.3) ASPカーネル展開
・(4.1)節を参照する

(12.2.4) TTSPの配置と環境設定
・TTSPの配置については，(4.2)節を参照する
・TTB環境設定ファイルの以下の項目を設定する
  (詳細はttsp/library/ASP/target/apsh2a_gcc/README.txtを参照)
  ・TARGET_NAME="apsh2a_gcc"
  ・PROFILE_NAME="ASP"
  ・USE_KERNEL_LIB="true"  (必須ではない)
  ※上記の設定で，TTBターゲット依存設定ファイルは，自動的にapsh2a_gcc
    ターゲット依存部のテストライブラリにあるファイルを用いるように
    設定される

(12.2.5) 実行モジュール作成
・(7)章を参照し，TTBを用いて実行モジュールを作成する

(12.2.6) 実行モジュールの実行
・TTBはapsh2a_gcc依存部の実行モジュールの実行について，未実装である
  るので，デバッガを用いた通常の方法で実行する
・この際，ターミナルソフトを用いてシリアルポートの出力をログに記録し
  ておく

(12.2.7) 実行結果の確認方法
・上記ログを用いて確認する
・確認方法については，TTGのユーザーズマニュアルの(7.7)節を参照する

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(13) 実施事例(FMPカーネル)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
シュミレータや，実機でのFMPカーネルテスト実施事例について，ターゲット毎
にまとめる．

----------------------------------------------------------------------
(13.1) at91skyeye_gcc
----------------------------------------------------------------------
動作確認に使用したバージョンについては，(2.3)節を参照する．
環境構築については，(12.1.1)節〜(12.1.4)節を参照する．

(13.1.1) TTSPの配置と環境設定
・TTSPの配置については，(4.2)節を参照する
・TTB環境設定ファイルの以下の項目を設定する
  ・TARGET_NAME="at91skyeye_gcc"
  ・PROFILE_NAME="FMP"
・ターゲット依存部の設定
  TTBターゲット依存設定ファイルは，at91skyeye_gccのターゲット依存部の
  テストライブラリにあるファイルを用いる．

(13.1.2) 実行モジュール作成
・(12.1.6)節を参照する

(13.1.3) 実行モジュールの実行
・(12.1.7)節を参照する

(13.1.4) 実行結果の確認方法
・(12.1.8)節を参照する

----------------------------------------------------------------------
(13.2) apsh2ad_gcc
----------------------------------------------------------------------
動作確認は以下の環境で行った．

・WindowsXP SP3
・Cygwin 1.7.7(0.230/5/3)
  ・setup.exe version 2.697 にて全パッケージインストール
    ・make: 3.81
    ・perl: 5.10.1
    ・ruby: 1.8.7
・FMPカーネル apsh2ad_gcc依存部: Release 1.2.0
    （簡易パッケージ：fmp_apsh2ad_gcc-20110809.tar.gz）
・クロスコンパイラ: sh-elf-gcc 4.3.2
・コンフィギュレータ: cfg-1.7.0.tar.gz
    筆者の環境では，コンフィギュレータのCygwin用バイナリパッケージ
    cfg-cygwin-1_7_0.tar.gzでは動作せず，Windows用パッケージ
    cfg-mingw-static-1_7_0.zipを用いて動作確認した．
・デバッグ環境
    Code Debugger DR-01(ビットラン(株)製）
    詳細は，fmp/target/apsh2ad_gcc/target_user.txtの「デバッグ環境」を
    参照

(13.2.1) Cygwinのインストール
・(12.2.1) 節を参照する

(13.2.2) クロスコンパイラのインストール
・(12.2.2) 節を参照する

(13.2.3) FMPカーネル展開
・(4.1)節を参照する

(13.2.4) TTSPの配置と環境設定
・TTSPの配置については，(4.2)節を参照する
・TTB環境設定ファイルの以下の項目を設定する
  (詳細はttsp/library/FMP/target/apsh2ad_gcc/README.txtを参照)
  ・TARGET_NAME="apsh2ad_gcc"
  ・PROFILE_NAME="FMP"
  ・USE_KERNEL_LIB="true"  (必須ではない)
  ※上記の設定で，TTBターゲット依存設定ファイルは，自動的にapsh2ad_gcc
    ターゲット依存部のテストライブラリにあるファイルを用いるように
    設定される

(13.2.5) 実行モジュール作成
・(7)章を参照し，TTBを用いて実行モジュールを作成する

(13.2.6) 実行モジュールの実行
・TTBはapsh2ad_gcc依存部の実行モジュールの実行について，未実装である
  るので，デバッガを用いた通常の方法で実行する
・この際，ターミナルソフトを用いてシリアルポートの出力をログに記録し
  ておく

(13.2.7) 実行結果の確認方法
・上記ログを用いて確認する
・確認方法については，TTGのユーザーズマニュアルの(7.7)節を参照する

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(付録A) TESRYデータへのコメントについて
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
TESRYデータには，TTGの仕様やGCOV取得のために，テストケースとして必要の
ないオブジェクトやdo/post_conditionが記述されている場合がある．TESRYデ
ータからその理由を判断できるようにするため，TESRY記法のpre_conditionと
同じ階層に"note: TESRY_***"という属性を設け，コメント番号を付与する．各
コメント番号の意味は以下である．

【TESRY_001】
call_almhdrが実行されるのは実際にアラームハンドラが起動する前後であるた
め，sta_almのみのgcov取得ではcall_almhdrのgcovは取得できない．そこでテ
スト全体のgcovを取得することで対応する．

【TESRY_002】
call_cychdrが実行されるのは実際に周期ハンドラが起動する前後であるため，
sta_cycのみのgcov取得ではcall_cychdrのgcovは取得できない．そこでテスト
全体のgcovを取得することで対応する．

【TESRY_003】
TTGが出力するソースコードでは，次のコンディションに実行状態の処理単位が
存在しない場合，メインタスクが実行状態となってしまう．したがって，実行
状態のタスクが存在しないテストケースにおいて意図したパスを通すことがで
きない．そこで時間を止めず，do_0でアラームハンドラを動作開始させ，アラ
ームハンドラが起動する前にdo_1でタスクを待ち状態にするというTESRYデータ
にすることで，実行状態のタスクが存在しない状態を作成する．

【TESRY_004】
TTGでは，同一コンディション内に起動中の非タスクコンテキストが複数存在す
る状態を指定できない．そこでpre_conditionではアラームハンドラを実行状態
としておき，do_0でアラームハンドラがCPU例外を発生させるというTESRYデー
タで対応する．

【TESRY_005】
TTGでは，pre_conditionにおいてCPUロック状態を指定された場合，実行状態と
なっている処理単位がloc_cpu(iloc_cpu)を発行してCPUロック状態とする．し
たがって，CPUロック中に発生したCPU例外ハンドラが実行状態という
pre_conditionは表現できない．そこでpre_conditionでCPUロック状態，do_0で
CPU例外を発生，do_1でCPU例外ハンドラがテスト対象のAPIを発行，という
TESRYデータで対応する．

【TESRY_006】
カーネルには割込み要求禁止フラグを確認する手段が無い．そのため，割込み
要求禁止フラグがセットされている場合は割込みを発生させても割込みハンド
ラが起動しないことを確認し，割込み要求禁止フラグがセットされていな場合
は割込みを発生させると割込みハンドラが起動することを確認することで，割
込みの禁止/許可ができていることを確認する．

【TESRY_007】
固定長メモリプールを返却するには，取得した固定長メモリプールのアドレス
が既知である必要があるため，doで返却する固定長メモリプールを
pre_conditionで指定できない(アドレスが不明)．そのため，返却する固定長メ
モリプールはget_mpfによって取得するdo/post_conditionを用意して，返却す
るアドレスを格納した変数を明確にする．

【TESRY_008】
タスク例外処理ルーチンを終了させないTESRYデータとすると，タスク例外処理
ルーチンがメインタスクを起床し，ディスパッチが起こるため，call_texrtnの
命令網羅が実現されない．そこで，タスク例外処理ルーチンが終了し，タスク
例外処理ルーチンの対象タスクが再度実行状態となるまでがテストとなる
TESRYデータで対応する．

【TESRY_009】
実行状態でないタスクにras_texを発行した場合，call_texrtnが実行されるの
はディスパッチにより対象タスクが実行状態となるタイミングであるため，
ras_texのみのgcov取得ではcall_texrtnのgcovは取得できない．そこで，対象
タスクが実行状態になるdoもgcov取得対象とすることで対応する．

【TESRY_010】
他プロセッサに割付いている実行状態のタスクにras_texを発行した場合，
call_texrtnが呼ばれるタイミングはプロセッサ間割込みの出口処理なので，特
定のdoのgcov取得ではcall_texrtnのgcovが取得できない．そこで，テスト全体
のgcovを取得することで対応する．

【TESRY_011】
以下のコメントを参照．
・TESRY_008
・TESRY_009

【TESRY_012】
以下のコメントを参照．
・TESRY_008
・TESRY_010

【TESRY_013】
TTGでは，pre_conditionにおいてスピンロック取得中を指定された場合，
pre_conditionを作成する最後の段階でprocidに記載された処理単位がスピンロ
ックを取得する．したがって，スピンロック取得中に発生したCPU例外ハンドラ
が実行状態というpre_conditionは表現できない．そこで，pre_conditionでは
タスクがスピンロックを取得し，do_0でCPU例外ハンドラを発生，do_1でCPU例
外ハンドラがテスト対象のAPIを発行，というTESRYデータで対応する．

【TESRY_014】
対象タスクが実行可能状態のままテストを終了するTESRYデータとすると，
wait_tmout_okのgcovが取得できない．そこで，対象タスクが再度実行状態とな
るまでがテストとなるTESRYデータで対応する．

【TESRY_015】
FMPカーネルでプロセッサ数を1としてテスト実行する場合，pre_conditionの
prcidにはPRC_SELFしか登場せず，doで処理単位をPRC_OTHERにマイグレートす
るエラー条件のテストケースでは，post_conditionにもPRC_OTHERが登場しない
ため，TTGで本テストケースを除外することができない．そこで，
pre_conditionに，PRC_OTHERに割付けられた休止状態のダミータスクを用意す
ることで対応する．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(付録B) tips
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
----------------------------------------------------------------------
(B-1) TTB実行時の標準/標準エラー出力の取得
----------------------------------------------------------------------
TTB実行時に画面に出力された内容の取得方法を記述する．

# script result.txt
# ./ttb.sh
    :
  TTBの処理
    :
  TTB終了
# exit



以上
