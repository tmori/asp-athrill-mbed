
	chg_ipm テストシート

----------------------------------------------------------------------
 TTSP
     TOPPERS Test Suite Package

 Copyright (C) 2009-2011 by Center for Embedded Computing Systems
             Graduate School of Information Science, Nagoya Univ., JAPAN
 Copyright (C) 2009-2011 by Digital Craft Inc.
 Copyright (C) 2009-2011 by NEC Communication Systems, Ltd.
 Copyright (C) 2009-2011 by FUJISOFT INCORPORATED
 Copyright (C) 2009-2010 by Mitsuhiro Matsuura

 上記著作権者は，以下の (1)〜(3) の条件を満たす場合に限り，本ドキュメ
 ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
     および下記の無保証規定が，そのままの形でドキュメント中に含まれて
     いること．
 (2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
     を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
     ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
     りではない．
 (3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
     からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
     本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
     く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

 本ドキュメントは，無保証で提供されているものである．上記著作権者およ
 びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
 る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
 により直接的または間接的に生じたいかなる損害に関しても，その責任を負
 わない．

 $Id: chg_ipm.txt 2 2012-05-09 02:23:52Z nces-shigihara $
----------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

0. API仕様

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

chg_ipm		割込み優先度マスクの変更〔T〕

【C言語API】
	ER ercd = chg_ipm(PRI intpri)

【パラメータ】
	PRI			intpri		割込み優先度マスク

【リターンパラメータ】
	ER			ercd		正常終了（E_OK）またはエラーコード

【エラーコード】
	E_CTX			コンテキストエラー（非タスクコンテキストからの呼出
					し，CPUロック状態からの呼出し）
	E_PAR			パラメータエラー（intpriが不正）
	E_OACV〔P〕		オブジェクトアクセス違反（システム状態に対する通常
					操作2が許可されていない）

【機能】

割込み優先度マスクを，intpriで指定した値に変更する．

intpriは，TMIN_INTPRI以上，TIPM_ENAALL以下でなければならない．ただし，
ターゲット定義の拡張として，TMIN_INTPRIよりも小さい値を指定できる場合が
ある．

【補足説明】

割込み優先度マスクをTIPM_ENAALLに変更した場合，ディスパッチ保留状態が解
除され，ディスパッチが起こる可能性がある．また，タスク例外処理ルーチン
の実行が開始される可能性がある．

【μITRON4.0仕様との関係】

μITRON4.0仕様では，サービスコールの名称およびパラメータの名称が実装定
義となっているサービスコールである．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

1. 仕様ベースのブラックボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.1. エラー条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(a) ディスパッチ保留状態で呼出す場合．

    (a-1) 非タスクコンテキストから呼び出して，E_CTXエラーが返ること．

    (a-2) CPUロック状態で呼び出して，E_CTXエラーが返ること．

(b) intpriが不正の時にE_PARが返ること．

    (b-1) intpriが許容される最小値-1(TTSP_TMIN_INTPRI-1)の時にE_PARが
          返ること．

    (b-2) intpriが許容される最大値+1(TIPM_ENAALL+1)の時にE_PARが返るこ
          と．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.2. 正常条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(c) 割込み優先度マスクが，intpriで指定した値に変更されること．

    (c-1) 全解除状態から全解除でない状態に変更する場合．

    (c-2) 全解除でない状態から全解除状態に変更する場合．

(d) 割込み優先度マスクが全解除でない状態を解除することにより，ディスパ
    ッチが起こる状態で，全解除に変更するとディスパッチが発生すること．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

2. ソースコードの条件網羅確認

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.1. ソースコード
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ER
chg_ipm(PRI intpri)
{
	ER		ercd;

	LOG_CHG_IPM_ENTER(intpri);
	CHECK_TSKCTX_UNL();
	CHECK_INTPRI_CHGIPM(intpri);

	t_lock_cpu();
	t_set_ipm(intpri);
	if (intpri == TIPM_ENAALL) {
		ipmflg = true;
		if (!disdsp) {
			dspflg = true;
			if (p_runtsk != p_schedtsk) {
				dispatch();
			}
		}
		if (p_runtsk->enatex && p_runtsk->texptn != 0U) {
			call_texrtn();
		}
	}
	else {
		ipmflg = false;
		dspflg = false;
	}
	ercd = E_OK;
	t_unlock_cpu();

  error_exit:
	LOG_CHG_IPM_LEAVE(ercd);
	return(ercd);
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.2. マクロを展開したAPIと呼び出す内部関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[A] chg_ipm

00 : ER
01 : chg_ipm(PRI intpri)
02 : {
03 : 	ER		ercd;
04 : 
05 : 	if (sense_context() || t_sense_lock()) {
06 : 		ercd = E_CTX;
07 : 		goto error_exit;
08 : 	}
09 : 	if (!(TMIN_INTPRI <= (intpri) && (intpri) <= TIPM_ENAALL)) {
10 : 		ercd = E_PAR;
11 : 		goto error_exit;
12 : 	}
13 : 
14 : 	t_lock_cpu();
15 : 	t_set_ipm(intpri);
16 : 	if (intpri == TIPM_ENAALL) {
17 : 		ipmflg = true;
18 : 		if (!disdsp) {
19 : 			dspflg = true;
20 : 			if (p_runtsk != p_schedtsk) {
21 : 				dispatch();
22 : 			}
23 : 		}
24 : 		if (p_runtsk->enatex && p_runtsk->texptn != 0U) {
25 : 			call_texrtn();
26 : 		}
27 : 	}
28 : 	else {
29 : 		ipmflg = false;
30 : 		dspflg = false;
31 : 	}
32 : 	ercd = E_OK;
34 : 	t_unlock_cpu();
35 : 
36 :   error_exit:
37 : 	return(ercd);
38 : }

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.3. 条件式
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(A1) 05 : sense_context()
(A2) 05 : t_sense_lock()
(A3) 09 : TMIN_INTPRI <= (intpri)
(A4) 09 : (intpri) <= TIPM_ENAALL)
(A5) 16 : intpri == TIPM_ENAALL
(A6) 18 : !disdsp
(A7) 20 : p_runtsk != p_schedtsk
(A8) 24 : p_runtsk->enatex
(A9) 24 : p_runtsk->texptn != 0U

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.4. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

       (A1) (A2) (A3) (A4) (A5) (A6) (A7) (A8) (A9)
(a-1)   T   D/F   D    D    D    D    D    D    D
(a-2)   F    T    D    D    D    D    D    D    D
(b-1)   F    F    F   D/T   D    D    D    D    D
(b-2)   F    F    T    F    D    D    D    D    D
(c-1)   F    F    T    T    F    D    D    D    D
(c-2)   F    F    T    T    T    T    F    F   D/F
(d)     F    F    T    T    T    T    T    D    D
---------------------------------------------------
網羅    O    O    O    O    O    X    O    X    X

【備考】
・(A6)(A8)(A9)の網羅をさせるために，以下にホワイトボックステストを実施
  する．

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

3. ホワイトボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
3.1. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
       (A1) (A2) (A3) (A4) (A5) (A6) (A7) (A8) (A9)
(W_a)   F    F    T    T    T    F    D    F   D/F
(W_b)   F    F    T    T    T    T    F    T    F
(W_c)   F    F    T    T    T    T    F    T    T
(W_d)   F    F    T    T    T    T    F    F   D/T
---------------------------------------------------
網羅    O    O    O    O    O    O    O    O    O

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
3.2. テストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(W_a) 以下の条件が成り立つ時．

  ・ディスパッチ禁止の場合．
  ・割込み優先度マスクが全解除でない状態から全解除に変更する場合．

(W_b) 以下の条件が成り立つ時．

  ・chg_ipmを発行するタスクにタスク例外処理ルーチンが定義されている場合
  ・タスク例外禁止フラグがクリアされている場合
  ・タスク例外処理のタスク例外要因が0である場合
  ・割込み優先度マスクが全解除でない状態から全解除に変更する場合．

(W_c) 以下の条件が成り立つ時．

  ・chg_ipmを発行するタスクにタスク例外処理ルーチンが定義されている場合
  ・タスク例外禁止フラグがクリアされている場合
  ・タスク例外処理のタスク例外要因が0でない場合
  ・割込み優先度マスクが全解除でない状態から全解除に変更する場合．

(W_d) 以下の条件が成り立つ時．

  ・chg_ipmを発行するタスクにタスク例外処理ルーチンが定義されている場合
  ・タスク例外禁止フラグがクリアされていない場合
  ・タスク例外処理のタスク例外要因が0でない場合
  ・割込み優先度マスクが全解除でない状態から全解除に変更する場合．



以上．
