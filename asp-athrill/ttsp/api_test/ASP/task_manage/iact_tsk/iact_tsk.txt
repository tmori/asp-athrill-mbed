
	iact_tsk テストシート

----------------------------------------------------------------------
 TTSP
     TOPPERS Test Suite Package

 Copyright (C) 2009-2011 by Center for Embedded Computing Systems
             Graduate School of Information Science, Nagoya Univ., JAPAN
 Copyright (C) 2009-2011 by Digital Craft Inc.
 Copyright (C) 2009-2011 by NEC Communication Systems, Ltd.
 Copyright (C) 2009-2011 by FUJISOFT INCORPORATED
 Copyright (C) 2009-2010 by Mitsuhiro Matsuura

 上記著作権者は，以下の (1)〜(3) の条件を満たす場合に限り，本ドキュメ
 ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
     および下記の無保証規定が，そのままの形でドキュメント中に含まれて
     いること．
 (2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
     を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
     ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
     りではない．
 (3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
     からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
     本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
     く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

 本ドキュメントは，無保証で提供されているものである．上記著作権者およ
 びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
 る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
 により直接的または間接的に生じたいかなる損害に関しても，その責任を負
 わない．

 $Id: iact_tsk.txt 2 2012-05-09 02:23:52Z nces-shigihara $
----------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

0. API仕様

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

act_tsk		タスクの起動〔T〕
iact_tsk	タスクの起動〔I〕

【C言語API】
	ER ercd = act_tsk(ID tskid)
	ER ercd = iact_tsk(ID tskid)

【パラメータ】
	ID			tskid		対象タスクのID番号

【リターンパラメータ】
	ER			ercd		正常終了（E_OK）またはエラーコード

【エラーコード】
	E_CTX			コンテキストエラー（非タスクコンテキストからの呼出
					し：act_tskの場合，タスクコンテキストからの呼出し：
					iact_tskの場合，CPUロック状態からの呼出し）
	E_ID			不正ID番号（tskidが不正）
	E_NOEXS〔D〕	オブジェクト未登録（対象タスクが未登録）
	E_OACV〔P〕		オブジェクトアクセス違反（対象タスクに対する通常操
					作1が許可されていない：act_tskの場合）
	E_QOVR			キューイングオーバフロー（起動要求キューイング数が
					TMAX_ACTCNTに一致）

【機能】

tskidで指定したタスク（対象タスク）に対して起動要求を行う．具体的な振舞
いは以下の通り．

対象タスクが休止状態である場合には，対象タスクに対してタスク起動時に行
うべき初期化処理が行われ，対象タスクは実行できる状態になる．

対象タスクが休止状態でない場合には，対象タスクの起動要求キューイング数
に1が加えられる．起動要求キューイング数に1を加えるとTMAX_ACTCNTを超える
場合には，E_QOVRエラーとなる．

act_tskにおいてtskidにTSK_SELF（＝0）を指定すると，自タスクが対象タスク
となる．

【補足説明】

マルチプロセッサ対応カーネルでは，act_tsk／iact_tskは，対象タスクの次回
起動時の割付けプロセッサを変更しない．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

1. 仕様ベースのブラックボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.1. エラー条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(a) 不正なコンテキスト状態で呼出す場合．

    (a-1) タスクコンテキストから呼び出して，E_CTXエラーが返ること．

    (a-2) CPUロック状態で呼び出して，E_CTXエラーが返ること．

(b) tskidが不正の時にE_IDが返ること．

    (b-1) tskidが許容される最小値-1(=0)の時にE_IDが返ること．

    (b-2) tskidが許容される最大値+1(TNUM_TSKID+1)の時にE_IDが返ること．

(c) 対象タスクの起動要求キューイング数がTMAX_ACTCNT(=1)に一致している
    場合，E_QOVRが返ること．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.2. 正常条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(d) 対象タスクが休止状態である場合には，対象タスクに対してタスク起動時
    に行うべき初期化処理が行われ，対象タスクは実行できる状態になること．

    (d-1) 実行されるタスクの優先度が他のタスクより高い場合．

          (d-1-1) 実行状態になること．

          (d-1-2) ディスパッチ禁止状態の場合，実行可能状態になること．

          (d-1-3) 割込み優先度マスクが全解除でない場合，
                  実行可能状態になること．

    (d-2) 実行されるタスクの優先度が他のタスクより低い場合は，
          実行可能状態となり，同じ優先度のタスクの最後につながれること．

    (d-3) 実行されるタスクの優先度が他のタスクと同じ場合は，
          実行可能状態となり，同じ優先度のタスクの最後につながれること．

    (d-4) 実行状態のタスクが存在しない場合，
          対象タスクが実行状態となること．

(e) 対象タスクが休止状態ではなく，tskidにTSK_SELF(=0)以外を指定場合，
    対象タスクの起動要求キューイング数に1が加えられること．
    (起動要求キューイング数がTMAX_ACTCNT(=1)に一致していない場合)

    (e-1) 対象タスクが実行可能状態の場合．

    (e-2) 対象タスクが待ち状態の場合．

          (e-2-1) 起床待ちの場合．

          (e-2-2) 時間経過待ちの場合．

          (e-2-3) セマフォの資源獲得待ち(タイムアウト無)の場合．

          (e-2-4) セマフォの資源獲得待ち(タイムアウト有)の場合．

    (e-3) 対象タスクが強制待ち状態の場合．

    (e-4) 対象タスクが二重待ち状態の場合．

          (e-4-1) 起床待ちの場合．

          (e-4-2) 時間経過待ちの場合．

    (e-5) 対象タスクが実行状態の場合．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

2. ソースコードの条件網羅確認

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.1. ソースコード
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ER
iact_tsk(ID tskid)
{
    TCB  *p_tcb;
    ER   ercd;

    LOG_IACT_TSK_ENTER(tskid);
    CHECK_INTCTX_UNL();
    CHECK_TSKID(tskid);
    p_tcb = get_tcb(tskid);

    i_lock_cpu();
    if (TSTAT_DORMANT(p_tcb->tstat)) {
        if (make_active(p_tcb)) {
            reqflg = true;
        }
        ercd = E_OK;
    }
    else if (!(p_tcb->actque)) {
        p_tcb->actque = true;
        ercd = E_OK;
    }
    else {
        ercd = E_QOVR;
    }
    i_unlock_cpu();

  error_exit:
    LOG_IACT_TSK_LEAVE(ercd);
    return(ercd);
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.2. マクロを展開したAPIと呼び出す内部関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[A] iact_tsk

00 : ER
01 : iact_tsk(ID tskid)
02 : {
03 :     TCB  *p_tcb;
04 :     ER   ercd;
05 : 
06 :     if (!sense_context() || i_sense_lock()) {
07 :         ercd = E_CTX;
08 :         goto error_exit;
09 :     }
10 :     if (!(TMIN_TSKID <= tskid && tskid <= tmax_tskid)) {
11 :         ercd = E_ID;
12 :         goto error_exit;
13 :     }
14 :     p_tcb = (&(tcb_table[((uint_t)((tskid) - TMIN_TSKID))]));
15 : 
16 :     i_lock_cpu();
17 :     if (p_tcb->tstat == TS_DORMANT) {
18 :        if (make_active(p_tcb)) {
19 :            reqflg = true;
20 :        }
21 :        ercd = E_OK;
22 :     }
23 :     else if (!(p_tcb->actque)) {
24 :         p_tcb->actque = true;
25 :         ercd = E_OK;
26 :     }
27 :     else {
28 :         ercd = E_QOVR;
29 :     }
30 :     i_unlock_cpu();
31 :
32 :  error_exit:
33 :    return(ercd);
34 :}


[B] make_active

00 : bool_t
01 : make_active(TCB *p_tcb)
02 : {
03 : 	activate_context(p_tcb);
04 : 	p_tcb->tstat = TS_RUNNABLE;
05 : 	LOG_TSKSTAT(p_tcb);
06 : 	return(make_runnable(p_tcb));
07 : }


[C] make_runnable

00 : bool_t
01 : make_runnable(TCB *p_tcb)
02 : {
03 :     uint_t pri = p_tcb->priority;
04 :
05 :     queue_insert_prev(&(ready_queue[pri]), &(p_tcb->task_queue));
06 :     primap_set(pri);
07 :
08 :     if (p_schedtsk == (TCB *) NULL || pri < p_schedtsk->priority) {
09 :         p_schedtsk = p_tcb;
10 :         return(dspflg);
11 :     }
12 :     return(false);
13 : }

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.3. 条件式
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(A1) 06 : !sense_context()
(A2) 06 : i_sense_lock()
(A3) 10 : TMIN_TSKID <= tskid
(A4) 10 : tskid <= tmax_tskid
(A5) 17 : p_tcb->tstat == TS_DORMANT
(A6) 18 : make_active(p_tcb)
(A7) 23 : !(p_tcb->actque)

(B1) 06 : make_runnable(p_tcb)

(C1) 08 : p_schedtsk == (TCB *) NULL
(C2) 08 : pri < p_schedtsk->priority

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.4. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
         (A1) (A2) (A3) (A4) (A5) (A6) (B1) (C1) (C2) (A7)
(a-1)     T   D/F   D    D    D    D    D    D    D    D
(a-1)     F    T    D    D    D    D    D    D    D    D
(b-1)     F    F    F   D/T   D    D    D    D    D    D
(b-2)     F    F    T    F    D    D    D    D    D    D
(c)       F    F    T    T    F    D    D    D    D    F
(d-1-1)   F    F    T    T    T    T    T    F    T    D
(d-1-2)   F    F    T    T    T    F    F    F    T    D
(d-1-3)   F    F    T    T    T    F    F    F    T    D
(d-2)     F    F    T    T    T    F    F    F    F    D
(d-3)     F    F    T    T    T    F    F    F    F    D
(d-4)     F    F    T    T    T    T    T    T    D    D
(e-1)     F    F    T    T    F    D    D    D    D    T
(e-2-1)   F    F    T    T    F    D    D    D    D    T
(e-2-2)   F    F    T    T    F    D    D    D    D    T
(e-2-3)   F    F    T    T    F    D    D    D    D    T
(e-2-4)   F    F    T    T    F    D    D    D    D    T
(e-3)     F    F    T    T    F    D    D    D    D    T
(e-4-1)   F    F    T    T    F    D    D    D    D    T
(e-4-2)   F    F    T    T    F    D    D    D    D    T
(e-5)     F    F    T    T    F    D    D    D    D    T
----------------------------------------------------------
網羅      O    O    O    O    O    O    O    O    O    O


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

3. ホワイトボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
必要なし．



以上．
