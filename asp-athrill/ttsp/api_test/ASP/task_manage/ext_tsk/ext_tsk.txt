
	ext_tsk テストシート

----------------------------------------------------------------------
 TTSP
     TOPPERS Test Suite Package

 Copyright (C) 2009-2011 by Center for Embedded Computing Systems
             Graduate School of Information Science, Nagoya Univ., JAPAN
 Copyright (C) 2009-2011 by Digital Craft Inc.
 Copyright (C) 2009-2011 by NEC Communication Systems, Ltd.
 Copyright (C) 2009-2011 by FUJISOFT INCORPORATED
 Copyright (C) 2009-2010 by Mitsuhiro Matsuura

 上記著作権者は，以下の (1)〜(3) の条件を満たす場合に限り，本ドキュメ
 ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
     および下記の無保証規定が，そのままの形でドキュメント中に含まれて
     いること．
 (2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
     を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
     ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
     りではない．
 (3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
     からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
     本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
     く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

 本ドキュメントは，無保証で提供されているものである．上記著作権者およ
 びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
 る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
 により直接的または間接的に生じたいかなる損害に関しても，その責任を負
 わない．

 $Id: ext_tsk.txt 2 2012-05-09 02:23:52Z nces-shigihara $
----------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

0. API仕様

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

ext_tsk		自タスクの終了〔T〕

【C言語API】
	ER ercd = ext_tsk()

【パラメータ】
	なし

【リターンパラメータ】
	ER			ercd		エラーコード

【エラーコード】
	E_SYS			システムエラー（カーネルの誤動作）
	E_CTX			コンテキストエラー（非タスクコンテキストからの呼出
					し）

【機能】

自タスクを終了させる．具体的な振舞いは以下の通り．

自タスクに対してタスク終了時に行うべき処理が行われ，自タスクは休止状態
になる．さらに，自タスクの起動要求キューイング数が0でない場合には，自タ
スクに対してタスク起動時に行うべき処理が行われ，自タスクは実行できる状
態になる．またこの時，起動要求キューイング数から1が減ぜられる．

ext_tskは，CPUロック解除状態，割込み優先度マスク全解除状態，ディスパッ
チ許可状態で呼び出すのが原則であるが，そうでない状態で呼び出された場合
には，CPUロック解除状態，割込み優先度マスク全解除状態，ディスパッチ許可
状態に遷移させた後，自タスクを終了させる．

ext_tskが正常に処理された場合，ext_tskからはリターンしない．

【μITRON4.0仕様との関係】

ext_tskを非タスクコンテキストから呼び出した場合に，E_CTXエラーが返るこ
ととした．μITRON4.0仕様においては，ext_tskからはリターンしないと規定さ
れている．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

1. 仕様ベースのブラックボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.1. エラー条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(a) 非タスクコンテキストから呼び出して，E_CTXエラーが返ること．

【備考】
カーネルの誤動作を発生させることはできないため，E_SYSが返るテストは実施
しない．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.2. 正常条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(b) 自タスクに対してタスク終了時に行うべき処理が行われ，自タスクの起動
    要求キューイング数が0ではない場合には，自タスクに対してタスク起動時
    に行うべき処理が行われ，自タスクは実行できる状態になる．またこの時，
    起動要求キューイング数から1が減ぜられること．

    (b-1) 同じ優先度の実行可能なタスクが存在する場合，実行可能状態に
          なること．

          (b-1-1) ディスパッチ保留状態ではない場合．

          (b-1-2) CPUロック状態の場合，CPUロック解除状態に遷移させた後，
                  自タスクを終了させること．

          (b-1-3) 割込み優先度マスク全解除状態でない場合，割込み優先度
                  マスク全解除状態に遷移させた後，自タスクを終了させる
                  こと．

          (b-1-4) ディスパッチ禁止状態の場合，ディスパッチ許可状態状態
                  に遷移させた後，自タスクを終了させること．

    (b-2) 同じ優先度の実行可能なタスクが存在しない場合，実行状態になる
          こと．

          (b-2-1) ディスパッチ保留状態ではない場合．

          (b-2-2) CPUロック状態の場合，CPUロック解除状態に遷移させた後，
                  自タスクを終了させること．

          (b-2-3) 割込み優先度マスク全解除状態でない場合，割込み優先度
                  マスク全解除状態に遷移させた後，自タスクを終了させる
                  こと．

          (b-2-4) ディスパッチ禁止状態の場合，ディスパッチ許可状態状態
                  に遷移させた後，自タスクを終了させること．

(c) 自タスクに対してタスク終了時に行うべき処理が行われ，自タスクの起動
    要求キューイング数が0の場合，休止状態になること．

    (c-1) ディスパッチ保留状態ではない場合．

    (c-2) CPUロック状態の場合，CPUロック解除状態に遷移させた後，
          自タスクを終了させること．

    (c-3) 割込み優先度マスク全解除状態でない場合，状態割込み優先度
          マスク全解除状態に遷移させた後，自タスクを終了させること．

    (c-4) ディスパッチ禁止状態の場合，ディスパッチ許可状態状態に遷移
          させた後，自タスクを終了させること


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

2. ソースコードの条件網羅確認

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.1. ソースコード
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ER
ext_tsk(void)
{
	ER		ercd;

	LOG_EXT_TSK_ENTER();
	CHECK_TSKCTX();

	if (t_sense_lock()) {
		/*
		 *  CPUロック状態でext_tskが呼ばれた場合は，CPUロックを解除し
		 *  てからタスクを終了する．実装上は，サービスコール内でのCPU
		 *  ロックを省略すればよいだけ．
		 */
	}
	else {
		t_lock_cpu();
	}
	if (disdsp) {
		/*
		 *  ディスパッチ禁止状態でext_tskが呼ばれた場合は，ディスパッ
		 *  チ許可状態にしてからタスクを終了する．
		 */
		disdsp = false;
	}
	if (!ipmflg) {
		/*
		 *  割込み優先度マスク（IPM）がTIPM_ENAALL以外の状態でext_tsk
		 *  が呼ばれた場合は，IPMをTIPM_ENAALLにしてからタスクを終了す
		 *  る．
		 */
		t_set_ipm(TIPM_ENAALL);
		ipmflg = true;
	}
	dspflg = true;

	(void) make_non_runnable(p_runtsk);
	make_dormant(p_runtsk);
	if (p_runtsk->actque) {
		p_runtsk->actque = false;
		(void) make_active(p_runtsk);
	}
	exit_and_dispatch();
	ercd = E_SYS;

  error_exit:
	LOG_EXT_TSK_LEAVE(ercd);
	return(ercd);
}


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.2. マクロを展開したAPIと呼び出す内部関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[A] ext_tsk

00 : ER
01 : ext_tsk(void)
02 : {
03 : 	ER		ercd;
04 : 
05 : 	if (sense_context()) {
06 : 	     ercd = E_CTX; {
07 :         goto error_exit; 
08 : 	}  
09 : 
10 : 	if (t_sense_lock()) {
11 : 	} 	/*
12 : 		 *  CPUロック状態でext_tskが呼ばれた場合は，CPUロックを解除し
13 : 		 *  てからタスクを終了する．実装上は，サービスコール内でのCPU
14 : 		 *  ロックを省略すればよいだけ．
15 : 		 */
16 : 	}
17 : 	else {
18 : 		t_lock_cpu();
19 : 	}
20 : 	if (disdsp) {
21 : 		/*
22 : 		 *  ディスパッチ禁止状態でext_tskが呼ばれた場合は，ディスパッ
23 : 		 *  チ許可状態にしてからタスクを終了する．
24 : 		 */
25 : 		disdsp = false;
26 : 	}
27 : 	if (!ipmflg) {
28 : 		/*
29 : 		 *  割込み優先度マスク（IPM）がTIPM_ENAALL以外の状態でext_tsk
30 : 		 *  が呼ばれた場合は，IPMをTIPM_ENAALLにしてからタスクを終了す
31 : 		 *  る．
32 : 		 */
33 : 		t_set_ipm(TIPM_ENAALL);
34 : 		ipmflg = true;
35 : 	}
36 : 	dspflg = true;
37 : 
38 : 	(void) make_non_runnable(p_runtsk);
39 : 	make_dormant(p_runtsk);
40 : 	if (p_runtsk->actque) {
41 : 		p_runtsk->actque = false;
42 : 		(void) make_active(p_runtsk);
43 : 	}
44 : 	exit_and_dispatch();
45 : 	ercd = E_SYS;
46 : 
47 :  error_exit:
48 : 	return(ercd);
49 : }

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.3. 条件式
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(A1) 05 : sense_context() 
(A2) 10 : t_sense_lock() 
(A3) 20 : disdsp 
(A4) 27 : !ipmflg
(A5) 40 : p_runtsk->actque

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.4. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

        (A1) (A2) (A3) (A4) (A5)
(a)      T    D    D    D    D
(b-1-1)  F    F    F    F    T
(b-1-2)  F    T    F    F    T
(b-1-3)  F    F    F    T    T
(b-1-4)  F    F    T    F    T
(b-2-1)  F    F    F    F    T
(b-2-2)  F    T    F    F    T
(b-2-3)  F    F    F    T    T
(b-2-4)  F    F    T    F    T
(c-1)    F    F    F    F    F
(c-2)    F    T    F    F    F
(c-3)    F    F    F    T    F
(c-4)    F    F    T    F    F
--------------------------------
網羅     O    O    O    O    O


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

3. ホワイトボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
必要なし．



以上．
