
	get_pri テストシート

----------------------------------------------------------------------
 TTSP
     TOPPERS Test Suite Package

 Copyright (C) 2009-2011 by Center for Embedded Computing Systems
             Graduate School of Information Science, Nagoya Univ., JAPAN
 Copyright (C) 2009-2011 by Digital Craft Inc.
 Copyright (C) 2009-2011 by NEC Communication Systems, Ltd.
 Copyright (C) 2009-2011 by FUJISOFT INCORPORATED
 Copyright (C) 2009-2010 by Mitsuhiro Matsuura

 上記著作権者は，以下の (1)〜(3) の条件を満たす場合に限り，本ドキュメ
 ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
     および下記の無保証規定が，そのままの形でドキュメント中に含まれて
     いること．
 (2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
     を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
     ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
     りではない．
 (3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
     からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
     本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
     く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

 本ドキュメントは，無保証で提供されているものである．上記著作権者およ
 びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
 る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
 により直接的または間接的に生じたいかなる損害に関しても，その責任を負
 わない．

 $Id: get_pri.txt 2 2012-05-09 02:23:52Z nces-shigihara $
----------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

0. API仕様

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

get_pri     タスク優先度の参照〔T〕

【C言語API】
    ER ercd = get_pri(ID tskid, PRI *p_tskpri)

【パラメータ】
    ID          tskid       対象タスクのID番号
    PRI *       p_tskpri    現在優先度を入れるメモリ領域へのポインタ

【リターンパラメータ】
    ER          ercd        正常終了(E_OK)またはエラーコード
    PRI         tskpri      現在優先度

【エラーコード】
    E_CTX           コンテキストエラー(非タスクコンテキストからの呼出
                    し，CPUロック状態からの呼出し)
    E_ID            不正ID番号(tskidが不正)
    E_NOEXS〔D〕    オブジェクト未登録(対象タスクが未登録)
    E_OACV〔P〕     オブジェクトアクセス違反(対象タスクに対する参照操
                    作が許可されていない)
    E_MACV〔P〕     メモリアクセス違反(p_tskpriが指すメモリ領域への書
                    込みアクセスが許可されていない)
    E_OBJ           オブジェクト状態エラー(対象タスクが休止状態)

【機能】

tskidで指定したタスク(対象タスク)の現在優先度を参照する．具体的な振舞
いは以下の通り．

対象タスクが休止状態でない場合には，対象タスクの現在優先度が，p_tskpri
で指定したメモリ領域に返される．

対象タスクが休止状態である場合には，E_OBJエラーとなる．

tskidにTSK_SELF(=0)を指定すると，自タスクが対象タスクとなる．

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

1. 仕様ベースのブラックボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.1. エラー条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(a) ディスパッチ保留状態で呼出す場合．

    (a-1) 非タスクコンテキストから呼び出して，E_CTXエラーが返ること．

    (a-2) CPUロック状態で呼び出して，E_CTXエラーが返ること．

(b) tskidが不正の時にE_IDが返ること．
    
    (b-1) tskidが許容される最小値-1(=-1)の時にE_IDが返ること．
    
    (b-2) tskidが許容される最大値+1(TNUM_TSKID+1)の時に
          E_IDが返ること．

(c) 対象タスクが休止状態の時に呼ぶと，E_OBJが返ること．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.2. 正常条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(d) 対象タスクが休止状態でない場合には，対象タスクの現在優先度が，
    p_tskpriで指定したメモリ領域に返される．

    (d-1) 対象タスクが実行可能状態の場合．

    (d-2) 対象タスクが起床待ち状態の場合．

    (d-3) 対象タスクが時間経過待ち状態の場合．

    (d-4) 対象タスクがセマフォの資源獲得待ち(タイムアウト無)状態の場合．

    (d-5) 対象タスクがセマフォの資源獲得待ち(タイムアウト有)状態の場合．

    (d-6) 対象タスクが強制待ち状態の場合．

    (d-7) 対象タスクが二重待ち(起床待ち)状態の場合．

    (d-8) 対象タスクが二重待ち(時間経過待ち)状態の場合．

(e) tskidにTSK_SELF(=0)を指定すると，自タスクが対象タスクとなること．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

2. ソースコードの条件網羅確認

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.1. ソースコード
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ER
get_pri(ID tskid, PRI *p_tskpri)
{
	TCB		*p_tcb;
	ER		ercd;

	LOG_GET_PRI_ENTER(tskid, p_tskpri);
	CHECK_TSKCTX_UNL();
	CHECK_TSKID_SELF(tskid);
	p_tcb = get_tcb_self(tskid);

	t_lock_cpu();
	if (TSTAT_DORMANT(p_tcb->tstat)) {
		ercd = E_OBJ;
	}
	else {
		*p_tskpri = EXT_TSKPRI(p_tcb->priority);
		ercd = E_OK;
	}
	t_unlock_cpu();

  error_exit:
	LOG_GET_PRI_LEAVE(ercd, *p_tskpri);
	return(ercd);
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.2. マクロを展開したAPIと呼び出す内部関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[A] get_pri

00 : ER
01 : get_pri(ID tskid, PRI *p_tskpri)
02 : {
03 :     TCB     *p_tcb;
04 :     ER      ercd;
05 : 
06 :     if (sense_context() || t_sense_lock()) {
07 :         ercd = E_CTX;
08 :         goto error_exit;
09 :     }
10 :     if (!((TMIN_TSKID <= tskid && tskid <= tmax_tskid)
11 :                                     || tskid == TSK_SELF)) {
12 :         ercd = E_ID;
13 :         goto error_exit;
14 :     }
15 :     p_tcb = ((tskid) == TSK_SELF ? p_runtsk
16 :                             : (&(tcb_table[((uint_t)((tskid) - TMIN_TSKID))])));
17 : 
18 :     t_lock_cpu();
19 :     if (p_tcb->tstat == TS_DORMANT) {
20 :             ercd = E_OBJ;
21 :     }
22 :     else {
23 :         *p_tskpri = ((PRI)(p_tcb->priority) + TMIN_TPRI);
24 :         ercd = E_OK;
25 :     }
26 :     t_unlock_cpu();
27 : 
28 :   error_exit:
29 :     return(ercd);
30 :}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.3. 条件式
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(A1) 06 : sense_context()
(A2) 06 : t_sense_lock()
(A3) 10 : TMIN_TSKID <= tskid
(A4) 10 : tskid <= tmax_tskid
(A5) 11 : tskid == TSK_SELF
(A6) 15 : (tskid) == TSK_SELF
(A7) 19 : p_tcb->tstat == TS_DORMANT

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.4. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
         (A1) (A2) (A3) (A4) (A5) (A6) (A7)
(a-1)     T   D/F   D    D    D    D    D
(a-2)     F    T    D    D    D    D    D
(b-1)     F    F    F   D/T   F    D    D
(b-2)     F    F    T    F    F    D    D
(c)       F    F    T    T   D/F   F    T
(d-1)     F    F    T    T   D/F   F    F
(d-2)     F    F    T    T   D/F   F    F
(d-3)     F    F    T    T   D/F   F    F
(d-4)     F    F    T    T   D/F   F    F
(d-5)     F    F    T    T   D/F   F    F
(d-6)     F    F    T    T   D/F   F    F
(d-7)     F    F    T    T   D/F   F    F
(d-8)     F    F    T    T   D/F   F    F
(e)       F    F    F   D/T   T    T    F
-------------------------------------------
網羅      O    O    O    O    O    O    O


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

3. ホワイトボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
必要なし．



以上．
