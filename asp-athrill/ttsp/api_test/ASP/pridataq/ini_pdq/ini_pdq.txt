
	ini_pdq テストシート

----------------------------------------------------------------------
 TTSP
     TOPPERS Test Suite Package

 Copyright (C) 2009-2011 by Center for Embedded Computing Systems
             Graduate School of Information Science, Nagoya Univ., JAPAN
 Copyright (C) 2009-2011 by Digital Craft Inc.
 Copyright (C) 2009-2011 by NEC Communication Systems, Ltd.
 Copyright (C) 2009-2011 by FUJISOFT INCORPORATED
 Copyright (C) 2009-2010 by Mitsuhiro Matsuura

 上記著作権者は，以下の (1)〜(3) の条件を満たす場合に限り，本ドキュメ
 ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
     および下記の無保証規定が，そのままの形でドキュメント中に含まれて
     いること．
 (2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
     を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
     ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
     りではない．
 (3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
     からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
     本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
     く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

 本ドキュメントは，無保証で提供されているものである．上記著作権者およ
 びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
 る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
 により直接的または間接的に生じたいかなる損害に関しても，その責任を負
 わない．

 $Id: ini_pdq.txt 2 2012-05-09 02:23:52Z nces-shigihara $
----------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

0. API仕様

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

ini_pdq 優先度データキューの再初期化〔T〕

【C言語API】
    ER ercd = ini_pdq(ID pdqid)

【パラメータ】
    ID          pdqid       対象優先度データキューのID番号

【リターンパラメータ】
    ER          ercd        正常終了(E_OK)またはエラーコード

【エラーコード】
    E_CTX           コンテキストエラー(非タスクコンテキストからの呼出
                    し，CPUロック状態からの呼出し)
    E_ID            不正ID番号(pdqidが不正)
    E_NOEXS〔D〕    オブジェクト未登録(対象優先度データキューが未登録)
    E_OACV〔P〕     オブジェクトアクセス違反(対象優先度データキューに
                    対する管理操作が許可されていない)

【機能】
pdqidで指定した優先度データキュー(対象優先度データキュー)を再初期化す
る．具体的な振舞いは以下の通り．

対象優先度データキューの優先度データキュー管理領域は，格納されているデー
タがない状態に初期化される．また，対象優先度データキューの送信待ち行列
と受信待ち行列につながれたタスクは，それぞれの待ち行列の先頭のタスクか
ら順に待ち解除される．待ち解除されたタスクには，待ち状態となったサービ
スコールからE_DLTエラーが返る．

【補足説明】
送信待ち行列と受信待ち行列の両方にタスクがつながれていることはないため，
別の待ち行列で待っていたタスクの間の待ち解除の順序は，規定する必要がな
い．

【使用上の注意】
ini_pdqにより複数のタスクが待ち解除される場合，サービスコールの処理時間
およびカーネル内での割込み禁止時間が，待ち解除されるタスクの数に比例し
て長くなる．特に，多くのタスクが待ち解除される場合，カーネル内での割込
み禁止時間が長くなるため，注意が必要である．

優先度データキューを再初期化した場合に，アプリケーションとの整合性を保
つのは，アプリケーションの責任である．

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

1. 仕様ベースのブラックボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.1. エラー条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(a) ディスパッチ保留状態で呼出す場合．

    (a-1) 非タスクコンテキストから呼び出して，E_CTXエラーが返ること．

    (a-2) CPUロック状態で呼び出して，E_CTXエラーが返ること．

(b) pdqidが不正の時にE_IDが返ること．

    (b-1) pdqidが許容される最小値-1(=0)の時にE_IDが返ること．

    (b-2) pdqidが許容される最大値+1(TNUM_PDQID+1)の時にE_IDが返ること．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.2. 正常条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(c) 対象優先度データキューの優先度データキュー管理領域は，格納されてい
    るデータがない状態に初期化される．また，対象優先度データキューの
    送信待ち行列につながれたタスクは，待ち行列の先頭のタスクから順に
    待ち解除される．(待ち行列のタスクを対象タスクとする)

    (c-1) 待ちタスクが1つの場合．(格納数:0)

          (c-1-1) 対象タスクの優先度が，実行状態のタスクより高い場合．

                  (c-1-1-1) 実行状態になること．

                  (c-1-1-2) ディスパッチ禁止状態の場合，
                            実行可能状態になること．

                  (c-1-1-3) 割込み優先度マスクが全解除でない場合，
                            実行可能状態になること．

          (c-1-2) 対象タスクの優先度が，実行状態のタスクより低い場合，
                  実行可能状態になり，同じ優先度のタスクの最後に
                  つながれること．

          (c-1-3) 対象タスクの優先度が，実行状態のタスクと同じ場合，
                  実行可能状態となり，同じ優先度のタスクの最後に
                  つながれること．

          (c-1-4) 対象タスクが，二重待ち状態の場合，強制待ちとなること．

    (c-2) 待ちタスクが3つの場合．(格納数:3，データ数:3)

          (c-2-1) 全てのタスクの優先度が同じ場合，待ち行列の順に実行可
                  能状態となること．

          (c-2-2) 自タスクの優先度が低で，優先度が低→中→高の順で待
                  ちタスクがある場合，優先度が高のタスクが実行状態とな
                  り，他のタスクは，優先度の順に実行可能状態となること．

(d) 対象優先度データキューの優先度データキュー管理領域は，格納されて
    いるデータがない状態に初期化される．また，対象優先度データキューの
    受信待ち行列につながれたタスクは，待ち行列の先頭のタスクから順に
    待ち解除される．(待ち行列のタスクを対象タスクとする)

    (d-1) 待ちタスクが1つの場合．(格納数:0)

          (d-1-1) 対象タスクの優先度が，実行状態のタスクより高い場合．

                  (d-1-1-1) 実行状態になること．

                  (d-1-1-2) ディスパッチ禁止状態の場合、
                            実行可能状態になること．

                  (d-1-1-3) 割込み優先度マスクが全解除でない場合，
                            実行可能状態になること．

          (d-1-2) 対象タスクの優先度が，実行状態のタスクより低い場合，
                  実行可能状態になり，同じ優先度のタスクの最後につなが
                  れること．

          (d-1-3) 対象タスクの優先度が，実行状態のタスクと同じ場合，
                  実行可能状態となり，同じ優先度のタスクの最後につなが
                  れること．

          (d-1-4) 対象タスクが，二重待ち状態の場合，強制待ちとなること．

    (d-2) 待ちタスクが3つの場合．(格納数:3，データ数:0)

          (d-2-1) 全てのタスクの優先度が同じ場合，待ち行列の順に実行可
                  能状態となること．

          (d-2-2) 自タスクの優先度が低で，優先度が低→中→ 高の順で待
                  ちタスクがある場合，優先度が高の タスクが実行状態とな
                  り，他のタスクは，優先 度の順に実行可能状態となること．

(e) 対象優先度データキューの優先度データキュー管理領域は，格納されて
    いるデータがない状態に初期化されるが，対象優先度データキューの
    送信待ち行列と受信待ち行列両方に，タスクがつながれていない場合．

    (e-1) 格納数が0の場合．

    (e-2) 格納数が3，データ数が3の場合．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

2. ソースコードの条件網羅確認

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.1. ソースコード
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ER
ini_pdq(ID pdqid)
{
	PDQCB	*p_pdqcb;
	bool_t	dspreq;
	ER		ercd;
    
	LOG_INI_PDQ_ENTER(pdqid);
	CHECK_TSKCTX_UNL();
	CHECK_PDQID(pdqid);
	p_pdqcb = get_pdqcb(pdqid);

	t_lock_cpu();
	dspreq = init_wait_queue(&(p_pdqcb->swait_queue));
	if (init_wait_queue(&(p_pdqcb->rwait_queue))) {
		dspreq = true;
	}
	p_pdqcb->count = 0U;
	p_pdqcb->p_head = NULL;
	p_pdqcb->unused = 0U;
	p_pdqcb->p_freelist = NULL;
	if (dspreq) {
		dispatch();
	}
	ercd = E_OK;
	t_unlock_cpu();

  error_exit:
	LOG_INI_PDQ_LEAVE(ercd);
	return(ercd);
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.2. マクロを展開したAPIと呼び出す内部関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[A] ini_pdq

00 : ER
01 : ini_pdq(ID pdqid)
02 : {
03 : 	PDQCB	*p_pdqcb;
04 : 	bool_t	dspreq;
05 : 	ER		ercd;
06 :     
07 : 	if (sense_contex() || t_sense_lock()) {
08 :               ercd = E_CTX;
09 :               goto error_exit;
10 :    }
11 :    if (!((TMIN_PDQID <= (pdqid) && (pdqid) <= tmax_pdqid))) {
12 :               ercd = E_ID;
13 :               goto error_exit;  
14 :    }
15 : 	p_pdqcb = &(pdqcb_table[(uint_t)((pdqid) - TMIN_PDQID)])
16 : 
17 : 	t_lock_cpu();
18 : 	dspreq = init_wait_queue(&(p_pdqcb->swait_queue));
19 : 	if (init_wait_queue(&(p_pdqcb->rwait_queue))) {
20 : 		dspreq = true;
21 : 	}
22 : 	p_pdqcb->count = 0U;
23 : 	p_pdqcb->p_head = NULL;
24 : 	p_pdqcb->unused = 0U;
25 : 	p_pdqcb->p_freelist = NULL;
26 : 	if (dspreq) {
27 : 		dispatch();
28 : 	}
29 : 	ercd = E_OK;
30 : 	t_unlock_cpu();
31 : 
32 :   error_exit:
33 : 	return(ercd);
34 : }


[B] init_wait_queue

00 : bool_t
01 : init_wait_queue(QUEUE *p_wait_queue)
02 : {
03 : 	TCB		*p_tcb;
04 : 	bool_t	dspreq = false;
05 : 
06 : 	while (!queue_empty(p_wait_queue)) {
07 : 		p_tcb = (TCB *) queue_delete_next(p_wait_queue);
08 : 		wait_dequeue_tmevtb(p_tcb);
09 : 		p_tcb->p_winfo->wercd = E_DLT;
10 : 		if (make_non_wait(p_tcb)) {
11 : 			dspreq = true;
12 : 		};
13 : 	}
14 : 	return(dspreq);
15 : }


[C] wait_dequeue_tmevtb

00 : Inline void
01 : wait_dequeue_tmevtb(TCB *p_tcb)
02 : {
03 :         if (p_tcb->p_winfo->p_tmevtb != NULL) {
04 :                 tmevtb_dequeue(p_tcb->p_winfo->p_tmevtb);
05 :         }
06 : }


[D] tmevtb_dequeue

00 : Inline void
01 : tmevtb_dequeue(TMEVTB *p_tmevtb)
02 : {
03 :         tmevtb_delete(p_tmevtb);
04 : }


[E] tmevtb_delete

00 : void
01 : tmevtb_delete(TMEVTB *p_tmevtb)
02 : {
03 :         uint_t  index = p_tmevtb->index;
04 :         uint_t  parent;
05 :         EVTTIM  event_time = (tmevt_heap[(last_index) - 1]).time;
06 : 
07 :         /*
08 :          *  削除によりタイムイベントヒープが空になる場合は何もしない．
09 :          */
10 :         if (--last_index == 0) {
11 :                 return;
12 :         }
13 :
14 :         /*
15 :          *  削除したノードの位置に最後のノード（last_index+1の位置のノード）
16 :          *  を挿入し，それを適切な位置へ移動させる．実際には，最後のノード
17 :          *  を実際に挿入するのではなく，削除したノードの位置が空ノードにな
18 :          *  るので，最後のノードを挿入すべき位置へ向けて空ノードを移動させ
19 :          *  る．
20 :          *  最後のノードのイベント発生時刻が，削除したノードの親ノードのイ
21 :          *  ベント発生時刻より前の場合には，上に向かって挿入位置を探す．そ
22 :          *  うでない場合には，下に向かって探す．
23 :          */
24 :         if (index > 1 && (((event_time) - min_time) < 
25 :             ((tmevt_heap[(parent = ((index) >> 1)) - 1]).time) - min_time)) {
26 :                 /*
27 :                  *  親ノードをindexの位置に移動させる．
28 :                  */
29 :                 (tmevt_heap[(index) - 1]) = (tmevt_heap[(parent) - 1]);
30 :                 (tmevt_heap[(index) - 1]).p_tmevtb->index = index;
31 :
32 :                 /*
33 :                  *  削除したノードの親ノードから上に向かって挿入位置を探す．
34 :                  */
35 :                 index = tmevt_up(parent, event_time);
36 :         }
37 :         else {
38 :                 /*
39 :                  *  削除したノードから下に向かって挿入位置を探す．
40 :                  */
41 :                 index = tmevt_down(index, event_time);
42 :         }
43 :
44 :         /*
45 :          *  最後のノードをindexの位置に挿入する．
46 :          */ 
47 :         (tmevt_heap[(index) - 1]) = (tmevt_heap[(last_index + 1) - 1]);
48 :         (tmevt_heap[(index) - 1]).p_tmevtb->index = index;
49 : }


[F] tmevt_down

00 : uint_t
01 : tmevt_down(uint_t index, EVTTIM time)
02 : {
03 :         uint_t  child;
04 : 
05 :         while ((child = ((index) << 1)) <= last_index) {
06 :                /*
07 :                 *  左右の子ノードのイベント発生時刻を比較し，早い方の子ノード
08 :                 *  の位置をchildに設定する．以下の子ノードは，ここで選ばれた方
09 :                  *  の子ノードのこと．
10 :                  */
11 :                 if (child + 1 <= last_index
12 :                              && ((((tmevt_heap[(child + 1) - 1]).time) - min_time) <
13 :                                    (((tmevt_heap[(child) - 1]).time)) - min_time)) {
14 :                         child = child + 1;
15 :                 }
16 :
17 :                 /*
18 :                  *  子ノードのイベント発生時刻の方が遅い（または同じ）ならば，
19 :                  *  indexが挿入位置なのでループを抜ける．
20 :                  */
21 :                 if (((time) - min_time) <= ((tmevt_heap[(child) - 1]).time) - min_time)) {
22 :                         break;
23 :                 }
24 :
25 :                 /*
26 :                  *  子ノードをindexの位置に移動させる．
27 :                  */
28 :                 (tmevt_heap[(index) - 1]) = (tmevt_heap[(child) - 1]);
29 :                 (tmevt_heap[(index) - 1]).p_tmevtb->index = index;
30 :
31 :                 /*
32 :                  *  indexを子ノードの位置に更新．
33 :                  */
34 :                 index = child;
35 :         }
36 :         return(index);
37 : }

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.3. 条件式
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(A1) 07 : sense_context()
(A2) 07 : t_sense_lock()
(A3) 11 : TMIN_PDQID <= (pdqid)
(A4) 11 : (pdqid) <= tmax_pdqid
(A5) 19 : init_wait_queue(&(p_pdqcb->rwait_queue))
(A6) 26 : dspreq 

(B1) 06 : !queue_empty(p_wait_queue)
(B2) 10 : make_non_wait(p_tcb)

(C1) 03 : p_tcb->p_winfo->p_tmevtb != NULL

(E1) 10 : --last_index == 0
(E2) 24 : index > 1
(E3) 24 : (((event_time) - min_time) < 
          ((tmevt_heap[(parent = ((index) >> 1)) - 1]).time) - min_time))

(F1) 05 : (child = ((index) << 1)) <= last_index
(F2) 11 : child + 1 <= last_index
(F3) 12 : (((tmevt_heap[(child + 1) - 1]).time) - min_time) < 
          (((tmevt_heap[(child) - 1]).time) - min_time)
(F4) 21 : ((time) - min_time) <= 
          ((tmevt_heap[(index) - 1].time) - min_time)

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.4. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
             (A1) (A2) (A3) (A4) (A5) (B1) (C1) (E1) (E2) (E3) (F1) (F2) (F3) (F4) (B2) (A6)
(a-1)         T   D/F   D    D    D    D    D    D    D    D    D    D    D    D    D    D
(a-2)         F    T    D    D    D    D    D    D    D    D    D    D    D    D    D    D
(b-1)         F    F    F   D/T   D    D    D    D    D    D    D    D    D    D    D    D
(b-2)         F    F    T    F    D    D    D    D    D    D    D    D    D    D    D    D
(c-1-1-1)     F    F    T    T    F    TF   F    D    D    D    D    D    D    D    T    T
(c-1-1-2)     F    F    T    T    F    TF   F    D    D    D    D    D    D    D    F    F
(c-1-1-3)     F    F    T    T    F    TF   F    D    D    D    D    D    D    D    F    F
(c-1-2)       F    F    T    T    F    TF   F    D    D    D    D    D    D    D    F    F
(c-1-3)       F    F    T    T    F    TF   F    D    D    D    D    D    D    D    F    F
(c-1-4)       F    F    T    T    F    TF   F    D    D    D    D    D    D    D    F    F
(c-2-1)       F    F    T    T    F    TTTF FFF  D    D    D    D    D    D    D    FFF  F
(c-2-2)       F    F    T    T    F    TTTF FFF  D    D    D    D    D    D    D    FTT  T
(d-1-1-1)     F    F    T    T    T    TF   F    D    D    D    D    D    D    D    T    T
(d-1-1-2)     F    F    T    T    F    TF   F    D    D    D    D    D    D    D    F    F
(d-1-1-3)     F    F    T    T    F    TF   F    D    D    D    D    D    D    D    F    F
(d-1-2)       F    F    T    T    F    TF   F    D    D    D    D    D    D    D    F    F
(d-1-3)       F    F    T    T    F    TF   F    D    D    D    D    D    D    D    F    F
(d-1-4)       F    F    T    T    F    TF   F    D    D    D    D    D    D    D    F    F
(d-2-1)       F    F    T    T    F    TTTF FFF  D    D    D    D    D    D    D    FFF  F
(d-2-2)       F    F    T    T    T    TTTF FFF  D    D    D    D    D    D    D    FTT  T
(e-1)         F    F    T    T    F    F    D    D    D    D    D    D    D    D    D    F
(e-2)         F    F    T    T    F    F    D    D    D    D    D    D    D    D    D    F
-------------------------------------------------------------------------------------------
網羅          O    O    O    O    O    X    X    X    X    X    X    X    X    X    O    O 

【備考】
・(B1)のカバレッジは、c-*のテストケースでは送信待ち行列([A]の18行目)を，
  d-*のテストケースでは受信待ち行列([A]の19行目)を対象にしている．
・(C1)，(E1)，(E2)，(E3)，(F1)，(F2)，(F3)，(F4)の網羅をさせるために，
  以下にホワイトボックステストを実施する．
・(B1)，(F1)のwhileのカバレッジをさせるために，以下にホワイトボックステ
  ストを実施する．

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

3. ホワイトボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
3.1. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
       (A1) (A2) (A3) (A4) (A5) (B1) (C1) (E1) (E2) (E3)  (F1) (F2) (F3)  (F4) (B2) (A6)
(W_a)   F    F    T    T    F    TF   T    T    D    D     D    D    D     D    T    T  
(W_b)   F    F    T    T    F    TTF  TT   FT   FD   D/FD  F    D    D     D    TF   T  
(W_c)   F    F    T    T    F    TF   T    F    F    D/F   TF   F    D/F   F    T    T  
(W_d)   F    F    T    T    F    TF   T    F    F    D/F   TTF  TF   FD/F  FF   T    T  
(W_e)   F    F    T    T    F    TF   T    F    F    D/F   TTTF TTF  FFD/F FFF  T    T  
(W_f)   F    F    T    T    F    TF   T    F    F    D/F   TF   T    T     F    T    T  
(W_g)   F    F    T    T    F    TF   T    F    T    T     D    D    D     D    T    T  
(W_h)   F    F    T    T    F    TF   T    F    T    F     T    T    F     T    T    T  
(W_i)   F    F    T    T    F    TF   T    F    T    F     T    F    D/T   T    T    T  
----------------------------------------------------------------------------------------
網羅    O    O    O    O    O    O    O    O    O    O     O    O    O     O    O    O  

【備考】
・(B1)のカバレッジは、W_*のテストケースでは送信待ち行列([A]の18行目)を
  対象にしている．
・(W_i)は，(F2)のFalse判定に不具合があった場合に備え，(F3)をTrueとして
  不具合を検出するために，追加している．同様のテストケースが，(E2)(E3)
  でも必要であるが，(E2)がFの場合，親ノードは存在せず(E3)がD/Tになるこ
  とはないため，(E2)(E3)では実施できない．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
3.2. テストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(W_a) 以下の順序で実行する．

  ・TASK1がtsnd_pdq(PDQ1, DATA_A, DATA_PRI_HIGH, 2)を発行する．
  ・TASK2がini_pdq(PDQ1)を発行する．

(W_b) 以下の順序で実行する．

  ・TASK1がtsnd_pdq(PDQ1, DATA_A, DATA_PRI_HIGH, 2)を発行する．
  ・TASK2がtsnd_pdq(PDQ1, DATA_B, DATA_PRI_HIGH, 3)を発行する．
  ・TASK3がini_pdq(PDQ1)を発行する．

(W_c) 以下の順序で実行する．

  ・TASK1がtsnd_pdq(PDQ1, DATA_A, DATA_PRI_HIGH, 2)を発行する．
  ・TASK2がtslp_tsk(3)を発行する．
  ・TASK3がtslp_tsk(4)を発行する．
  ・TASK4がini_pdq(PDQ1)を発行する．

(W_d) 以下の順序で実行する．

  ・TASK1がtsnd_pdq(PDQ1, DATA_A, DATA_PRI_HIGH, 2)を発行する．
  ・TASK2がtslp_tsk(3)を発行する．
  ・TASK3がtslp_tsk(4)を発行する．
  ・TASK4がtslp_tsk(5)を発行する．
  ・TASK5がtslp_tsk(6)を発行する．
  ・TASK6がini_pdq(PDQ1)を発行する．

(W_e) 以下の順序で実行する．

  ・TASK1がtsnd_pdq(PDQ1, DATA_A, DATA_PRI_HIGH, 2)を発行する．
  ・TASK2がtslp_tsk(3)を発行する．
  ・TASK3がtslp_tsk(4)を発行する．
  ・TASK4がtslp_tsk(5)を発行する．
  ・TASK5がtslp_tsk(6)を発行する．
  ・TASK6がtslp_tsk(7)を発行する．
  ・TASK7がtslp_tsk(8)を発行する．
  ・TASK8がtslp_tsk(9)を発行する．
  ・TASK9がtslp_tsk(10)を発行する．
  ・TASK10がini_pdq(PDQ1)を発行する．

(W_f) 以下の順序で実行する．

  ・TASK1がtsnd_pdq(PDQ1, DATA_A, DATA_PRI_HIGH, 2)を発行する．
  ・TASK2がtslp_tsk(4)を発行する．
  ・TASK3がtslp_tsk(3)を発行する．
  ・TASK4がtslp_tsk(5)を発行する．
  ・TASK5がini_pdq(PDQ1)を発行する．

(W_g) 以下の順序で実行する．

  ・TASK1がtslp_tsk(1)を発行する．
  ・TASK2がtslp_tsk(10)を発行する．
  ・TASK3がtslp_tsk(2)を発行する．
  ・TASK4がtslp_tsk(11)を発行する．
  ・TASK5がtsnd_pdq(PDQ1, DATA_A, DATA_PRI_HIGH, 12)を発行する．
  ・TASK6がtslp_tsk(3)を発行する．
  ・TASK7がini_pdq(PDQ1)を発行する．

(W_h) 以下の順序で実行する．

  ・TASK1がtsnd_pdq(PDQ1, DATA_A, DATA_PRI_HIGH, 8)を発行する．
  ・TASK2がtslp_tsk(5)を発行する．
  ・TASK3がtslp_tsk(6)を発行する．
  ・TASK4がtslp_tsk(9)を発行する．
  ・TASK5がtslp_tsk(10)を発行する．
  ・TASK6がtslp_tsk(7)を発行する．
  ・TASK7がini_pdq(PDQ1)を発行する．



以上．
