
	rcv_pdq テストシート

----------------------------------------------------------------------
 TTSP
     TOPPERS Test Suite Package

 Copyright (C) 2009-2011 by Center for Embedded Computing Systems
             Graduate School of Information Science, Nagoya Univ., JAPAN
 Copyright (C) 2009-2011 by Digital Craft Inc.
 Copyright (C) 2009-2011 by NEC Communication Systems, Ltd.
 Copyright (C) 2009-2011 by FUJISOFT INCORPORATED
 Copyright (C) 2009-2010 by Mitsuhiro Matsuura

 上記著作権者は，以下の (1)〜(3) の条件を満たす場合に限り，本ドキュメ
 ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
     および下記の無保証規定が，そのままの形でドキュメント中に含まれて
     いること．
 (2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
     を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
     ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
     りではない．
 (3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
     からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
     本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
     く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

 本ドキュメントは，無保証で提供されているものである．上記著作権者およ
 びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
 る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
 により直接的または間接的に生じたいかなる損害に関しても，その責任を負
 わない．

 $Id: rcv_pdq.txt 2 2012-05-09 02:23:52Z nces-shigihara $
----------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

0. API仕様

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

rcv_pdq		優先度データキューからの受信〔T〕
prcv_pdq	優先度データキューからの受信（ポーリング）〔T〕
trcv_pdq	優先度データキューからの受信（タイムアウト付き）〔T〕

【C言語API】
	ER ercd = rcv_pdq(ID pdqid, intptr_t *p_data, PRI *p_datapri)
	ER ercd = prcv_pdq(ID pdqid, intptr_t *p_data, PRI *p_datapri)
	ER ercd = trcv_pdq(ID pdqid, intptr_t *p_data, PRI *p_datapri, TMO tmout)

【パラメータ】
	ID			pdqid		対象優先度データキューのID番号
	intptr_t *	p_data		受信データを入れるメモリ領域へのポインタ
	PRI *		p_datapri	受信データの優先度を入れるメモリ領域へのポ
							インタ
	TMO			tmout		タイムアウト時間（trcv_pdqの場合）

【リターンパラメータ】
	ER			ercd		正常終了（E_OK）またはエラーコード
	intptr_t	data		受信データ
	PRI			datapri		受信データの優先度

【エラーコード】
	E_CTX			コンテキストエラー（非タスクコンテキストからの呼出
					し，CPUロック状態からの呼出し，ディスパッチ保留状態
					からの呼出し：prcv_pdqを除く）
	E_NOSPT			未サポート機能（制約タスクからの呼出し：prcv_pdqを除
					く）
	E_ID			不正ID番号（pdqidが不正）
	E_PAR			パラメータエラー（tmoutが不正：trcv_pdqの場合）
	E_NOEXS〔D〕	オブジェクト未登録（対象優先度データキューが未登録）
	E_OACV〔P〕		オブジェクトアクセス違反（対象優先度データキューに
					対する通常操作2が許可されていない）
	E_MACV〔P〕		メモリアクセス違反（p_dataまたはp_datapriが指すメモ
					リ領域への書込みアクセスが許可されていない）
	E_TMOUT			ポーリング失敗またはタイムアウト（rcv_pdqを除く）
	E_RLWAI			待ち禁止状態または待ち状態の強制解除（prcv_pdqを除く）
	E_DLT			待ちオブジェクトの削除または再初期化（prcv_pdqを除く）

【機能】

pdqidで指定した優先度データキュー（対象優先度データキュー）からデータを
受信する．受信したデータはp_dataで指定したメモリ領域に，その優先度は
p_datapriで指定したメモリ領域に返される．具体的な振舞いは以下の通り．

対象優先度データキューの優先度データキュー管理領域にデータが格納されて
いる場合には，優先度データキュー管理領域の先頭に格納されたデータが取り
出され，p_dataで指定したメモリ領域に返される．また，その優先度が
p_datapriで指定したメモリ領域に返される．さらに，送信待ち行列にタスクが
存在する場合には，送信待ち行列の先頭のタスクの送信データが，データの優
先度順で優先度データキュー管理領域に格納され，そのタスクは待ち解除され
る．待ち解除されたタスクには，待ち状態となったサービスコールからE_OKが
返る．

対象優先度データキューの優先度データキュー管理領域にデータが格納されて
おらず，送信待ち行列にタスクが存在する場合には，送信待ち行列の先頭のタ
スクの送信データが，p_dataで指定したメモリ領域に返される．また，その優
先度がp_datapriで指定したメモリ領域に返される．送信待ち行列の先頭のタス
クは，待ち解除される．待ち解除されたタスクには，待ち状態となったサービ
スコールからE_OKが返る．

対象優先度データキューの優先度データキュー管理領域にデータが格納されて
おらず，送信待ち行列にタスクが存在しない場合には，自タスクは優先度デー
タキューからの受信待ち状態となり，対象優先度データキューの受信待ち行列
につながれる．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

1. 仕様ベースのブラックボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.1. エラー条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(a) ディスパッチ保留状態で呼出す場合．

    (a-1) 非タスクコンテキストから呼び出して，E_CTXエラーが返ること．

    (a-2) CPUロック状態で呼び出して，E_CTXエラーが返ること．

    (a-3) 割込み優先度マスクが全解除でない状態で呼び出して，
          E_CTXエラーが返ること．

    (a-4) ディスパッチ禁止状態で呼び出して，E_CTXエラーが返ること．

(b) pdqidが不正の時にE_IDが返ること．

    (b-1) pdqidが許容される最小値-1(=0)の時にE_IDが返ること．

    (b-2) pdqidが許容される最大値+1(TNUM_PDQID+1)の時に
          E_IDが返ること．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.2. 正常条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(c) 待ち状態の強制解除の時に，E_RLWAIが返ること．

(d) 再初期化の時に，E_DLTが返ること．

(e) 待ち状態が解除された時にE_OKが返ること．

(f) 対象優先度データキューの優先度データキュー管理領域にデータが格納さ
    れている場合，優先度データキュー管理領域の先頭に格納されたデータが
    取り出され，p_dataで指定したメモリ領域に返される．また，その優先度
    がp_datapriで指定したメモリ領域に返されること．(格納数は3)

    (f-1) 送信待ち行列にタスクが存在しない場合．

          (f-1-1) データ数が1つの場合．

          (f-1-2) データ数が2つの場合．

    (f-2) 送信待ち行列にタスクが存在する場合, 送信待ち行列の先頭のタス
          クの送信データが，データの優先度順で優先度データキュー管理領
          域に格納され，そのタスクは待ち解除されること．(データ数は3)
          (対象タスクとは，待ちタスクの待ち解除されたタスクのことを
          示す．)

          (f-2-1) 待ちタスクが1つの場合．

                  (f-2-1-1) 対象タスクの優先度が，実行状態のタスク
                            より高い場合，実行状態になること．

                  (f-2-1-2) 対象タスクの優先度が実行状態のタスクより
                            低い場合，実行可能状態となり，同じ優先度の
                            タスクの最後につながれること．

                  (f-2-1-3) 対象タスクの優先度が実行状態のタスクと同じ
                            場合，実行可能状態となり，同じ優先度の
                            タスクの最後につながれること．

                  (f-2-1-4) 対象タスクが，二重待ち状態の場合，
                            強制待ちとなること．

          (f-2-2) 待ちタスクが2つの場合．

                  (f-2-2-1) 対象タスクの優先度が，実行状態のタスク
                            より高い場合，実行状態になること．

                  (f-2-2-2) 対象タスクの優先度が実行状態のタスクより
                            低い場合，実行可能状態となり，同じ優先度の
                            タスクの最後につながれること．

                  (f-2-2-3) 対象タスクの優先度が実行状態のタスクと同じ
                            場合，実行可能状態となり，同じ優先度の
                            タスクの最後につながれること．

                  (f-2-2-4) 対象タスクが，二重待ち状態の場合，
                            強制待ちとなること．

(g) 対象優先度データキューの優先度データキュー管理領域にデータが格納さ
    れていない場合．

    (g-1) 送信待ち行列にタスクが存在しない場合には，自タスクは優先度デ
          ータキューからの受信待ち状態となり，FIFO順で対象優先度データ
          キューの受信待ち行列につながれること．

          (g-1-1) データ管理領域に格納できるデータ数を0とする場合．

                  (g-1-1-1) 待ちタスクがない場合は，
                            先頭につながれる状態になること．

                  (g-1-1-2) 優先度が中→低の順で待ちタスクがあり，
                            自タスクの優先度が高の場合．

                  (g-1-1-3) 優先度が中→低の順で待ちタスクがあり，
                            自タスクの優先度が中の場合．

                  (g-1-1-4) 優先度が高→中の順で待ちタスクがあり，
                            自タスクの優先度が低の場合．

          (g-1-2) データ管理領域に格納できるデータ数を3とする場合．
                  (データ数は0)
                  ※データキューの属性を優先度順にしてもFIFOとなること

                  (g-1-2-1) 待ちタスクがない場合は，
                            先頭につながれる状態になること．

                  (g-1-2-2) 優先度が中→低の順で待ちタスクがあり，
                            自タスクの優先度が高の場合．

                  (g-1-2-3) 優先度が中→低の順で待ちタスクがあり，
                            自タスクの優先度が中の場合．

                  (g-1-2-4) 優先度が高→中の順で待ちタスクがあり，
                            自タスクの優先度が低の場合．

    (g-2) 送信待ち行列にタスクが存在する場合には，送信待ち行列の先頭の
          タスクの送信データが，p_dataで指定したメモリ領域に返される．
          また，その優先度がp_datapriで指定したメモリ領域に返される．
          送信待ち行列の先頭のタスクは，待ち解除されること．(格納数は0)
          (対象タスクとは，待ちタスクの待ち解除されたタスクのことを
          示す．)

          (g-2-1) 待ちタスクが1つの場合．

                  (g-2-1-1) 対象タスクの優先度が，実行状態のタスクより
                            高い場合，実行状態になること．

                  (g-2-1-2) 対象タスクの優先度が実行状態のタスクより
                            低い場合，実行可能状態となり，同じ優先度の
                            タスクの最後につながれること．

                  (g-2-1-3) 対象タスクの優先度が実行状態のタスクと同じ
                            場合，実行可能状態となり，同じ優先度の
                            タスクの最後につながれること．

                  (g-2-1-4) 対象タスクが，二重待ち状態の場合，
                            強制待ちとなること．

          (g-2-2) 待ちタスクが2つの場合．

                  (g-2-2-1) 対象タスクの優先度が，実行状態のタスクより
                            高い場合，実行状態になること．

                  (g-2-2-2) 対象タスクの優先度が実行状態のタスクより
                            低い場合，実行可能状態となり，同じ優先度の
                            タスクの最後につながれること．

                  (g-2-2-3) 対象タスクの優先度が実行状態のタスクと同じ
                            場合，実行可能状態となり，同じ優先度の
                            タスクの最後につながれること．

                  (g-2-2-4) 対象タスクが，二重待ち状態の場合，
                            強制待ちとなること．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

2. ソースコードの条件網羅確認

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.1. ソースコード
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ER
rcv_pdq(ID pdqid, intptr_t *p_data, PRI *p_datapri)
{
	PDQCB	*p_pdqcb;
	WINFO_PDQ winfo_pdq;
	bool_t	reqdsp;
	ER		ercd;

	LOG_RCV_PDQ_ENTER(pdqid, p_data, p_datapri);
	CHECK_DISPATCH();
	CHECK_PDQID(pdqid);
	p_pdqcb = get_pdqcb(pdqid);

	t_lock_cpu();
	if (receive_pridata(p_pdqcb, p_data, p_datapri, &reqdsp)) {
		if (reqdsp) {
			dispatch();
		}
		ercd = E_OK;
	}
	else {
		p_runtsk->tstat = (TS_WAITING | TS_WAIT_RPDQ);
		make_wait(&(winfo_pdq.winfo));
		queue_insert_prev(&(p_pdqcb->rwait_queue), &(p_runtsk->task_queue));
		winfo_pdq.p_pdqcb = p_pdqcb;
		LOG_TSKSTAT(p_runtsk);
		dispatch();
		ercd = winfo_pdq.winfo.wercd;
		if (ercd == E_OK) {
			*p_data = winfo_pdq.data;
			*p_datapri = winfo_pdq.datapri;
		}
	}
	t_unlock_cpu();

  error_exit:
	LOG_RCV_PDQ_LEAVE(ercd, *p_data, *p_datapri);
	return(ercd);
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.2. マクロを展開したAPIと呼び出す内部関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[A] rcv_pdq

00 : ER
01 : rcv_pdq(ID pdqid, intptr_t *p_data, PRI *p_datapri)
02 : {
03 : 	PDQCB	*p_pdqcb;
04 : 	WINFO_PDQ winfo_pdq;
05 : 	bool_t	reqdsp;
06 : 	ER		ercd;
07 : 
08 : 	if (sense_contex() || t_sense_lock() || !dspflg) {
09 :               ercd = E_CTX;
10 :               goto error_exit;
11 :    }
12 :    if (!((TMIN_PDQID <= (pdqid) && (pdqid) <= tmax_pdqid))) {
13 :               ercd = E_ID;
14 :               goto error_exit;  
15 :    }
16 : 	p_pdqcb = &(pdqcb_table[(uint_t)((pdqid) - TMIN_PDQID)])
17 : 
18 : 	t_lock_cpu();
19 : 	if (receive_pridata(p_pdqcb, p_data, p_datapri, &reqdsp)) {
20 : 		if (reqdsp) {
21 : 			dispatch();
22 : 		}
23 : 		ercd = E_OK;
24 : 	}
25 : 	else {
26 : 		p_runtsk->tstat = (TS_WAITING | TS_WAIT_RPDQ);
27 : 		make_wait(&(winfo_pdq.winfo));
28 : 		queue_insert_prev(&(p_pdqcb->rwait_queue), &(p_runtsk->task_queue));
29 : 		winfo_pdq.p_pdqcb = p_pdqcb;
30 : 		dispatch();
31 : 		ercd = winfo_pdq.winfo.wercd;
32 : 		if (ercd == E_OK) {
33 : 			*p_data = winfo_pdq.data;
34 : 			*p_datapri = winfo_pdq.datapri;
35 : 		}
36 : 	}
37 : 	t_unlock_cpu();
38 : 
39 :   error_exit:
40 : 	return(ercd);
41 : }


[B] receive_pridata

00 : bool_t
01 : receive_pridata(PDQCB *p_pdqcb, intptr_t *p_data, PRI *p_datapri, bool_t *p_reqdsp)
02 : {
03 : 	TCB		*p_tcb;
04 : 	intptr_t data;
05 : 	PRI		datapri;
06 : 
07 : 	if (p_pdqcb->count > 0U) {
08 : 		dequeue_pridata(p_pdqcb, p_data, p_datapri);
09 : 		if (!queue_empty(&(p_pdqcb->swait_queue))) {
10 : 			p_tcb = (TCB *) queue_delete_next(&(p_pdqcb->swait_queue));
11 : 			data = ((WINFO_PDQ *)(p_tcb->p_winfo))->data;
12 : 			datapri = ((WINFO_PDQ *)(p_tcb->p_winfo))->datapri;
13 : 			enqueue_pridata(p_pdqcb, data, datapri);
14 : 			*p_reqdsp = wait_complete(p_tcb);
15 : 		}
16 : 		else {
17 : 			*p_reqdsp = false;
18 : 		}
19 : 		return(true);
20 : 	}
21 : 	else if (!queue_empty(&(p_pdqcb->swait_queue))) {
22 : 		p_tcb = (TCB *) queue_delete_next(&(p_pdqcb->swait_queue));
23 : 		*p_data = ((WINFO_PDQ *)(p_tcb->p_winfo))->data;
24 : 		*p_datapri = ((WINFO_PDQ *)(p_tcb->p_winfo))->datapri;
25 : 		*p_reqdsp = wait_complete(p_tcb);
26 : 		return(true);
27 : 	}
28 : 	else {
29 : 		return(false);
30 : 	}
31 : }

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.3. 条件式
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(A1) 08 : sense_context() 
(A2) 08 : t_sense_lock()
(A3) 08 : !dspflg
(A4) 12 : TMIN_PDQID <= (pdqid)
(A5) 12 : (pdqid) <= tmax_pdqid
(A6) 19 : receive_pridata(p_pdqcb, p_data, p_datapri, &reqdsp) 
(A7) 20 : reqdsp 
(A8) 32 : ercd == E_OK

(B1) 07 : p_pdqcb->count > 0U
(B2) 09 : !queue_empty(&(p_pdqcb->swait_queue))
(B3) 21 : !queue_empty(&(p_pdqcb->swait_queue))

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.4. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

             (A1) (A2) (A3) (A4) (A5) (A6) (B1) (B2) (B3) (A7) (A8)
(a-1)         T   D/F  D/F   D    D    D    D    D    D    D    D  
(a-2)         F    T   D/F   D    D    D    D    D    D    D    D  
(a-3)         F    F    T    D    D    D    D    D    D    D    D  
(a-4)         F    F    T    D    D    D    D    D    D    D    D  
(b-1)         F    F    F    F   D/T   D    D    D    D    D    D  
(b-2)         F    F    F    T    F    D    D    D    D    D    D  
(c)           F    F    F    T    T    F    F    D    F    D    F  
(d)           F    F    F    T    T    F    F    D    F    D    F  
(e)           F    F    F    T    T    F    F    D    F    D    T  
(f-1-1)       F    F    F    T    T    T    T    F    D    F    D  
(f-1-2)       F    F    F    T    T    T    T    F    D    F    D  
(f-2-1-1)     F    F    F    T    T    T    T    T    D    T    D  
(f-2-1-2)     F    F    F    T    T    T    T    T    D    F    D  
(f-2-1-3)     F    F    F    T    T    T    T    T    D    F    D  
(f-2-1-4)     F    F    F    T    T    T    T    T    D    F    D  
(f-2-2-1)     F    F    F    T    T    T    T    T    D    T    D  
(f-2-2-2)     F    F    F    T    T    T    T    T    D    F    D  
(f-2-2-3)     F    F    F    T    T    T    T    T    D    F    D  
(f-2-2-4)     F    F    F    T    T    T    T    T    D    F    D  
(g-1-1-1)     F    F    F    T    T    F    F    D    F    D    D  
(g-1-1-2)     F    F    F    T    T    F    F    D    F    D    D  
(g-1-1-3)     F    F    F    T    T    F    F    D    F    D    D  
(g-1-1-4)     F    F    F    T    T    F    F    D    F    D    D  
(g-1-2-1)     F    F    F    T    T    F    F    D    F    D    D  
(g-1-2-2)     F    F    F    T    T    F    F    D    F    D    D  
(g-1-2-3)     F    F    F    T    T    F    F    D    F    D    D  
(g-1-2-4)     F    F    F    T    T    F    F    D    F    D    D  
(g-2-1-1)     F    F    F    T    T    T    F    D    T    T    D  
(g-2-1-2)     F    F    F    T    T    T    F    D    T    F    D  
(g-2-1-3)     F    F    F    T    T    T    F    D    T    F    D  
(g-2-1-4)     F    F    F    T    T    T    F    D    T    F    D  
(g-2-2-1)     F    F    F    T    T    T    F    D    T    T    D  
(g-2-2-2)     F    F    F    T    T    T    F    D    T    F    D  
(g-2-2-3)     F    F    F    T    T    T    F    D    T    F    D  
(g-2-2-4)     F    F    F    T    T    T    F    D    T    F    D  
-------------------------------------------------------------------
網羅          O    O    O    O    O    O    O    O    O    O    O  


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

3. ホワイトボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■


以上．
