
	snd_pdq テストシート

----------------------------------------------------------------------
 TTSP
     TOPPERS Test Suite Package

 Copyright (C) 2009-2011 by Center for Embedded Computing Systems
             Graduate School of Information Science, Nagoya Univ., JAPAN
 Copyright (C) 2009-2011 by Digital Craft Inc.
 Copyright (C) 2009-2011 by NEC Communication Systems, Ltd.
 Copyright (C) 2009-2011 by FUJISOFT INCORPORATED
 Copyright (C) 2009-2010 by Mitsuhiro Matsuura

 上記著作権者は，以下の (1)〜(3) の条件を満たす場合に限り，本ドキュメ
 ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
     および下記の無保証規定が，そのままの形でドキュメント中に含まれて
     いること．
 (2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
     を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
     ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
     りではない．
 (3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
     からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
     本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
     く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

 本ドキュメントは，無保証で提供されているものである．上記著作権者およ
 びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
 る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
 により直接的または間接的に生じたいかなる損害に関しても，その責任を負
 わない．

 $Id: snd_pdq.txt 2 2012-05-09 02:23:52Z nces-shigihara $
----------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

0. API仕様

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

snd_pdq		優先度データキューへの送信〔T〕
psnd_pdq	優先度データキューへの送信（ポーリング）〔T〕
ipsnd_pdq	優先度データキューへの送信（ポーリング）〔I〕
tsnd_pdq	優先度データキューへの送信（タイムアウト付き）〔T〕

【C言語API】
	ER ercd = snd_pdq(ID pdqid, intptr_t data, PRI datapri)
	ER ercd = psnd_pdq(ID pdqid, intptr_t data, PRI datapri)
	ER ercd = ipsnd_pdq(ID pdqid, intptr_t data, PRI datapri)
	ER ercd = tsnd_pdq(ID pdqid, intptr_t data, PRI datapri, TMO tmout)

【パラメータ】
	ID			pdqid		対象優先度データキューのID番号
	intptr_t	data		送信データ
	PRI			datapri		送信データの優先度
	TMO			tmout		タイムアウト時間（tsnd_pdqの場合）

【リターンパラメータ】
	ER			ercd		正常終了（E_OK）またはエラーコード

【エラーコード】
	E_CTX			コンテキストエラー（非タスクコンテキストからの呼出
					し：ipsnd_pdqを除く，タスクコンテキストからの呼出し：
					ipsnd_pdqの場合，CPUロック状態からの呼出し，ディス
					パッチ保留状態からの呼出し：snd_pdqとtsnd_pdqの場合）
	E_NOSPT			未サポート機能（制約タスクからの呼出し：snd_pdqと
					tsnd_pdqの場合）
	E_ID			不正ID番号（pdqidが不正）
	E_PAR			パラメータエラー（datapriが不正，tmoutが不正：
					tsnd_pdqのみ）
	E_NOEXS〔D〕	オブジェクト未登録（対象優先度データキューが未登録）
	E_OACV〔P〕		オブジェクトアクセス違反（対象優先度データキューに
					対する通常操作1が許可されていない：ipsnd_pdqを除く）
	E_TMOUT			ポーリング失敗またはタイムアウト（snd_pdqを除く）
	E_RLWAI			待ち禁止状態または待ち状態の強制解除（snd_pdqと
					tsnd_pdqの場合）
	E_DLT			待ちオブジェクトの削除または再初期化（snd_pdqと
					tsnd_pdqの場合）

【機能】

pdqidで指定した優先度データキュー（対象優先度データキュー）に，dataで指
定したデータを，datapriで指定した優先度で送信する．具体的な振舞いは以下
の通り．

対象優先度データキューの受信待ち行列にタスクが存在する場合には，受信待
ち行列の先頭のタスクが，dataで指定したデータを受信し，待ち解除される．
待ち解除されたタスクには，待ち状態となったサービスコールからE_OKが返る．

対象優先度データキューの受信待ち行列にタスクが存在せず，優先度データ
キュー管理領域にデータを格納するスペースがある場合には，dataで指定した
データが，datapriで指定したデータの優先度順で優先度データキュー管理領域
に格納される．

対象優先度データキューの受信待ち行列にタスクが存在せず，優先度データ
キュー管理領域にデータを格納するスペースがない場合には，自タスクは優先
度データキューへの送信待ち状態となり，対象優先度データキューの送信待ち
行列につながれる．

datapriは，TMIN_DPRI以上で，対象データキューに送信できるデータ優先度の
最大値以下でなければならない．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

1. 仕様ベースのブラックボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.1. エラー条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(a) ディスパッチ保留状態で呼出す場合．

    (a-1) 非タスクコンテキストから呼び出して，E_CTXエラーが返ること．

    (a-2) CPUロック状態で呼び出して，E_CTXエラーが返ること．

    (a-3) 割込み優先度マスクが全解除でない状態で呼び出して，
          E_CTXエラーが返ること．

    (a-4) ディスパッチ禁止状態で呼び出して，E_CTXエラーが返ること．

(b) pdqidが不正の時にE_IDが返ること．

    (b-1) pdqidが許容される最小値-1(=0)の時にE_IDが返ること．

    (b-2) pdqidが許容される最大値+1(TNUM_PDQID+1)の時にE_IDが返ること．

(c) datapriが不正の時にE_PARが返ること．

    (c-1) datapriが許容される最小値-1(TMIN_DPRI-1)の時に
          E_PARが返ること．

    (c-2) datapriが許容される最大値+1(DATA_PRI_MAX+1)の時に
          E_PARが返ること．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.2. 正常条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(d) 待ち状態の強制解除の時に，E_RLWAIが返ること．

(e) 再初期化の時に，E_DLTが返ること．

(f) 待ち状態が解除された時にE_OKが返ること．

(g) 対象優先度データキューの受信待ち行列にタスクが存在する場合，
    受信待ち行列の先頭のタスクが，dataで指定したデータを受信し，
    待ち解除されること．
    (対象タスクとは，待ちタスクの待ち解除されたタスクのことを示す．)

    (g-1) 待ちタスクが1つの場合．(格納数は0)

          (g-1-1) 対象タスクの優先度が，実行状態のタスクより高い場合，
                  実行状態になること．

          (g-1-2) 対象タスクの優先度が実行状態のタスクより低い場合，
                  実行可能状態となり，同じ優先度のタスクの最後に
                  つながれること．

          (g-1-3) 対象タスクの優先度が実行状態のタスクと同じ場合，
                  実行可能状態となり，同じ優先度のタスクの最後に
                  つながれること．

          (g-1-4) 対象タスクが，二重待ち状態の場合，強制待ちとなること．

    (g-2) 待ちタスクが2つの場合．(格納数は3)

          (g-2-1) 対象タスクの優先度が，実行状態のタスクより高い場合，
                  実行状態になること．

          (g-2-2) 対象タスクの優先度が実行状態のタスクより低い場合，
                  実行可能状態となり，同じ優先度のタスクの最後に
                  つながれること．

          (g-2-3) 対象タスクの優先度が実行状態のタスクと同じ場合，
                  実行可能状態となり，同じ優先度のタスクの最後に
                  つながれること．

          (g-2-4) 対象タスクが，二重待ち状態の場合，強制待ちとなること．

(h) 対象優先度データキューの受信待ち行列にタスクが存在しない場合．

    (h-1) 優先度データキュー管理領域にデータを格納するスペースがない場
          合には，自タスクは優先度データキューへの送信待ち状態となり，
          対象優先度データキューの送信待ち行列につながれること．

          (h-1-1) 優先度データキューの送信待ち行列がFIFO順の場合は，
                  新たに待ち状態に遷移したタスクは待ち行列の最後に
                  つながれること．(格納数は0)

                  (h-1-1-1) 待ちタスクがない場合は，
                            先頭につながれる状態になること．

                  (h-1-1-2) 優先度が中→低の順で待ちタスクがあり，
                            自タスクの優先度が高の場合．

                  (h-1-1-3) 優先度が中→低の順で待ちタスクがあり，
                            自タスクの優先度が中の場合．

                  (h-1-1-4) 優先度が高→中の順で待ちタスクがあり，
                            自タスクの優先度が低の場合．

          (h-1-2) 優先度データキューの送信待ち行列がタスク優先度順の場
                  合には，新たに待ち状態に遷移したタスクがつながれる
                  こと．(格納数は3，データ数は3)

                  (h-1-2-1) 待ちタスクがない場合は，
                            先頭につながれる状態になること．

                  (h-1-2-2) 優先度が中→低の順で待ちタスクがあり，
                            自タスクの優先度が高の場合．

                  (h-1-2-3) 優先度が中→低の順で待ちタスクがあり，
                            自タスクの優先度が中の場合．

                  (h-1-2-4) 優先度が高→中の順で待ちタスクがあり，
                            自タスクの優先度が低の場合．

    (h-2) 優先度データキュー管理領域にデータを格納するスペースがある場
          合には，dataで指定したデータが，datapriで指定したデータの優
          先度順で優先度データキュー管理領域に格納されること．

          (h-2-1) 優先度データキューにデータがない場合は，
                  先頭に格納されること．

          (h-2-2) 優先度データキューにデータ優先度が中→低の順で
                  データがあり，データ優先度が高のデータを送信する
                  場合は，先頭に格納されること．

          (h-2-3) 優先度データキューにデータ優先度が中→低の順で
                  データがあり，データ優先度が中のデータを送信する
                  場合は，同じ優先度のデータの最後につながれること．

          (h-2-4) 優先度データキューにデータ優先度が高→中の順で
                  データがあり，データ優先度が低のデータを送信する
                  場合は，データの最後につながれること．

【備考】

・「datapriは，TMIN_DPRI以上で，対象データキューに送信できるデータ優
  先度の最大値以下でなければならない．」は，エラーになる場合をテスト対
  象とする．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

2. ソースコードの条件網羅確認

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.1. ソースコード
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ER
snd_pdq(ID pdqid, intptr_t data, PRI datapri)
{
	PDQCB	*p_pdqcb;
	WINFO_PDQ winfo_pdq;
	bool_t	reqdsp;
	ER		ercd;

	LOG_SND_PDQ_ENTER(pdqid, data, datapri);
	CHECK_DISPATCH();
	CHECK_PDQID(pdqid);
	p_pdqcb = get_pdqcb(pdqid);
	CHECK_PAR(TMIN_DPRI <= datapri && datapri <= p_pdqcb->p_pdqinib->maxdpri);

	t_lock_cpu();
	if (send_pridata(p_pdqcb, data, datapri, &reqdsp)) {
		if (reqdsp) {
			dispatch();
		}
		ercd = E_OK;
	}
	else {
		winfo_pdq.data = data;
		winfo_pdq.datapri = datapri;
		p_runtsk->tstat = (TS_WAITING | TS_WAIT_SPDQ);
		wobj_make_wait((WOBJCB *) p_pdqcb, (WINFO_WOBJ *) &winfo_pdq);
		dispatch();
		ercd = winfo_pdq.winfo.wercd;
	}
	t_unlock_cpu();

  error_exit:
	LOG_SND_PDQ_LEAVE(ercd);
	return(ercd);
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.2. マクロを展開したAPIと呼び出す内部関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[A] snd_pdq

00 : ER
01 : snd_pdq(ID pdqid, intptr_t data, PRI datapri)
02 : {
03 : 	PDQCB	*p_pdqcb;
04 : 	WINFO_PDQ winfo_pdq;
05 : 	bool_t	reqdsp;
06 : 	ER		ercd;
07 : 
08 : 	if (sense_contex() || t_sense_lock() || !dspflg) {
09 :               ercd = E_CTX;
10 :               goto error_exit;
11 :    }
12 :    if (!((TMIN_PDQID <= (pdqid) && (pdqid) <= tmax_pdqid))) {
13 :               ercd = E_ID;
14 :               goto error_exit;  
15 :    }
16 : 	p_pdqcb = &(pdqcb_table[(uint_t)((pdqid) - TMIN_PDQID)])
17 : 	if(!(TMIN_DPRI <= datapri && datapri <= p_pdqcb->p_pdqinib->maxdpri)){
18 :                 ercd = E_PAR;
19 :                 goto error_exit;
20 :     }
21 : 
22 : 	t_lock_cpu();
23 : 	if (send_pridata(p_pdqcb, data, datapri, &reqdsp)) {
24 : 		if (reqdsp) {
25 : 			dispatch();
26 : 		}
27 : 		ercd = E_OK;
28 : 	}
29 : 	else {
30 : 		winfo_pdq.data = data;
31 : 		winfo_pdq.datapri = datapri;
32 : 		p_runtsk->tstat = (TS_WAITING | TS_WAIT_SPDQ);
33 : 		wobj_make_wait((WOBJCB *) p_pdqcb, (WINFO_WOBJ *) &winfo_pdq);
34 : 		dispatch();
35 : 		ercd = winfo_pdq.winfo.wercd;
36 : 	}
37 : 	t_unlock_cpu();
38 : 
39 :  error_exit:
40 : 	return(ercd);
41 : }


[B] send_pridata

00 : bool_t
01 : send_pridata(PDQCB *p_pdqcb, intptr_t data, PRI datapri, bool_t *p_reqdsp)
02 : {
03 :         TCB             *p_tcb;
04 : 
05 :         if (!queue_empty(&(p_pdqcb->rwait_queue))) {
06 :                 p_tcb = (TCB *) queue_delete_next(&(p_pdqcb->rwait_queue));
07 :                 ((WINFO_PDQ *)(p_tcb->p_winfo))->data = data;
08 :                 ((WINFO_PDQ *)(p_tcb->p_winfo))->datapri = datapri;
09 :                 *p_reqdsp = wait_complete(p_tcb);
10 :                 return(true);
11 :         }
12 :         else if (p_pdqcb->count < p_pdqcb->p_pdqinib->pdqcnt) {
13 :                 enqueue_pridata(p_pdqcb, data, datapri);
14 :                 *p_reqdsp = false;
15 :                 return(true);
16 :         }
17 :         else {
18 :                 return(false);
19 :         }
20 : }


[C] wait_complete

00 : bool_t
01 : wait_complete(TCB *p_tcb)
02 : {
03 : 	wait_dequeue_tmevtb(p_tcb);
04 : 	p_tcb->p_winfo->wercd = E_OK;
05 : 	return(make_non_wait(p_tcb));
06 : }


[D] make_non_wait

00 : Inline bool_t
01 : make_non_wait(TCB *p_tcb)
02 : {
03 : 	if (!((p_tcb->tstat) & TS_SUSPENDED) != 0U) {
04 : 		/*
05 : 		 *  待ち状態から実行できる状態への遷移
06 : 		 */
07 :		p_tcb->tstat = TS_RUNNABLE;
08 : 		return(make_runnable(p_tcb));
09 : 	}
10 : 	else {
11 : 		/*
12 : 		 *  二重待ち状態から強制待ち状態への遷移
13 : 		 */
14 : 		p_tcb->tstat = TS_SUSPENDED;
15 : 		return(false);
16 : 	}
17 : }


[E] enqueue_pridata

00 : void
01 : enqueue_pridata(PDQCB *p_pdqcb, intptr_t data, PRI datapri)
02 : {
03 : 	PDQMB	*p_pdqmb;
04 : 	PDQMB	**pp_prev_next, *p_next;
05 : 
06 : 	if (p_pdqcb->p_freelist != NULL) {
07 : 		p_pdqmb = p_pdqcb->p_freelist;
08 : 		p_pdqcb->p_freelist = p_pdqmb->p_next;
09 : 	}
10 : 	else {
11 : 		p_pdqmb = p_pdqcb->p_pdqinib->p_pdqmb + p_pdqcb->unused;
12 : 		p_pdqcb->unused++;
13 : 	}
14 : 
15 : 	p_pdqmb->data = data;
16 : 	p_pdqmb->datapri = datapri;
17 : 
18 : 	pp_prev_next = &(p_pdqcb->p_head);
19 : 	while ((p_next = *pp_prev_next) != NULL) {
20 : 		if (p_next->datapri > datapri) {
21 : 			break;
22 : 		}
23 : 		pp_prev_next = &(p_next->p_next);
24 : 	}
25 : 	p_pdqmb->p_next = p_next;
26 : 	*pp_prev_next = p_pdqmb;
27 : 	p_pdqcb->count++;
28 : }


[F] wobj_make_wait

00 : void
01 : wobj_make_wait(WOBJCB *p_wobjcb, WINFO_WOBJ *p_winfo_wobj)
02 : {
03 : 	make_wait(&(p_winfo_wobj->winfo));
04 : 	wobj_queue_insert(p_wobjcb);
05 : 	p_winfo_wobj->p_wobjcb = p_wobjcb;
06 : 	LOG_TSKSTAT(p_runtsk);
07 : }


[G] wobj_queue_insert

00 : Inline void
01 : wobj_queue_insert(WOBJCB *p_wobjcb)
02 : {
03 :          if ((p_wobjcb->p_wobjinib->wobjatr & TA_TPRI) != 0U) {
04 :                  queue_insert_tpri(&(p_wobjcb->wait_queue), p_runtsk);
05 :          }
06 :          else {
07 :                  queue_insert_prev(&(p_wobjcb->wait_queue), &(p_runtsk->task_queue));
08 :          }
09 : }


[H] queue_insert_tpri

00 : Inline void
01 : queue_insert_tpri(QUEUE *p_queue, TCB *p_tcb)
02 : {
03 :         QUEUE   *p_entry;
04 :         uint_t  priority = p_tcb->priority;
05 : 
06 :         for (p_entry = p_queue->p_next; p_entry != p_queue;
07 :                                                         p_entry = p_entry->p_next) {
08 :                 if (priority < ((TCB *) p_entry)->priority) {
09 :                         break;
10 :                 }
11 :         }
12 :         queue_insert_prev(p_entry, &(p_tcb->task_queue));
13 : }

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.3. 条件式
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(A1) 08 : sense_context()
(A2) 08 : t_sense_lock()
(A3) 08 : !dspflg
(A4) 12 : TMIN_PDQID <= (pdqid)
(A5) 12 : (pdqid) <= tmax_pdqid
(A6) 17 : TMIN_DPRI <= datapri
(A7) 17 : datapri <= p_pdqcb->p_pdqinib->maxdpri
(A8) 23 : send_pridata(p_pdqcb, data, datapti, &reqdsp)
(A9) 24 : reqdsp

(B1) 05 : !queue_empty(&(p_pdqcb->rwait_queue))
(B2) 12 : p_pdqcb->count < p_pdqcb->p_pdqinib->pdqcnt

(D1) 03 : !((p_tcb->tstat) & TS_SUSPENDED) != 0U

(E1) 06 : p_pdqcb->p_freelist != NULL
(E2) 19 : while ((p_next = *pp_prev_next) != NULL)
(E3) 20 : p_next->datapri > datapri

(G1) 03 : (p_wobjcb->p_wobjinib->wobjatr & TA_TPRI) != 0U

(H1) 06 : p_entry != p_queue;
(H2) 08 : priority < ((TCB *) p_entry)->priority

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.4. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

           (A1) (A2) (A3) (A4) (A5) (A6) (A7) (A8) (B1) (D1) (B2) (E1) (E2) (E3) (A9) (G1) (H1) (H2)
(a-1)       T   D/F  D/F   D    D    D    D    D    D    D    D    D    D    D    D    D    D    D  
(a-2)       F    T   D/F   D    D    D    D    D    D    D    D    D    D    D    D    D    D    D  
(a-3)       F    F    T    D    D    D    D    D    D    D    D    D    D    D    D    D    D    D  
(a-4)       F    F    T    D    D    D    D    D    D    D    D    D    D    D    D    D    D    D  
(b-1)       F    F    F    F   D/F   D    D    D    D    D    D    D    D    D    D    D    D    D  
(b-2)       F    F    F    T    F    D    D    D    D    D    D    D    D    D    D    D    D    D  
(c-1)       F    F    F    T    T    F   D/T   D    D    D    D    D    D    D    D    D    D    D  
(c-2)       F    F    F    T    T    T    F    D    D    D    D    D    D    D    D    D    D    D  
(d)         F    F    F    T    T    T    T    F    F    D    F    D    D    D    D    F    D    D  
(e)         F    F    F    T    T    T    T    F    F    D    F    D    D    D    D    F    D    D  
(f)         F    F    F    T    T    T    T    F    F    D    F    D    D    D    D    F    D    D  
(g-1-1)     F    F    F    T    T    T    T    T    T    T    D    D    D    D    T    D    D    D  
(g-1-2)     F    F    F    T    T    T    T    T    T    T    D    D    D    D    F    D    D    D  
(g-1-3)     F    F    F    T    T    T    T    T    T    T    D    D    D    D    F    D    D    D  
(g-1-4)     F    F    F    T    T    T    T    T    T    F    D    D    D    D    F    D    D    D  
(g-2-1)     F    F    F    T    T    T    T    T    T    T    D    D    D    D    T    D    D    D  
(g-2-2)     F    F    F    T    T    T    T    T    T    T    D    D    D    D    F    D    D    D  
(g-2-3)     F    F    F    T    T    T    T    T    T    T    D    D    D    D    F    D    D    D  
(g-2-4)     F    F    F    T    T    T    T    T    T    F    D    D    D    D    F    D    D    D  
(h-1-1-1)   F    F    F    T    T    T    T    F    F    D    F    D    D    D    D    F    D    D  
(h-1-1-2)   F    F    F    T    T    T    T    F    F    D    F    D    D    D    D    F    D    D  
(h-1-1-3)   F    F    F    T    T    T    T    F    F    D    F    D    D    D    D    F    D    D  
(h-1-1-4)   F    F    F    T    T    T    T    F    F    D    F    D    D    D    D    F    D    D  
(h-1-2-1)   F    F    F    T    T    T    T    F    F    D    F    D    D    D    D    T    F    D  
(h-1-2-2)   F    F    F    T    T    T    T    F    F    D    F    D    D    D    D    T    T    T  
(h-1-2-3)   F    F    F    T    T    T    T    F    F    D    F    D    D    D    D    T    TT   FT 
(h-1-2-4)   F    F    F    T    T    T    T    F    F    D    F    D    D    D    D    T    TTF  FF 
(h-2-1)     F    F    F    T    T    T    T    T    F    D    T    F    F    D    F    D    D    D  
(h-2-2)     F    F    F    T    T    T    T    T    F    D    T    F    T    T    F    D    D    D  
(h-2-3)     F    F    F    T    T    T    T    T    F    D    T    F    TT   FT   F    D    D    D  
(h-2-4)     F    F    F    T    T    T    T    T    F    D    T    F    TTF  FF   F    D    D    D  
----------------------------------------------------------------------------------------------------
網羅        O    O    O    O    O    O    O    O    O    O    O    X    X    O    O    O    X    O  

【備考】

・(E1)の網羅をさせるために，以下にホワイトボックステストを実施する．
・(E2)，(H1)のwhileのカバレッジをさせるために，
  以下にホワイトボックステストを実施する．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

3. ホワイトボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
3.1. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

          (A1) (A2) (A3) (A4) (A5) (A6) (A7) (A8) (B1) (D1) (B2) (E1) (E2) (E3) (A9) (G1) (H1) (H2)
(W_a)      F    F    F    T    T    T    T    T    F    D    T    T    T    T    F    D    D    D  
(W_b)      F    F    F    T    T    T    T    T    F    D    T    F    TTTF FFF  F    D    D    D  
(W_c)      F    F    F    T    T    T    T    F    F    D    F    D    D    D    D    T    TTTF FFF
---------------------------------------------------------------------------------------------------
網羅       O    O    O    O    O    O    O    O    O    O    O    O    O    O    O    O    O    O  

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
3.2. テストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(W_a) 以下の条件が成り立つ時．

  ・対象優先度データキューの受信待ち行列にタスクが存在しない場合．
  ・優先度データキュー管理領域にデータを格納するスペースがある場合には，
    dataで指定したデータが，datapriで指定したデータの優先度順で優先度
    データキュー管理領域に格納される．
  ・未割当てデータ管理ブロックのリストがある場合．
  ・データがある場合．
  ・データの優先度が最初のデータより高い場合．

(W_b) 以下の条件が成り立つ時．
 
  ・対象優先度データキューの受信待ち行列にタスクが存在しない場合．
  ・優先度データキュー管理領域にデータを格納するスペースがある場合には，
    dataで指定したデータが，datapriで指定したデータの優先度順で優先度
    データキュー管理領域に格納されること．
  ・データがある場合．
  ・データの優先度が最初のデータと同じ場合，同じ優先度のデータの最後に
    つながれること．

(W_c) 以下の条件が成り立つ時．
 
  ・対象優先度データキューの受信待ち行列にタスクが存在しない場合．
  ・優先度データキュー管理領域にデータを格納するスペースがない場合には，
    自タスクは優先度データキューへの送信待ち状態となり，対象優先度
    データキューの送信待ち行列につながれること．
  ・優先度データキューの送信待ち行列がタスク優先度順の場合には，新たに
    待ち状態に遷移したタスクがつながれる．
  ・待ちタスクがある場合．
  ・タスクの優先度が最初の待ちタスクと同じ場合，同じ優先度のタスクの
    最後につながれること．



以上．
