
	ref_tsk テストシート

----------------------------------------------------------------------
 TTSP
     TOPPERS Test Suite Package

 Copyright (C) 2009-2011 by Center for Embedded Computing Systems
             Graduate School of Information Science, Nagoya Univ., JAPAN
 Copyright (C) 2009-2011 by Digital Craft Inc.
 Copyright (C) 2009-2011 by NEC Communication Systems, Ltd.
 Copyright (C) 2009-2011 by FUJISOFT INCORPORATED
 Copyright (C) 2009-2010 by Mitsuhiro Matsuura

 上記著作権者は，以下の (1)〜(3) の条件を満たす場合に限り，本ドキュメ
 ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
     および下記の無保証規定が，そのままの形でドキュメント中に含まれて
     いること．
 (2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
     を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
     ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
     りではない．
 (3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
     からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
     本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
     く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

 本ドキュメントは，無保証で提供されているものである．上記著作権者およ
 びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
 る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
 により直接的または間接的に生じたいかなる損害に関しても，その責任を負
 わない．

 $Id: ref_tsk.txt 2 2012-05-09 02:23:52Z nces-shigihara $
----------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

0. API仕様

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

ref_tsk		タスクの状態参照〔T〕

【C言語API】
	ER ercd = ref_tsk(ID tskid, T_RTSK *pk_rtsk)

【パラメータ】
	ID			tskid		対象タスクのID番号
	T_RTSK *	pk_rtsk		タスクの現在状態を入れるパケットへのポインタ

【リターンパラメータ】
	ER			ercd		正常終了（E_OK）またはエラーコード

　＊タスクの現在状態（パケットの内容）
	STAT		tskstat		タスク状態
	PRI			tskpri		タスクの現在優先度
	PRI			tskbpri		タスクのベース優先度
	STAT		tskwait		タスクの待ち要因
	ID			wobjid		タスクの待ち対象のオブジェクトのID
	TMO			lefttmo		タスクがタイムアウトするまでの時間
	uint_t		actcnt		タスクの起動要求キューイング数
	uint_t		wupcnt		タスクの起床要求キューイング数
	bool_t		texmsk		タスクがタスク例外処理マスク状態か否か（保
							護機能対応カーネルの場合）
	bool_t		waifbd		タスクが待ち禁止状態か否か（保護機能対応カー
							ネルの場合）
	uint_t		svclevel	タスクの拡張サービスコールのネストレベル（保
							護機能対応カーネルの場合）
	ID			prcid		タスクの割付けプロセッサのID（マルチプロセッ
							サ対応カーネルの場合）
	ID			actprc		タスクの次回起動時の割付けプロセッサのID（マ
							ルチプロセッサ対応カーネルの場合）

【エラーコード】
	E_CTX			コンテキストエラー（非タスクコンテキストからの呼出
					し，CPUロック状態からの呼出し）
	E_ID			不正ID番号（tskidが不正）
	E_NOEXS〔D〕	オブジェクト未登録（対象タスクが未登録）
	E_OACV〔P〕		オブジェクトアクセス違反（対象タスクに対する参照操
					作が許可されていない）
	E_MACV〔P〕		メモリアクセス違反（pk_rtskが指すメモリ領域への書込
					みアクセスが許可されていない）

【機能】

tskidで指定したタスク（対象タスク）の現在状態を参照する．参照した現在状
態は，pk_rtskで指定したメモリ領域に返される．

tskstatには，対象タスクの現在のタスク状態を表す次のいずれかの値が返され
る．

	TTS_RUN		0x01U		実行状態
	TTS_RDY		0x02U		実行可能状態
	TTS_WAI		0x04U		待ち状態
	TTS_SUS		0x08U		強制待ち状態
	TTS_WAS		0x0cU		二重待ち状態
	TTS_DMT		0x10U		休止状態

マルチプロセッサ対応カーネルでは，対象タスクが自タスクの場合にも，
tskstatがTTS_SUSとなる場合がある．この状況は，自タスクに対してref_tskを
発行するのと同じタイミングで，他のプロセッサで実行されているタスクから
同じタスクに対してsus_tskが発行された場合に発生する可能性がある．

対象タスクが休止状態でない場合には，tskpriには対象タスクの現在優先度が，
tskbpriには対象タスクのベース優先度が返される．対象タスクが休止状態であ
る場合には，tskpriとtskbpriの値は保証されない．

対象タスクが待ち状態である場合には，tskwaitには，対象タスクが何を待って
いる状態であるかを表す次のいずれかの値が返される．

	TTW_SLP		0x0001U		起床待ち
	TTW_DLY		0x0002U		時間経過待ち
	TTW_SEM		0x0004U		セマフォの資源獲得待ち
	TTW_FLG		0x0008U		イベントフラグ待ち
	TTW_SDTQ	0x0010U		データキューへの送信待ち
	TTW_RDTQ	0x0020U		データキューからの受信待ち
	TTW_SPDQ	0x0100U		優先度データキューへの送信待ち
	TTW_RPDQ	0x0200U		優先度データキューからの受信待ち
	TTW_MTX		0x0080U		ミューテックスのロック待ち状態
	TTW_MBX		0x0040U		メールボックスからの受信待ち
	TTW_MPF		0x2000U		固定長メモリブロックの獲得待ち

対象タスクが待ち状態でない場合には，tskwaitの値は保証されない．

対象タスクが起床待ち状態および時間経過待ち状態以外の待ち状態である場合
には，wobjidに，対象タスクが待っているオブジェクトのID番号が返される．
対象タスクが待ち状態でない場合や，起床待ち状態または時間経過待ち状態で
ある場合には，wobjidの値は保証されない．

対象タスクが時間経過待ち状態以外の待ち状態である場合には，lefttmoに，タ
スクがタイムアウトを起こすまでの相対時間が返される．タスクがタイムアウ
トを起こさない場合には，TMO_FEVR（＝-1）が返される．

対象タスクが時間経過待ち状態である場合には，lefttmoに，タスクの遅延時間
が経過して待ち解除されるまでの相対時間が返される．ただし，返されるべき
相対時間がTMO型に格納することができない場合がありうる．この場合には，相
対時間（RELTIM型，uint_t型に定義される）をTMO型（int_t型に定義される）
に型キャストした値が返される．

対象タスクが待ち状態でない場合には，lefttmoの値は保証されない．

actcntには，対象タスクの起動要求キューイング数が返される．

対象タスクが休止状態でない場合には，wupcntに，タスクの起床要求キューイ
ング数が返される．対象タスクが休止状態である場合には，wupcntの値は保証
されない．

保護機能対応カーネルで，対象タスクが休止状態でない場合には，texmskに，
対象タスクがタスク例外処理マスク状態の場合にtrue，そうでない場合に
falseが返される．waifbdには，対象タスクが待ち禁止状態の場合にtrue，そう
でない場合にfalseが返される．またsvclevelには，対象タスクが拡張サービス
コールを呼び出していない場合には0，呼び出している場合には，実行中の拡張
サービスコールがネスト段数が返される．対象タスクが休止状態である場合に
は，texmsk，waifbd，svclevelの値は保証されない．

マルチプロセッサ対応カーネルでは，prcidに，対象タスクの割付けプロセッサ
のID番号が返される．またactprcには，対象タスクの次回起動時の割付けプロ
セッサのID番号が返される．次回起動時の割付けプロセッサが未設定の場合に
は，actprcにTPRC_NONE（＝0）が返される．

tskidにTSK_SELF（＝0）を指定すると，自タスクが対象タスクとなる．

【補足説明】

対象タスクが時間経過待ち状態である場合に，lefttmo（TMO型）に返される値
をRELTIM型に型キャストすることで，タスクが待ち解除されるまでの相対時間
を正しく得ることができる．

【TOPPERS/ASPカーネルにおける規定】

ASPカーネルでは，tskwaitにTTW_MTXが返ることはない．ただし，ミューテック
ス機能拡張パッケージを用いると，tskwaitにTTW_MTXが返る場合がある．

【TOPPERS/FMPカーネルにおける規定】

FMPカーネルでは，tskwaitにTTW_MTXが返ることはない．

【TOPPERS/HRP2カーネルにおける規定】

HRP2カーネルでは，tskwaitにTTW_MTXが返ることはない．

【使用上の注意】

ref_tskはデバッグ時向けの機能であり，その他の目的に使用することは推奨し
ない．これは，ref_tskを呼び出し，対象タスクの現在状態を参照した直後に割
込みが発生した場合，ref_tskから戻ってきた時には対象タスクの状態が変化し
ている可能性があるためである．

【μITRON4.0仕様との関係】

対象タスクが時間経過待ち状態の時にlefttmoに返される値について規定した．
また，参照できるタスクの状態から，強制待ち要求ネスト数（suscnt）を除外
した．

マルチプロセッサ対応カーネルで参照できる情報として，割付けプロセッサの
ID（prcid）と次回起動時の割付けプロセッサのID（actprc）を追加した．

【μITRON4.0/PX仕様との関係】

保護機能対応カーネルで参照できる情報として，タスク例外処理マスク状態か
否か（texmsk），待ち禁止状態か否か（waifbd），拡張サービスコールのネス
トレベル（svclevel）を追加した．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

１．仕様ベースのブラックボックステスト(シングルプロセッサ)

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.1. エラー条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(a) ディスパッチ保留状態で呼出す場合．

    (a-1) 非タスクコンテキストから呼び出して，E_CTXエラーが返ること．

    (a-2) CPUロック状態で呼び出して，E_CTXエラーが返ること．

(b) tskidが不正の時にE_IDが返ること．

    (b-1) tskidが許容される最小値-1(=-1)の時にE_IDが返ること．

    (b-2) tskidが許容される最大値+1(TNUM_TSKID+1)の時にE_IDが返ること．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.2. 正常条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(c) tskstatには，対象タスクの現在のタスク状態を表す次のいずれかの値が
    返されること．
    対象タスクが休止状態でない場合には，tskpriには対象タスクの現在優先
    度が，tskbpriには対象タスクのベース優先度が返されること．

    (c-1) TTS_RUN     0x01U       実行状態

    (c-2) TTS_RDY     0x02U       実行可能状態

    (c-3) TTS_WAI     0x04U       待ち状態

          対象タスクが待ち状態である場合には，tskwaitには，対象タスクが
          何を待っている状態であるかを表す次のいずれかの値が返されるこ
          と．

          対象タスクが起床待ち状態および時間経過待ち以外の場合には，待っ
          ているオブジェクトのID番号が返されること．

          タスクがタイムアウトを起こさない場合には，lefttmoに，TMO_FEVR
          (=-1)が返されること．

          (c-3-1) TTW_SLP     0x0001U     起床待ち
          (c-3-2) TTW_DLY     0x0002U     時間経過待ち
          (c-3-3) TTW_SEM     0x0004U     セマフォの資源獲得待ち
          (c-3-4) TTW_FLG     0x0008U     イベントフラグ待ち
          (c-3-5) TTW_SDTQ    0x0010U     データキューへの送信待ち
          (c-3-6) TTW_RDTQ    0x0020U     データキューからの受信待ち
          (c-3-7) TTW_SPDQ    0x0100U     優先度データキューへの送信待ち
          (c-3-8) TTW_RPDQ    0x0200U     優先度データキューからの受信待ち
          (c-3-9) TTW_MBX     0x0040U     メールボックスからの受信待ち
          (c-3-10)TTW_MPF     0x2000U     固定長メモリブロックの獲得待ち

    (c-4) 対象タスクがタイムアウト待ち状態である場合には，lefttmoに，
          タスクの遅延時間が経過して待ち解除されるまでの相対時間が返さ
          れること．

          (c-4-1) TTW_SEM     0x0004U     セマフォの資源獲得待ち
          (c-4-2) TTW_FLG     0x0008U     イベントフラグ待ち
          (c-4-3) TTW_SDTQ    0x0010U     データキューへの送信待ち
          (c-4-4) TTW_RDTQ    0x0020U     データキューからの受信待ち
          (c-4-5) TTW_SPDQ    0x0100U     優先度データキューへの送信待ち
          (c-4-6) TTW_RPDQ    0x0200U     優先度データキューからの受信待ち
          (c-4-7) TTW_MBX     0x0040U     メールボックスからの受信待ち
          (c-4-8) TTW_MPF     0x2000U     固定長メモリブロックの獲得待ち

    (c-5) TTS_SUS     0x08U       強制待ち状態

    (c-6) TTS_WAS     0x0cU       二重待ち状態

          (c-6-1) TTW_SLP     0x0001U     起床待ち
          (c-6-2) TTW_DLY     0x0002U     時間経過待ち
          (c-6-3) TTW_SEM     0x0004U     セマフォの資源獲得待ち
          (c-6-4) TTW_FLG     0x0008U     イベントフラグ待ち
          (c-6-5) TTW_SDTQ    0x0010U     データキューへの送信待ち
          (c-6-6) TTW_RDTQ    0x0020U     データキューからの受信待ち
          (c-6-7) TTW_SPDQ    0x0100U     優先度データキューへの送信待ち
          (c-6-8) TTW_RPDQ    0x0200U     優先度データキューからの受信待ち
          (c-6-9) TTW_MBX     0x0040U     メールボックスからの受信待ち
          (c-6-10)TTW_MPF     0x2000U     固定長メモリブロックの獲得待ち

    (c-7) TTS_DMT     0x10U       休止状態

    (c-8) 対象タスクが休止状態でない場合には，wupcntに，タスクの起床要
          求キューイング数が返されること．

    (c-9) actcntには，対象タスクの起動要求キューイング数が返されること．

(d) tskidにTSK_SELF(=0)を指定すると，自タスクが対象タスクとなること．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

2. ソースコードの条件網羅確認

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.1. ソースコード
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ER
ref_tsk(ID tskid, T_RTSK *pk_rtsk)
{
	TCB		*p_tcb;
	uint_t	tstat;
	ER		ercd;

	LOG_REF_TSK_ENTER(tskid, pk_rtsk);
	CHECK_TSKCTX_UNL();
	CHECK_TSKID_SELF(tskid);
	p_tcb = get_tcb_self(tskid);

	t_lock_cpu();
	tstat = p_tcb->tstat;
	if (TSTAT_DORMANT(tstat)) {
		/*
 		 *  対象タスクが休止状態の場合
		 */
		pk_rtsk->tskstat = TTS_DMT;
	}
	else {
		/*
 		 *  タスク状態の取出し
		 */
		if (TSTAT_SUSPENDED(tstat)) {
			if (TSTAT_WAITING(tstat)) {
				pk_rtsk->tskstat = TTS_WAS;
			}
			else {
				pk_rtsk->tskstat = TTS_SUS;
			}
		}
		else if (TSTAT_WAITING(tstat)) {
			pk_rtsk->tskstat = TTS_WAI;
		}
		else if (p_tcb == p_runtsk) {
			pk_rtsk->tskstat = TTS_RUN;
		}
		else {
			pk_rtsk->tskstat = TTS_RDY;
		}

		/*
 		 *  現在優先度とベース優先度の取出し
		 */
		pk_rtsk->tskpri = EXT_TSKPRI(p_tcb->priority);
		pk_rtsk->tskbpri = EXT_TSKPRI(p_tcb->priority);

		if (TSTAT_WAITING(tstat)) {
			/*
	 		 *  待ち要因と待ち対象のオブジェクトのIDの取出し
			 */
			switch (tstat & TS_WAIT_MASK) {
			case TS_WAIT_SLP:
				pk_rtsk->tskwait = TTW_SLP;
				break;
			case TS_WAIT_DLY:
				pk_rtsk->tskwait = TTW_DLY;
				break;
			case TS_WAIT_SEM:
				pk_rtsk->tskwait = TTW_SEM;
				pk_rtsk->wobjid = SEMID(((WINFO_SEM *)
					  (p_tcb->p_winfo))->p_semcb);
				break;
			case TS_WAIT_FLG:
				pk_rtsk->tskwait = TTW_FLG;
				pk_rtsk->wobjid = FLGID(((WINFO_FLG *)
					  (p_tcb->p_winfo))->p_flgcb);
				break;
			case TS_WAIT_SDTQ:
				pk_rtsk->tskwait = TTW_SDTQ;
				pk_rtsk->wobjid = DTQID(((WINFO_DTQ *)
					  (p_tcb->p_winfo))->p_dtqcb);
				break;
			case TS_WAIT_RDTQ:
				pk_rtsk->tskwait = TTW_RDTQ;
				pk_rtsk->wobjid = DTQID(((WINFO_DTQ *)
					  (p_tcb->p_winfo))->p_dtqcb);
				break;
			case TS_WAIT_SPDQ:
				pk_rtsk->tskwait = TTW_SPDQ;
				pk_rtsk->wobjid = PDQID(((WINFO_PDQ *)
					  (p_tcb->p_winfo))->p_pdqcb);
				break;
			case TS_WAIT_RPDQ:
				pk_rtsk->tskwait = TTW_RPDQ;
				pk_rtsk->wobjid = PDQID(((WINFO_PDQ *)
					  (p_tcb->p_winfo))->p_pdqcb);
				break;
			case TS_WAIT_MBX:
				pk_rtsk->tskwait = TTW_MBX;
				pk_rtsk->wobjid = MBXID(((WINFO_MBX *)
					  (p_tcb->p_winfo))->p_mbxcb);
				break;
			case TS_WAIT_MPF:
				pk_rtsk->tskwait = TTW_MPF;
				pk_rtsk->wobjid = MPFID(((WINFO_MPF *)
					  (p_tcb->p_winfo))->p_mpfcb);
				break;
			}

			/*
	 		 *  タイムアウトするまでの時間の取出し
			 */
			if (p_tcb->p_winfo->p_tmevtb != NULL) {
				pk_rtsk->lefttmo = (TMO) tmevt_lefttim
                                           (p_tcb->p_winfo->p_tmevtb);
			}
			else {
				pk_rtsk->lefttmo = TMO_FEVR;
			}
		}

		/*
 		 *  起床要求キューイング数の取出し
		 */
		pk_rtsk->wupcnt = p_tcb->wupque ? 1U : 0U;
	}

	/*
	 *  起動要求キューイング数の取出し
	 */
	pk_rtsk->actcnt = p_tcb->actque ? 1U : 0U;
	ercd = E_OK;
	t_unlock_cpu();

  error_exit:
	LOG_REF_TSK_LEAVE(ercd, pk_rtsk);
	return(ercd);
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.2. マクロを展開したAPIと呼び出す内部関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[A] ref_tsk

00 : ER
01 : ref_tsk(ID tskid, T_RTSK *pk_rtsk)
02 : {
03 : 	TCB		*p_tcb;
04 : 	uint_t	tstat;
05 : 	ER		ercd;
06 : 
07 :     if (sense_context() || t_sense_lock()) {
08 :         ercd = E_CTX;
09 :         goto error_exit;
10 :     }
11 :     if (!((TMIN_TSKID <= tskid && tskid <= tmax_tskid)
12 :                                     || tskid == TSK_SELF)) {
13 :         ercd = E_ID;
14 :         goto error_exit;
15 :     }
16 :     p_tcb = ((tskid) == TSK_SELF ? p_runtsk
17 :                     : (&(tcb_table[((uint_t)((tskid) - TMIN_TSKID))])));
18 : 
19 : 	 t_lock_cpu();
20 : 	 tstat = p_tcb->tstat;
21 : 	 if (p_tcb->tstat == TS_DORMANT) {
22 : 		/*
23 : 		 *  対象タスクが休止状態の場合
24 : 		 */
25 : 		pk_rtsk->tskstat = TTS_DMT;
26 : 	 }
27 : 	 else {
28 : 		/*
29 : 		 *  タスク状態の取出し
30 : 		 */
31 : 		if (((p_tcb->tstat) & TS_SUSPENDED) != 0U) {
32 : 			if (((tstat) & TS_WAITING) != 0U) {
33 : 				pk_rtsk->tskstat = TTS_WAS;
34 : 			}
35 : 			else {
36 : 				pk_rtsk->tskstat = TTS_SUS;
37 : 			}
38 : 		}
39 : 		else if (((tstat) & TS_WAITING) != 0U) {
40 : 			pk_rtsk->tskstat = TTS_WAI;
41 : 		}
42 : 		else if (p_tcb == p_runtsk) {
43 : 			pk_rtsk->tskstat = TTS_RUN;
44 : 		}
45 : 		else {
46 : 			pk_rtsk->tskstat = TTS_RDY;
47 : 		}
48 : 
49 : 		/*
50 : 		 *  現在優先度とベース優先度の取出し
51 : 		 */
52 : 		pk_rtsk->tskpri = (PRI)(p_tcb->priority) + TMIN_TPRI;
53 : 		pk_rtsk->tskbpri = (PRI)(p_tcb->priority) + TMIN_TPRI;
54 : 
55 : 		if (((tstat) & TS_WAITING) != 0U) {
56 : 		     /*
57 : 	 	      *  待ち要因と待ち対象のオブジェクトのIDの取出し
58 : 		      */
59 : 			switch (tstat & TS_WAIT_MASK) {
60 : 			case TS_WAIT_SLP:
61 : 				pk_rtsk->tskwait = TTW_SLP;
62 : 				break;
63 : 			case TS_WAIT_DLY:
64 : 				pk_rtsk->tskwait = TTW_DLY;
65 : 				break;
66 : 			case TS_WAIT_SEM:
67 : 				pk_rtsk->tskwait = TTW_SEM;
68 : 				pk_rtsk->wobjid = ((ID)(((((WINFO_SEM
69 :      *)(p_tcb->p_winfo))->p_semcb) - semcb_table) + TMIN_SEMID));
70 : 				break;
71 : 			case TS_WAIT_FLG:
72 : 				pk_rtsk->tskwait = TTW_FLG;
73 : 				pk_rtsk->wobjid = ((ID)(((((WINFO_FLG
74 :      *)(p_tcb->p_winfo))->p_flgcb) - flgcb_table) + TMIN_FLGID));
75 : 				break;
76 : 			case TS_WAIT_SDTQ:
77 : 				pk_rtsk->tskwait = TTW_SDTQ;
78 : 				pk_rtsk->wobjid = ((ID)(((((WINFO_DTQ
79 :     *)(p_tcb->p_winfo))->p_dtqcb)) - dtqcb_table) + TMIN_DTQID));
80 : 				break;
81 : 			case TS_WAIT_RDTQ:
82 : 				pk_rtsk->tskwait = TTW_RDTQ;
83 : 				pk_rtsk->wobjid = ((ID)(((((WINFO_DTQ
84 :     *)(p_tcb->p_winfo))->p_dtqcb)) - dtqcb_table) + TMIN_DTQID));
85 : 				break;
86 : 			case TS_WAIT_SPDQ:
87 : 				pk_rtsk->tskwait = TTW_SPDQ;
88 : 				pk_rtsk->wobjid = ((ID)(((((WINFO_PDQ
89 :      *)(p_tcb->p_winfo))->p_pdqcb) - pdqcb_table) + TMIN_PDQID));
90 : 				break;
91 : 			case TS_WAIT_RPDQ:
92 : 				pk_rtsk->tskwait = TTW_RPDQ;
93 : 				pk_rtsk->wobjid = ((ID)(((((WINFO_PDQ
94 :      *)(p_tcb->p_winfo))->p_pdqcb) - pdqcb_table) + TMIN_PDQID));
95 : 				break;
96 : 			case TS_WAIT_MBX:
97 : 				pk_rtsk->tskwait = TTW_MBX;
98 : 				pk_rtsk->wobjid = ((ID)(((((WINFO_MBX
99 :      *)(p_tcb->p_winfo))->p_mbxcb) - mbxcb_table) + TMIN_MBXID));
100: 				break;
101: 			case TS_WAIT_MPF:
102: 				pk_rtsk->tskwait = TTW_MPF;
103: 				pk_rtsk->wobjid = ((ID)(((((WINFO_MPF
104:      *)(p_tcb->p_winfo))->p_mpfcb) - mpfcb_table) + TMIN_MPFID));
105: 				break;
106: 			}
107: 
108: 			/*
109: 	 		 *  タイムアウトするまでの時間の取出し
110: 			 */
111: 			if (p_tcb->p_winfo->p_tmevtb != NULL) {
112: 				pk_rtsk->lefttmo
113: 		      = (TMO) tmevt_lefttim(p_tcb->p_winfo->p_tmevtb);
114: 			}
115: 			else {
116: 				pk_rtsk->lefttmo = TMO_FEVR;
117: 			}
118: 		}
119: 
120: 		/*
121: 		 *  起床要求キューイング数の取出し
122: 		 */
123: 		pk_rtsk->wupcnt = p_tcb->wupque ? 1U : 0U;
124: 	}
125: 
126: 	/*
127: 	 *  起動要求キューイング数の取出し
128: 	 */
129: 	pk_rtsk->actcnt = p_tcb->actque ? 1U : 0U;
130: 	ercd = E_OK;
131: 	t_unlock_cpu();
132: 
133:   error_exit:
134: 	return(ercd);
135: }

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.3. 条件式
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(A1) 07 : sense_context()
(A2) 07 : t_sense_lock()
(A3) 11 : TMIN_TSKID <= tskid
(A4) 11 : tskid <= tmax_tskid
(A5) 12 : tskid == TSK_SELF
(A6) 16 : (tskid) == TSK_SELF
(A7) 21 : p_tcb->tstat == TS_DORMANT
(A8) 31 : ((p_tcb->tstat) & TS_SUSPENDED) != 0U
(A9) 32 : ((tstat) & TS_WAITING) != 0U
(A10)39 : ((tstat) & TS_WAITING) != 0U
(A11)42 : p_tcb == p_runtsk
(A12)55 : ((tstat) & TS_WAITING) != 0U
(A13)60 : case TS_WAIT_SLP:
(A14)63 : case TS_WAIT_DLY:
(A15)66 : case TS_WAIT_SEM:
(A16)71 : case TS_WAIT_FLG:
(A17)76 : case TS_WAIT_SDTQ:
(A18)81 : case TS_WAIT_RDTQ:
(A19)86 : case TS_WAIT_SPDQ:
(A20)91 : case TS_WAIT_RPDQ:
(A21)96 : case TS_WAIT_MBX:
(A22)101: case TS_WAIT_MPF:
(A23)111: p_tcb->p_winfo->p_tmevtb != NULL
(A24)123: p_tcb->wupque
(A25)129: p_tcb->actque

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.4. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

         (A1)(A2)(A3)(A4)(A5)(A6)(A7)(A8)(A9)(A10)(A11)(A12)(A13)(A14)(A15)(A16)(A17)(A18)(A19)(A20)(A21)(A22)(A23)(A24)(A25)
(a-1)     T  D/F  D   D   D   D   D   D   D   D    D    D    D    D    D    D    D    D    D    D    D    D    D    D    D
(a-2)     F   T   D   D   D   D   D   D   D   D    D    D    D    D    D    D    D    D    D    D    D    D    D    D    D
(b-1)     F   F   F  D/T  F   D   D   D   D   D    D    D    D    D    D    D    D    D    D    D    D    D    D    D    D
(b-2)     F   F   T   F   F   D   D   D   D   D    D    D    D    D    D    D    D    D    D    D    D    D    D    D    D
(c-1)     F   F   T   T  D/F  F   F   F   D   F    T    F    D    D    D    D    D    D    D    D    D    D    D    F    F
(c-2)     F   F   T   T  D/F  F   F   F   D   F    F    F    D    D    D    D    D    D    D    D    D    D    D    F    F
(c-3-1)   F   F   T   T  D/F  F   F   F   D   T    D    T    T   D/F  D/F  D/F  D/F  D/F  D/F  D/F  D/F  D/F   F    F    F
(c-3-2)   F   F   T   T  D/F  F   F   F   D   T    D    T    F    T   D/F  D/F  D/F  D/F  D/F  D/F  D/F  D/F   T    F    F
(c-3-3)   F   F   T   T  D/F  F   F   F   D   T    D    T    F    F    T   D/F  D/F  D/F  D/F  D/F  D/F  D/F   F    F    F
(c-3-4)   F   F   T   T  D/F  F   F   F   D   T    D    T    F    F    F    T   D/F  D/F  D/F  D/F  D/F  D/F   F    F    F
(c-3-5)   F   F   T   T  D/F  F   F   F   D   T    D    T    F    F    F    F    T   D/F  D/F  D/F  D/F  D/F   F    F    F
(c-3-6)   F   F   T   T  D/F  F   F   F   D   T    D    T    F    F    F    F    F    T   D/F  D/F  D/F  D/F   F    F    F
(c-3-7)   F   F   T   T  D/F  F   F   F   D   T    D    T    F    F    F    F    F    F    T   D/F  D/F  D/F   F    F    F
(c-3-8)   F   F   T   T  D/F  F   F   F   D   T    D    T    F    F    F    F    F    F    F    T   D/F  D/F   F    F    F
(c-3-9)   F   F   T   T  D/F  F   F   F   D   T    D    T    F    F    F    F    F    F    F    F    T   D/F   F    F    F
(c-3-10)  F   F   T   T  D/F  F   F   F   D   T    D    T    F    F    F    F    F    F    F    F    F    T    F    F    F
(c-4-1)   F   F   T   T  D/F  F   F   F   D   T    D    T    F    F    T   D/F  D/F  D/F  D/F  D/F  D/F  D/F   T    F    F
(c-4-2)   F   F   T   T  D/F  F   F   F   D   T    D    T    F    F    F    T   D/F  D/F  D/F  D/F  D/F  D/F   T    F    F
(c-4-3)   F   F   T   T  D/F  F   F   F   D   T    D    T    F    F    F    F    T   D/F  D/F  D/F  D/F  D/F   T    F    F
(c-4-4)   F   F   T   T  D/F  F   F   F   D   T    D    T    F    F    F    F    F    T   D/F  D/F  D/F  D/F   T    F    F
(c-4-5)   F   F   T   T  D/F  F   F   F   D   T    D    T    F    F    F    F    F    F    T   D/F  D/F  D/F   T    F    F
(c-4-6)   F   F   T   T  D/F  F   F   F   D   T    D    T    F    F    F    F    F    F    F    T   D/F  D/F   T    F    F
(c-4-7)   F   F   T   T  D/F  F   F   F   D   T    D    T    F    F    F    F    F    F    F    F    T   D/F   T    F    F
(c-4-8)   F   F   T   T  D/F  F   F   F   D   T    D    T    F    F    F    F    F    F    F    F    F    T    T    F    F
(c-5)     F   F   T   T  D/F  F   F   T   F   D    D    F    D    D    D    D    D    D    D    D    D    D    D    F    F
(c-6-1)   F   F   T   T  D/F  F   F   T   T   D    D    T    T   D/F  D/F  D/F  D/F  D/F  D/F  D/F  D/F  D/F   F    F    F
(c-6-2)   F   F   T   T  D/F  F   F   T   T   D    D    T    F    T   D/F  D/F  D/F  D/F  D/F  D/F  D/F  D/F   T    F    F
(c-6-3)   F   F   T   T  D/F  F   F   T   T   D    D    T    F    F    T   D/F  D/F  D/F  D/F  D/F  D/F  D/F   F    F    F
(c-6-4)   F   F   T   T  D/F  F   F   T   T   D    D    T    F    F    F    T   D/F  D/F  D/F  D/F  D/F  D/F   F    F    F
(c-6-5)   F   F   T   T  D/F  F   F   T   T   D    D    T    F    F    F    F    T   D/F  D/F  D/F  D/F  D/F   F    F    F
(c-6-6)   F   F   T   T  D/F  F   F   T   T   D    D    T    F    F    F    F    F    T   D/F  D/F  D/F  D/F   F    F    F
(c-6-7)   F   F   T   T  D/F  F   F   T   T   D    D    T    F    F    F    F    F    F    T   D/F  D/F  D/F   F    F    F
(c-6-8)   F   F   T   T  D/F  F   F   T   T   D    D    T    F    F    F    F    F    F    F    T   D/F  D/F   F    F    F
(c-6-9)   F   F   T   T  D/F  F   F   T   T   D    D    T    F    F    F    F    F    F    F    F    T   D/F   F    F    F
(c-6-10)  F   F   T   T  D/F  F   F   T   T   D    D    T    F    F    F    F    F    F    F    F    F    T    F    F    F
(c-7)     F   F   T   T  D/F  F   T   D   D   D    D    D    D    D    D    D    D    D    D    D    D    D    D    D    F
(c-8)     F   F   T   T  D/F  F   F   F   D   F    F    F    D    D    D    D    D    D    D    D    D    D    D    T    F
(c-9)     F   F   T   T  D/F  F   F   F   D   F    F    F    D    D    D    D    D    D    D    D    D    D    D    F    T
(d)       F   F   F  D/T  T   T   F   F   D   F    T    F    D    D    D    D    D    D    D    D    D    D    D    F    F
-----------------------------------------------------------------------------------------------------------------------------
網羅      O   O   O   O   O   O   O   O   O   O    O    O    O    O    O    O    O    O    O    O    O    X    O    O    O

【備考】
・正常な待ち状態の場合(A22)がFとなることはないため，(A22)の条件式は網羅
  できない．

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

3. ホワイトボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
必要なし．


以上．
