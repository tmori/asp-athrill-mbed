
	tsnd_dtq テストシート

----------------------------------------------------------------------
 TTSP
     TOPPERS Test Suite Package

 Copyright (C) 2009-2011 by Center for Embedded Computing Systems
             Graduate School of Information Science, Nagoya Univ., JAPAN
 Copyright (C) 2009-2011 by Digital Craft Inc.
 Copyright (C) 2009-2011 by NEC Communication Systems, Ltd.
 Copyright (C) 2009-2011 by FUJISOFT INCORPORATED
 Copyright (C) 2009-2010 by Mitsuhiro Matsuura

 上記著作権者は，以下の (1)〜(3) の条件を満たす場合に限り，本ドキュメ
 ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
     および下記の無保証規定が，そのままの形でドキュメント中に含まれて
     いること．
 (2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
     を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
     ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
     りではない．
 (3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
     からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
     本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
     く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

 本ドキュメントは，無保証で提供されているものである．上記著作権者およ
 びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
 る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
 により直接的または間接的に生じたいかなる損害に関しても，その責任を負
 わない．

 $Id: tsnd_dtq.txt 2 2012-05-09 02:23:52Z nces-shigihara $
----------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

0. API仕様

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

snd_dtq		データキューへの送信〔T〕
psnd_dtq	データキューへの送信（ポーリング）〔T〕
ipsnd_dtq	データキューへの送信（ポーリング）〔I〕
tsnd_dtq	データキューへの送信（タイムアウト付き）〔T〕

【C言語API】
	ER ercd = snd_dtq(ID dtqid, intptr_t data)
	ER ercd = psnd_dtq(ID dtqid, intptr_t data)
	ER ercd = ipsnd_dtq(ID dtqid, intptr_t data)
	ER ercd = tsnd_dtq(ID dtqid, intptr_t data, TMO tmout)

【パラメータ】
	ID			dtqid		対象データキューのID番号
	intptr_t	data		送信データ
	TMO			tmout		タイムアウト時間（tsnd_dtqの場合）

【リターンパラメータ】
	ER			ercd		正常終了（E_OK）またはエラーコード

【エラーコード】
	E_CTX			コンテキストエラー（非タスクコンテキストからの呼出
					し：ipsnd_dtqを除く，タスクコンテキストからの呼出し：
					ipsnd_dtqの場合，CPUロック状態からの呼出し，ディス
					パッチ保留状態からの呼出し：snd_dtqとtsnd_dtqの場合）
	E_NOSPT			未サポート機能（制約タスクからの呼出し：snd_dtqと
					tsnd_dtqの場合）
	E_ID			不正ID番号（dtqidが不正）
	E_PAR			パラメータエラー（tmoutが不正：tsnd_dtqの場合）
	E_NOEXS〔D〕	オブジェクト未登録（対象データキューが未登録）
	E_OACV〔P〕		オブジェクトアクセス違反（対象データキューに対する
					通常操作1が許可されていない：ipsnd_dtqを除く）
	E_TMOUT			ポーリング失敗またはタイムアウト（snd_dtqを除く）
	E_RLWAI			待ち禁止状態または待ち状態の強制解除（snd_dtqと
					tsnd_dtqの場合）
	E_DLT			待ちオブジェクトの削除または再初期化（snd_dtqと
					tsnd_dtqの場合）

【機能】

dtqidで指定したデータキュー（対象データキュー）に，dataで指定したデータ
を送信する．具体的な振舞いは以下の通り．

対象データキューの受信待ち行列にタスクが存在する場合には，受信待ち行列
の先頭のタスクが，dataで指定したデータを受信し，待ち解除される．待ち解
除されたタスクには，待ち状態となったサービスコールからE_OKが返る．

対象データキューの受信待ち行列にタスクが存在せず，データキュー管理領域
にデータを格納するスペースがある場合には，dataで指定したデータが，FIFO
順でデータキュー管理領域に格納される．

対象データキューの受信待ち行列にタスクが存在せず，データキュー管理領域
にデータを格納するスペースがない場合には，自タスクはデータキューへの送
信待ち状態となり，対象データキューの送信待ち行列につながれる．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

１．仕様ベースのブラックボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.1. エラー条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(a) ディスパッチ保留状態で呼出す場合．

    (a-1) 非タスクコンテキストから呼び出して，E_CTXエラーが返ること．

    (a-2) CPUロック状態で呼び出して，E_CTXエラーが返ること．

    (a-3) 割込み優先度マスクが全解除でない状態で呼び出して，
          E_CTXエラーが返ること．

    (a-4) ディスパッチ禁止状態で呼び出して，E_CTXエラーが返ること．

(b) dtqidが不正の時にE_IDが返ること．

    (b-1) dtqidが許容される最小値-1(=0)の時にE_IDが返ること．

    (b-2) dtqidが許容される最大値+1(TNUM_DTQID+1)の時にE_IDが返ること．

(c) tmoutが不正(TMO_FEVR-1)の時にE_PARが返ること．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.2. 正常条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(d) 待ち状態を強制解除の時にE_RLWAIエラーが返ること．

(e) 待ち状態を再初期化の時にE_DLTエラーが返ること．

(f) 待ち状態が解除された時にE_OKが返ること．

(g) tmoutにTMO_POLを指定する場合．

    (g-1) 対象データキューの受信待ち行列にタスクが存在せず，
          データキュー管理領域にデータを格納するスペースがある場合，
          dataで指定したデータが，FIFO順でデータキュー管理領域に
          格納されること．(格納数は3)

    (g-2) 対象データキューの受信待ち行列にタスクが存在せず，
          データキュー管理領域にデータを格納するスペースがない場合，
          ポーリングに失敗し，E_TMOUTが返ること．(格納数は0)

(h) tmoutにTMO_FEVRを指定する場合．

    (h-1) 対象データキューの受信待ち行列にタスクが存在せず，
          データキュー管理領域にデータを格納するスペースがある場合，
          dataで指定したデータが，FIFO順でデータキュー管理領域に
          格納されること．(格納数は3)

    (h-2) 対象データキューの受信待ち行列にタスクが存在せず，
          データキュー管理領域にデータを格納するスペースがない場合，
          永遠待ちになること．(格納数は0)

(i) tmoutに正常なタイムアウト時間(3)を指定する場合．

    (i-1) 対象データキューの受信待ち行列にタスクが存在する場合，受信待
          ち行列の先頭のタスクが，dataで指定したデータを受信し，待ち解
          除されること．(対象タスクとは，待ちタスクの待ち解除されたタ
          スクのことを示す．)

          (i-1-1) 待ちタスクが1つの場合．(格納数は0)

                  (i-1-1-1) 対象タスクの優先度が，実行状態のタスクより
                            い場合，実行状態になること．

                  (i-1-1-2) 対象タスクの優先度が実行状態のタスクより
                            低い場合，実行可能状態となり，同じ優先度の
                            タスクの最後につながれること．

                  (i-1-1-3) 対象タスクの優先度が実行状態のタスクと同じ
                            場合，実行可能状態となり，同じ優先度の
                            タスクの最後につながれること．

                  (i-1-1-4) 対象タスクが，二重待ち状態の場合，
                            強制待ちとなること．

          (i-1-2) 待ちタスクが2つの場合．(格納数は3)

                  (i-1-2-1) 対象タスクの優先度が，実行状態のタスクより
                            高い場合，実行状態になること．

                  (i-1-2-2) 対象タスクの優先度が実行状態のタスクより
                            低い場合，実行可能状態となり，同じ優先度の
                            タスクの最後につながれること．

                  (i-1-2-3) 対象タスクの優先度が実行状態のタスクと同じ
                            場合，実行可能状態となり，同じ優先度の
                            タスクの最後につながれること．

                  (i-1-2-4) 対象タスクが，二重待ち状態の場合，
                            強制待ちとなること．
   
    (i-2) 対象データキューの受信待ち行列にタスクが存在しない場合．

          (i-2-1) データキュー管理領域にデータを格納するスペースがない
                  場合，自タスクはデータキューへの送信待ち状態となり，
                  対象データキューの送信待ち行列につながれること．

                  (i-2-1-1) データキューの送信待ち行列がFIFO順の場合は，
                            新たに待ち状態に遷移したタスクは待ち行列の
                            最後につながれること．(格納数は0)

                            (i-2-1-1-1) 待ちタスクがない場合は，
                                        先頭につながれる状態になること．

                            (i-2-1-1-2) 優先度が中→低の順で待ちタスクが
                                        あり，自タスクの優先度が高の場合．

                            (i-2-1-1-3) 優先度が中→低の順で待ちタスクが
                                        あり，自タスクの優先度が中の場合．

                            (i-2-1-1-4) 優先度が高→中の順で待ちタスクが
                                        あり，自タスクの優先度が低の場合．

                  (i-2-1-2) データキューの送信待ち行列がタスク優先度順
                            の場合には，新たに待ち状態に遷移したタスク
                            がつながれること．(格納数は3，データ数は3)

                            (i-2-1-2-1) 待ちタスクがない場合は，
                                        先頭につながれる状態になること．

                            (i-2-1-2-2) 優先度が中→低の順で待ちタスク
                                        があり，自タスクの優先度が高の
                                        場合．

                            (i-2-1-2-3) 優先度が中→低の順で待ちタスクが
                                        あり，自タスクの優先度が中の
                                        場合．

                            (i-2-1-2-4) 優先度が高→中の順で待ちタスク
                                        があり，自タスクの優先度が低の
                                        場合．

          (i-2-2) データキュー管理領域にデータを格納するスペースがある
                  場合，dataで指定したデータが，FIFO順でデータキュー管
                  理領域に格納される状態になること．(格納数は3)

                  (i-2-2-1) データキューにデータがない場合．

                  (i-2-2-2) データキューにデータが2つ存在する場合，
                            新規データをデータキューに入れること．

    (i-3) タイムアウトの時に，E_TMOUTが返ること．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

2. ソースコードの条件網羅確認

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.1. ソースコード
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ER
tsnd_dtq(ID dtqid, intptr_t data, TMO tmout)
{
    DTQCB   *p_dtqcb;
    WINFO_DTQ winfo_dtq;
    TMEVTB  tmevtb;
    bool_t  reqdsp;
    ER      ercd;

    LOG_TSND_DTQ_ENTER(dtqid, data, tmout);
    CHECK_DISPATCH();
    CHECK_DTQID(dtqid);
    CHECK_TMOUT(tmout);
    p_dtqcb = get_dtqcb(dtqid);

    t_lock_cpu();
    if (send_data(p_dtqcb, data, &reqdsp)) {
        if (reqdsp) {
            dispatch();
        }
        ercd = E_OK;
    }
    else if (tmout == TMO_POL) {
        ercd = E_TMOUT;
    }
    else {
        winfo_dtq.data = data;
        p_runtsk->tstat = (TS_WAITING | TS_WAIT_SDTQ);
        wobj_make_wait_tmout((WOBJCB *) p_dtqcb, 
                    (WINFO_WOBJ *) &winfo_dtq,&tmevtb, tmout);
        dispatch();
        ercd = winfo_dtq.winfo.wercd;
    }
    t_unlock_cpu();

  error_exit:
    LOG_TSND_DTQ_LEAVE(ercd);
    return(ercd);
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.2. マクロを展開したAPIと呼び出す内部関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[A] tsnd_dtq

00 : ER
01 : tsnd_dtq(ID dtqid, intptr_t data, TMO tmout))
02 : {
03 :    DTQCB   *p_dtqcb;
04 :    WINFO_DTQ winfo_dtq;
05 :    TMEVTB  tmevtb;
06 :    bool_t  reqdsp;
07 :    ER      ercd;
08 :
09 :    if (sense_context() || t_sense_lock() || !dspflg) { 
10 :        ercd = E_CTX;
11 :        goto error_exit;
12 :    }
13 :
14 :    if (!(TMIN_DTQID <= (dtqid) && (dtqid) <= tmax_dtqid)) {
15 :            ercd = E_ID;
16 :        goto error_exit;
17 :    }
18 :
19 :    if (!(TMO_FEVR <= (tmout))) {
20 :        ercd = E_PAR;
21 :        goto error_exit;
22 :    }
23 :    p_dtqcb = &(dtqcb_table[(uint_t)((dtqid) - TMIN_DTQID)]);
24 :
25 :    t_lock_cpu();
26 :    if (send_data(p_dtqcb, data, &reqdsp)) {
27 :        if (reqdsp) {
28 :            dispatch();
29 :        }
30 :        ercd = E_OK;
31 :    }
32 :    else if (tmout == TMO_POL) {
33 :        ercd = E_TMOUT;
34 :    }
35 :    else {
36 :        winfo_dtq.data = data;
37 :        p_runtsk->tstat = (TS_WAITING | TS_WAIT_SDTQ);
38 :        wobj_make_wait_tmout((WOBJCB *) p_dtqcb, (WINFO_WOBJ *) &winfo_dtq,&tmevtb, tmout);
39 :        dispatch();
40 :        ercd = winfo_dtq.winfo.wercd;
41 :    }
42 :    t_unlock_cpu();
43 :
44 :  error_exit:
45 :    return(ercd);
46 : }

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.3. 条件式
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(A1) 09 : sense_context()
(A2) 09 : t_sense_lock()
(A3) 09 : !dspflg
(A4) 14 : TMIN_DTQID <= (dtqid)
(A5) 14 : (dtqid) <= tmax_dtqid
(A6) 19 : !(TMO_FEVR <= (tmout))
(A7) 26 : send_data(p_dtqcb, data, &reqdsp)
(A8) 27 : reqdsp
(A9) 32 : tmout == TMO_POL

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.4. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

            (A1) (A2) (A3) (A4) (A5) (A6) (A7) (A8) (A9)
(a-1)        T   D/F  D/F   D    D    D    D    D    D
(a-2)        F    T   D/F   D    D    D    D    D    D
(a-3)        F    F    T    D    D    D    D    D    D
(a-4)        F    F    T    D    D    D    D    D    D
(b-1)        F    F    F    F   D/T   D    D    D    D
(b-2)        F    F    F    T    F    D    D    D    D
(c)          F    F    F    T    T    T    D    D    D
(d)          F    F    F    T    T    F    F    D    F
(e)          F    F    F    T    T    F    F    D    F
(f)          F    F    F    T    T    F    F    D    F
(g-1)        F    F    F    T    T    F    T    F    D
(g-2)        F    F    F    T    T    F    F    D    T
(h-1)        F    F    F    T    T    F    T    F    D
(h-2)        F    F    F    T    T    F    F    D    F
(i-1-1-1)    F    F    F    T    T    F    T    T    D
(i-1-1-2)    F    F    F    T    T    F    T    F    D
(i-1-1-3)    F    F    F    T    T    F    T    F    D
(i-1-1-4)    F    F    F    T    T    F    T    F    D
(i-1-2-1)    F    F    F    T    T    F    T    T    D
(i-1-2-2)    F    F    F    T    T    F    T    F    D
(i-1-2-3)    F    F    F    T    T    F    T    F    D
(i-1-2-4)    F    F    F    T    T    F    T    F    D
(i-2-1-1-1)  F    F    F    T    T    F    F    D    F
(i-2-1-1-2)  F    F    F    T    T    F    F    D    F
(i-2-1-1-3)  F    F    F    T    T    F    F    D    F
(i-2-1-1-4)  F    F    F    T    T    F    F    D    F
(i-2-1-2-1)  F    F    F    T    T    F    F    D    F
(i-2-1-2-2)  F    F    F    T    T    F    F    D    F
(i-2-1-2-3)  F    F    F    T    T    F    F    D    F
(i-2-1-2-4)  F    F    F    T    T    F    F    D    F
(i-2-2-1)    F    F    F    T    T    F    T    F    D
(i-2-2-2)    F    F    F    T    T    F    T    F    D
(i-3)        F    F    F    T    T    F    F    D    F
--------------------------------------------------------
網羅         O    O    O    O    O    O    O    O    O


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

3. ホワイトボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
必要なし．



以上．
