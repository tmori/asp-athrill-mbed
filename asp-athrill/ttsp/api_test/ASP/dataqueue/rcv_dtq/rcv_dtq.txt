
	rcv_dtq テストシート

----------------------------------------------------------------------
 TTSP
     TOPPERS Test Suite Package

 Copyright (C) 2009-2011 by Center for Embedded Computing Systems
             Graduate School of Information Science, Nagoya Univ., JAPAN
 Copyright (C) 2009-2011 by Digital Craft Inc.
 Copyright (C) 2009-2011 by NEC Communication Systems, Ltd.
 Copyright (C) 2009-2011 by FUJISOFT INCORPORATED
 Copyright (C) 2009-2010 by Mitsuhiro Matsuura

 上記著作権者は，以下の (1)〜(3) の条件を満たす場合に限り，本ドキュメ
 ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
     および下記の無保証規定が，そのままの形でドキュメント中に含まれて
     いること．
 (2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
     を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
     ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
     りではない．
 (3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
     からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
     本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
     く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

 本ドキュメントは，無保証で提供されているものである．上記著作権者およ
 びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
 る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
 により直接的または間接的に生じたいかなる損害に関しても，その責任を負
 わない．

 $Id: rcv_dtq.txt 2 2012-05-09 02:23:52Z nces-shigihara $
----------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

0. API仕様

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

rcv_dtq		データキューからの受信〔T〕
prcv_dtq	データキューからの受信（ポーリング）〔T〕
trcv_dtq	データキューからの受信（タイムアウト付き）〔T〕

【C言語API】
	ER ercd = rcv_dtq(ID dtqid, intptr_t *p_data)
	ER ercd = prcv_dtq(ID dtqid, intptr_t *p_data)
	ER ercd = trcv_dtq(ID dtqid, intptr_t *p_data, TMO tmout)

【パラメータ】
	ID			dtqid		対象データキューのID番号
	intptr_t *	p_data		受信データを入れるメモリ領域へのポインタ
	TMO			tmout		タイムアウト時間（trcv_dtqの場合）

【リターンパラメータ】
	ER			ercd		正常終了（E_OK）またはエラーコード
	intptr_t	data		受信データ

【エラーコード】
	E_CTX			コンテキストエラー（非タスクコンテキストからの呼出
					し，CPUロック状態からの呼出し，ディスパッチ保留状態
					からの呼出し：prcv_dtqを除く）
	E_NOSPT			未サポート機能（制約タスクからの呼出し：prcv_dtqを除
					く）
	E_ID			不正ID番号（dtqidが不正）
	E_PAR			パラメータエラー（tmoutが不正：trcv_dtqの場合）
	E_NOEXS〔D〕	オブジェクト未登録（対象データキューが未登録）
	E_OACV〔P〕		オブジェクトアクセス違反（対象データキューに対する
					通常操作2が許可されていない）
	E_MACV〔P〕		メモリアクセス違反（p_dataが指すメモリ領域への書込
					みアクセスが許可されていない）
	E_TMOUT			ポーリング失敗またはタイムアウト（rcv_dtqを除く）
	E_RLWAI			待ち禁止状態または待ち状態の強制解除（prcv_dtqを除く）
	E_DLT			待ちオブジェクトの削除または再初期化（prcv_dtqを除く）

【機能】

dtqidで指定したデータキュー（対象データキュー）からデータを受信する．受
信したデータは，p_dataで指定したメモリ領域に返される．具体的な振舞いは
以下の通り．

対象データキューのデータキュー管理領域にデータが格納されている場合には，
データキュー管理領域の先頭に格納されたデータが取り出され，p_dataで指定
したメモリ領域に返される．また，送信待ち行列にタスクが存在する場合には，
送信待ち行列の先頭のタスクの送信データが，FIFO順でデータキュー管理領域
に格納され，そのタスクは待ち解除される．待ち解除されたタスクには，待ち
状態となったサービスコールからE_OKが返る．

対象データキューのデータキュー管理領域にデータが格納されておらず，送信
待ち行列にタスクが存在する場合には，送信待ち行列の先頭のタスクの送信デー
タが，p_dataで指定したメモリ領域に返される．送信待ち行列の先頭のタスク
は，待ち解除される．待ち解除されたタスクには，待ち状態となったサービス
コールからE_OKが返る．

対象データキューのデータキュー管理領域にデータが格納されておらず，送信
待ち行列にタスクが存在しない場合には，自タスクはデータキューからの受信
待ち状態となり，対象データキューの受信待ち行列につながれる．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

1. 仕様ベースのブラックボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.1. エラー条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(a) ディスパッチ保留状態で呼出す場合．

    (a-1) 非タスクコンテキストから呼び出して，E_CTXエラーが返ること．

    (a-2) CPUロック状態で呼び出して，E_CTXエラーが返ること．

    (a-3) 割込み優先度マスクが全解除でない状態で呼び出して，E_CTXエラー
          が返ること．

    (a-4) ディスパッチ禁止状態で呼び出して，E_CTXエラーが返ること．

(b) dtqidが不正の時にE_IDが返ること．

    (b-1) dtqidが許容される最小値-1(=0)の時にE_IDが返ること．

    (b-2) dtqidが許容される最大値+1(TNUM_DTQID+1)の時にE_IDが返ること．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.2. 正常条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(c) 待ち状態の強制解除の時に，E_RLWAIが返ること．

(d) 再初期化の時に，E_DLTが返ること．

(e) 待ち状態が解除された時にE_OKが返ること．

(f) 対象データキューのデータキュー管理領域にデータが格納されている場合
    ，データキュー管理領域の先頭に格納されたデータが取り出され，p_data
    で指定したメモリ領域に返されること．

    (f-1) 送信待ち行列にタスクが存在しない場合(データ管理領域に格納でき
          るデータ数を3とする)．

          (f-1-1) データの数が1つの場合．

          (f-1-2) データの数が2つの場合．

    (f-2) 送信待ち行列にタスクが存在する場合，送信待ち行列の先頭のタス
          クの送信データが，FIFO順でデータキュー管理領域に格納され，そ
          のタスクは待ち解除される．待ち解除されたタスクには，待ち状態
          となったサービスコールからE_OKが返ること．

          (f-2-1) 待ちタスクが1つの場合(データ管理領域に格納できるデー
                  タ数を3とする場合(データの数は3))．

                  (f-2-1-1) 対象タスクの優先度が実行状態のタスクより
                            高い場合，実行状態になること．

                  (f-2-1-2) 対象タスクの優先度が，実行状態のタスクより
                            低い場合，実行可能状態になり，同じ優先度の
                            タスクの最後につながれること．

                  (f-2-1-3) 対象タスクの優先度が実行状態のタスクと同じ
                            場合，実行可能状態となり，同じ優先度のタス
                            クの最後につながれること．

                  (f-2-1-4) 対象タスクが，二重待ち状態の場合，強制待ち
                            となること．

          (f-2-2) 待ちタスクが2つの場合(データ管理領域に格納できるデー
                  タ数を3とする場合(データの数は3))．

                  (f-2-2-1) 対象タスクの優先度が実行状態のタスクより
                            高い場合，実行状態になること．

                  (f-2-2-2) 対象タスクの優先度が，実行状態のタスクより
                            低い場合，実行可能状態になり，同じ優先度の
                            タスクの最後につながれること．

                  (f-2-2-3) 対象タスクの優先度が実行状態のタスクと同じ
                            場合，実行可能状態となり，同じ優先度のタス
                            クの最後につながれること．

                  (f-2-2-4) 対象タスクが，二重待ち状態の場合，強制待ち
                            となること．

(g) 対象データキューのデータキュー管理領域にデータが格納されていない場
    合．

    (g-1) 送信待ち行列にタスクが存在しない場合, 実行状態のタスクはデー
          タキューからの受信待ち状態となり，対象データキューの受信待ち
          行列につながれること．

          (g-1-1) データ管理領域に格納できるデータ数を0とする場合．

                  (g-1-1-1) 待ちタスクがない場合は，
                            先頭につながれる状態になること．

                  (g-1-1-2) 優先度が中→低の順で待ちタスクがあり，
                            自タスクの優先度が高の場合．

                  (g-1-1-3) 優先度が中→低の順で待ちタスクがあり，
                            自タスクの優先度が中の場合．

                  (g-1-1-4) 優先度が高→中の順で待ちタスクがあり，
                            自タスクの優先度が低の場合．

          (g-1-2) データ管理領域に格納できるデータ数を3とする場合．
                  (データ数は0)
                  ※データキューの属性を優先度順にしてもFIFOとなること

                  (g-1-2-1) 待ちタスクがない場合は，
                            先頭につながれる状態になること．

                  (g-1-2-2) 優先度が中→低の順で待ちタスクがあり，
                            自タスクの優先度が高の場合．

                  (g-1-2-3) 優先度が中→低の順で待ちタスクがあり，
                            自タスクの優先度が中の場合．

                  (g-1-2-4) 優先度が高→中の順で待ちタスクがあり，
                            自タスクの優先度が低の場合．

    (g-2) 送信待ち行列にタスクが存在する場合，送信待ち行列の先頭のタスク
          の送信データが，p_dataで指定したメモリ領域に返される．送信待ち
          行列の先頭のタスクは，待ち解除される．待ち解除されたタスクには
          ，待ち状態となったサービスコールからE_OKが返る．

          (g-2-1) 待ちタスクが1つの場合(データ管理領域に格納できるデー
                  タ数を0とする場合(データの数は0))．

                  (g-2-1-1) 対象タスクの優先度が実行状態のタスクより
                            高い場合，実行状態になること．

                  (g-2-1-2) 対象タスクの優先度が，実行状態のタスクより
                            低い場合，実行可能状態になり，同じ優先度の
                            タスクの最後につながれること．

                  (g-2-1-3) 対象タスクの優先度が実行状態の タスクと同じ
                            場合，実行可能状態となり，同じ優先度のタス
                            クの最後につながれること．

                  (g-2-1-4) 対象タスクが，二重待ち状態の場合，強制待ち
                            となること．

          (g-2-2) 待ちタスクが2つの場合(データ管理領域に格納できるデー
                  タ数を0とする場合(データの数は0))．

                  (g-2-2-1) 対象タスクの優先度が実行状態のタスクより
                            高い場合，実行状態になること．

                  (g-2-2-2) 対象タスクの優先度が，実行状態のタスクより
                            低い場合，実行可能状態になり，同じ優先度の
                            タスクの最後につながれること．

                  (g-2-2-3) 対象タスクの優先度が実行状態の タスクと同じ
                            場合，実行可能状態となり，同じ優先度のタス
                            クの最 後につながれること．

                  (g-2-2-4) 対象タスクが，二重待ち状態の場合，強制待ち
                            となること．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

2. ソースコードの条件網羅確認

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.1. ソースコード
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ER
rcv_dtq(ID dtqid, intptr_t *p_data)
{
	DTQCB	*p_dtqcb;
	WINFO_DTQ winfo_dtq;
	bool_t	reqdsp;
	ER		ercd;

	LOG_RCV_DTQ_ENTER(dtqid, p_data);
	CHECK_DISPATCH();
	CHECK_DTQID(dtqid);
	p_dtqcb = get_dtqcb(dtqid);

	t_lock_cpu();
	if (receive_data(p_dtqcb, p_data, &reqdsp)) {
		if (reqdsp) {
			dispatch();
		}
		ercd = E_OK;
	}
	else {
		p_runtsk->tstat = (TS_WAITING | TS_WAIT_RDTQ);
		make_wait(&(winfo_dtq.winfo));
		queue_insert_prev(&(p_dtqcb->rwait_queue), &(p_runtsk->task_queue));
		winfo_dtq.p_dtqcb = p_dtqcb;
		LOG_TSKSTAT(p_runtsk);
		dispatch();
		ercd = winfo_dtq.winfo.wercd;
		if (frcd == E_OK) {
			*p_data = winfo_dtq.data;
		}
	}
	t_unlock_cpu();

  error_exit:
	LOG_RCV_DTQ_LEAVE(ercd, *p_data);
	return(frcd);
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.2. マクロを展開したAPIと呼び出す内部関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[A] rcv_dtq

00 : ER
01 : rcv_dtq(ID dtqid, intptr_t *p_data)
02 : {
03 : 	DTQCB	*p_dtqcb;
04 : 	WINFO_DTQ winfo_dtq;
05 : 	bool_t	reqdsp;
06 : 	ER		ercd;
07 : 
08 : 	if (sense_contex() || t_sense_lock() || !dspflg) {
09 :        ercd = E_CTX;
10 :        goto error_exit;
11 :    }
12 :    if (!((TMIN_DTQID <= (dtqid) && (dtqid) <= tmax_dtqid))) {
13 :        ercd = E_ID;
14 :        goto error_exit;  
15 :    }
16 : 	p_dtqcb = &(dtqcb_table[(uint_t)((dtqid) - TMIN_DTQID)]);
17 : 
18 : 	t_lock_cpu();
19 : 	if (receive_data(p_dtqcb, p_data, &reqdsp)) {
20 : 		if (reqdsp) {
21 : 			dispatch();
22 : 		}
23 : 		ercd = E_OK;
24 : 	}
25 : 	else {
26 : 		p_runtsk->tstat = (TS_WAITING | TS_WAIT_RDTQ);
27 : 		make_wait(&(winfo_dtq.winfo));
28 : 		queue_insert_prev(&(p_dtqcb->rwait_queue), &(p_runtsk->task_queue));
29 : 		winfo_dtq.p_dtqcb = p_dtqcb;
30 : 		dispatch();
31 : 		ercd = winfo_dtq.winfo.wercd;
32 : 		if (ercd == E_OK) {
33 : 			*p_data = winfo_dtq.data;
34 : 		}
35 : 	}
36 : 	t_unlock_cpu();
37 : 
38 :   error_exit:
39 : 	LOG_RCV_DTQ_LEAVE(ercd, *p_data);
40 : 	return(ercd);
41 : }

[B] receive_data

00 : bool_t
01 : receive_data(DTQCB *p_dtqcb, intptr_t *p_data, bool_t *p_reqdsp)
02 : {
03 : 	TCB		*p_tcb;
04 : 	intptr_t data;
05 : 
06 : 	if (p_dtqcb->count > 0U) {
07 : 		dequeue_data(p_dtqcb, p_data);
08 : 		if (!queue_empty(&(p_dtqcb->swait_queue))) {
09 : 			p_tcb = (TCB *) queue_delete_next(&(p_dtqcb->swait_queue));
10 : 			data = ((WINFO_DTQ *)(p_tcb->p_winfo))->data;
11 : 			enqueue_data(p_dtqcb, data);
12 : 			*p_reqdsp = wait_complete(p_tcb);
13 : 		}
14 : 		else {
15 : 			*p_reqdsp = false;
16 : 		}
17 : 		return(true);
18 : 	}
19 : 	else if (!queue_empty(&(p_dtqcb->swait_queue))) {
20 : 		p_tcb = (TCB *) queue_delete_next(&(p_dtqcb->swait_queue));
21 : 		*p_data = ((WINFO_DTQ *)(p_tcb->p_winfo))->data;
22 : 		*p_reqdsp = wait_complete(p_tcb);
23 : 		return(true);
24 : 	}
25 : 	else {
26 : 		return(false);
27 : 	}
28 : }

[C]dequeue_data

00 : void
01 : dequeue_data(DTQCB *p_dtqcb, intptr_t *p_data)
02 : {
03 : 	*p_data = (p_dtqcb->p_dtqinib->p_dtqmb + p_dtqcb->head)->data;
04 : 	p_dtqcb->count--;
05 : 	p_dtqcb->head++;
06 : 	if (p_dtqcb->head >= p_dtqcb->p_dtqinib->dtqcnt) {
07 : 		p_dtqcb->head = 0U;
08 : 	}
09 : }

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.3. 条件式
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(A1) 08 : sense_context() 
(A2) 08 : t_sense_lock()
(A3) 08 : !dspflg
(A4) 12 : TMIN_DTQID <= (dtqid)
(A5) 12 : (dtqid) <= tmax_dtqid
(A6) 19 : receive_data(p_dtqcb, p_data, &reqdsp) 
(A7) 20 : reqdsp 
(A8) 32 : ercd == E_OK

(B1) 06 : p_dtqcb->count > 0U
(B2) 08 : !queue_empty(&(p_dtqcb->swait_queue))
(B3) 19 : !queue_empty(&(p_dtqcb->swait_queue))

(C1) 06 : p_dtqcb->head >= p_dtqcb->p_dtqinib->dtqcnt

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.4. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

           (A1) (A2) (A3) (A4) (A5) (A6) (A7) (A8) (B1) (B2) (B3) (C1)
(a-1)       T   D/F  D/F   D    D    D    D    D    D    D    D    D
(a-2)       F    T   D/F   D    D    D    D    D    D    D    D    D
(a-3)       F    F    T    D    D    D    D    D    D    D    D    D
(a-4)       F    F    T    D    D    D    D    D    D    D    D    D
(b-1)       F    F    F    F   D/T   D    D    D    D    D    D    D
(b-2)       F    F    F    T    F    D    D    D    D    D    D    D
(c)         F    F    F    T    T    F    D    F    F    D    F    D
(d)         F    F    F    T    T    F    D    F    F    D    F    D
(e)         F    F    F    T    T    F    D    T    F    D    F    D
(f-1-1)     F    F    F    T    T    T    F    D    T    F    D    F
(f-1-2)     F    F    F    T    T    T    F    D    T    F    D    F
(f-2-1-1)   F    F    F    T    T    T    T    D    T    T    D    F
(f-2-1-2)   F    F    F    T    T    T    F    D    T    T    D    F
(f-2-1-3)   F    F    F    T    T    T    F    D    T    T    D    F
(f-2-1-4)   F    F    F    T    T    T    F    D    T    T    D    F
(f-2-2-1)   F    F    F    T    T    T    T    D    T    T    D    F
(f-2-2-2)   F    F    F    T    T    T    F    D    T    T    D    F
(f-2-2-3)   F    F    F    T    T    T    F    D    T    T    D    F
(f-2-2-4)   F    F    F    T    T    T    F    D    T    T    D    F
(g-1-1-1)   F    F    F    T    T    F    D    D    F    D    F    D
(g-1-1-2)   F    F    F    T    T    F    D    D    F    D    F    D
(g-1-1-3)   F    F    F    T    T    F    D    D    F    D    F    D
(g-1-1-4)   F    F    F    T    T    F    D    D    F    D    F    D
(g-1-2-1)   F    F    F    T    T    F    D    D    F    D    F    D
(g-1-2-2)   F    F    F    T    T    F    D    D    F    D    F    D
(g-1-2-3)   F    F    F    T    T    F    D    D    F    D    F    D
(g-1-2-4)   F    F    F    T    T    F    D    D    F    D    F    D
(g-2-1-1)   F    F    F    T    T    T    T    D    F    D    T    D
(g-2-1-2)   F    F    F    T    T    T    F    D    F    D    T    D
(g-2-1-3)   F    F    F    T    T    T    F    D    F    D    T    D
(g-2-1-4)   F    F    F    T    T    T    F    D    F    D    T    D
(g-2-2-1)   F    F    F    T    T    T    T    D    F    D    T    D
(g-2-2-2)   F    F    F    T    T    T    F    D    F    D    T    D
(g-2-2-3)   F    F    F    T    T    T    F    D    F    D    T    D
(g-2-2-4)   F    F    F    T    T    T    F    D    F    D    T    D
----------------------------------------------------------------------
網羅        O    O    O    O    O    O    O    O    O    O    O    X

【備考】

・(C1)の網羅をさせるために，以下にホワイトボックステストを実施する．

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

3. ホワイトボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
3.1. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

           (A1) (A2) (A3) (A4) (A5) (A6) (A7) (A8) (B1) (B2) (B3) (C1)
(W_a)       F    F    F    T    T    T    F    D    T    F    D    T
----------------------------------------------------------------------
網羅        O    O    O    O    O    O    O    O    O    O    O    O

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
3.2. テストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(W_a) 以下の条件が成り立つ時．

  ・格納数1，データ数1の場合．
  ・送信待ちタスク，受信待ちタスクが無い場合．



以上．
