
	trcv_dtq テストシート

----------------------------------------------------------------------
 TTSP
     TOPPERS Test Suite Package

 Copyright (C) 2009-2011 by Center for Embedded Computing Systems
             Graduate School of Information Science, Nagoya Univ., JAPAN
 Copyright (C) 2009-2011 by Digital Craft Inc.
 Copyright (C) 2009-2011 by NEC Communication Systems, Ltd.
 Copyright (C) 2009-2011 by FUJISOFT INCORPORATED
 Copyright (C) 2009-2010 by Mitsuhiro Matsuura

 上記著作権者は，以下の (1)〜(3) の条件を満たす場合に限り，本ドキュメ
 ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
     および下記の無保証規定が，そのままの形でドキュメント中に含まれて
     いること．
 (2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
     を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
     ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
     りではない．
 (3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
     からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
     本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
     く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

 本ドキュメントは，無保証で提供されているものである．上記著作権者およ
 びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
 る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
 により直接的または間接的に生じたいかなる損害に関しても，その責任を負
 わない．

 $Id: trcv_dtq.txt 2 2012-05-09 02:23:52Z nces-shigihara $
----------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

0. API仕様

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

rcv_dtq		データキューからの受信〔T〕
prcv_dtq	データキューからの受信（ポーリング）〔T〕
trcv_dtq	データキューからの受信（タイムアウト付き）〔T〕

【C言語API】
	ER ercd = rcv_dtq(ID dtqid, intptr_t *p_data)
	ER ercd = prcv_dtq(ID dtqid, intptr_t *p_data)
	ER ercd = trcv_dtq(ID dtqid, intptr_t *p_data, TMO tmout)

【パラメータ】
	ID			dtqid		対象データキューのID番号
	intptr_t *	p_data		受信データを入れるメモリ領域へのポインタ
	TMO			tmout		タイムアウト時間（trcv_dtqの場合）

【リターンパラメータ】
	ER			ercd		正常終了（E_OK）またはエラーコード
	intptr_t	data		受信データ

【エラーコード】
	E_CTX			コンテキストエラー（非タスクコンテキストからの呼出
					し，CPUロック状態からの呼出し，ディスパッチ保留状態
					からの呼出し：prcv_dtqを除く）
	E_NOSPT			未サポート機能（制約タスクからの呼出し：prcv_dtqを除
					く）
	E_ID			不正ID番号（dtqidが不正）
	E_PAR			パラメータエラー（tmoutが不正：trcv_dtqの場合）
	E_NOEXS〔D〕	オブジェクト未登録（対象データキューが未登録）
	E_OACV〔P〕		オブジェクトアクセス違反（対象データキューに対する
					通常操作2が許可されていない）
	E_MACV〔P〕		メモリアクセス違反（p_dataが指すメモリ領域への書込
					みアクセスが許可されていない）
	E_TMOUT			ポーリング失敗またはタイムアウト（rcv_dtqを除く）
	E_RLWAI			待ち禁止状態または待ち状態の強制解除（prcv_dtqを除く）
	E_DLT			待ちオブジェクトの削除または再初期化（prcv_dtqを除く）

【機能】

dtqidで指定したデータキュー（対象データキュー）からデータを受信する．受
信したデータは，p_dataで指定したメモリ領域に返される．具体的な振舞いは
以下の通り．

対象データキューのデータキュー管理領域にデータが格納されている場合には，
データキュー管理領域の先頭に格納されたデータが取り出され，p_dataで指定
したメモリ領域に返される．また，送信待ち行列にタスクが存在する場合には，
送信待ち行列の先頭のタスクの送信データが，FIFO順でデータキュー管理領域
に格納され，そのタスクは待ち解除される．待ち解除されたタスクには，待ち
状態となったサービスコールからE_OKが返る．

対象データキューのデータキュー管理領域にデータが格納されておらず，送信
待ち行列にタスクが存在する場合には，送信待ち行列の先頭のタスクの送信デー
タが，p_dataで指定したメモリ領域に返される．送信待ち行列の先頭のタスク
は，待ち解除される．待ち解除されたタスクには，待ち状態となったサービス
コールからE_OKが返る．

対象データキューのデータキュー管理領域にデータが格納されておらず，送信
待ち行列にタスクが存在しない場合には，自タスクはデータキューからの受信
待ち状態となり，対象データキューの受信待ち行列につながれる．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

1. 仕様ベースのブラックボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.1. エラー条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(a) ディスパッチ保留状態で呼出す場合．

    (a-1) 非タスクコンテキストから呼び出して，E_CTXエラーが返ること．

    (a-2) CPUロック状態で呼び出して，E_CTXエラーが返ること．

    (a-3) 割込み優先度マスクが全解除でない状態で呼び出して，E_CTXエラー
          が返ること．

    (a-4) ディスパッチ禁止状態で呼び出して，E_CTXエラーが返ること．

(b) dtqidが不正の時にE_IDが返ること．

    (b-1) dtqidが許容される最小値-1(=0)の時にE_IDが返ること．

    (b-2) dtqidが許容される最大値+1(TNUM_DTQID+1)の時にE_IDが返ること．

(c) tmoutが不正の時に、E_PARが返ること．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.2. 正常条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(d) 待ち状態の強制解除の時に，E_RLWAIが返ること．

(e) 再初期化の時に，E_DLTが返ること．

(f) 待ち状態が解除された時にE_OKが返ること．

(g) tmoutにTMO_POLを指定する場合．

    (g-1) 対象データキューのデータキュー管理領域にデータが格納されてい
          ておらず，送信待ち行列にタスクが存在する場合には，
          送信待ち行列の先頭のタスクの送信データが，p_dataで指定した
          メモリ領域に返される．送信待ち行列の先頭のタスクは，待ち解除
          されること．

    (g-2) 対象データキューのデータキュー管理領域にデータが格納されてい
          ないし，送信待ち行列にタスクが存在しない場合，ポーリングに失
          敗し，E_TMOUTが返ること．

(h) tmoutにTMO_FEVRを指定する場合．

    (h-1) 対象データキューのデータキュー管理領域にデータが格納されて
          おらず，送信待ち行列にタスクが存在する場合には，
          送信待ち行列の先頭のタスクの送信データが，p_dataで指定した
          メモリ領域に返される．送信待ち行列の先頭のタスクは，待ち解除
          されること．

    (h-2) 対象データキューのデータキュー管理領域にデータが格納されてい
          ないし，送信待ち行列にタスクが存在しない場合，永久待ちとなる
          こと．

(i) tmoutに正常なタイムアウト時間(3)を指定する場合．

    (i-1) 対象データキューのデータキュー管理領域にデータが格納されて
          いる場合，データキュー管理領域の先頭に格納されたデータが取り
          出され，p_dataで指定したメモリ領域に返される．(格納数は3)

          (i-1-1) 送信待ち行列にタスクが存在しない場合

                  (i-1-1-1) データの数が1つの場合．

                  (i-1-1-2) データの数が2つの場合．

          (i-1-2) 送信待ち行列にタスクが存在する場合には，送信待ち行列
                  の先頭のタスクの送信データが，FIFO順でデータキュー
                  管理領域に格納され，そのタスクは待ち解除される．
                  待ち解除されたタスクには，待ち状態となったサービス
                  コールからE_OKが返ること．(データ数は3)
                  (対象タスクとは，待ちタスクの待ち解除されたタスクの
                  ことを示す．)

                  (i-1-2-1) 待ちタスクが1つの場合．

                            (i-1-2-1-1) 対象タスクの優先度が，実行状態
                                        のタスクより高い場合，実行状態
                                        になること．

                            (i-1-2-1-2) 対象タスクの優先度が実行状態の
                                        タスクより低い場合，実行可能
                                        状態となり，同じ優先度のタスク
                                        の最後につながれること．

                            (i-1-2-1-3) 対象タスクの優先度が実行状態の
                                        タスクと同じ場合，実行可能状態
                                        となり，同じ優先度のタスクの
                                        最後につながれること．

                            (i-1-2-1-4) 対象タスクが，二重待ち状態の
                                        場合，強制待ちとなること．

                  (i-1-2-2) 待ちタスクが2つの場合．

                            (i-1-2-2-1) 対象タスクの優先度が，実行状態
                                        のタスクより高い場合，実行状態
                                        になること．

                            (i-1-2-2-2) 対象タスクの優先度が実行状態の
                                        タスクより低い場合，実行可能
                                        状態となり，同じ優先度のタスク
                                        の最後につながれること．

                            (i-1-2-2-3) 対象タスクの優先度が実行状態の
                                        タスクと同じ場合，実行可能状態
                                        となり，同じ優先度のタスクの
                                        最後につながれること．

                            (i-1-2-2-4) 対象タスクが，二重待ち状態の
                                        場合，強制待ちとなること．

    (i-2) 対象データキューのデータキュー管理領域にデータが格納されて
          いない場合．

          (i-2-1) 送信待ち行列にタスクが存在しない場合, 実行状態の
                  タスクはデータキューからの受信待ち状態となり，
                  対象データキューの受信待ち行列につながれること．

                  (i-2-1-1) データ管理領域に格納できるデータ数を0とする
                            場合．

                            (i-2-1-1-1) 受信待ちタスクがない場合は，
                                        先頭につながれる状態になること．

                            (i-2-1-1-2) 優先度が中→低の順で待ちタスク
                                        があり，自タスクの優先度が高の
                                        場合．

                            (i-2-1-1-3) 優先度が中→低の順で待ちタスク
                                        があり，自タスクの優先度が中の
                                        場合．

                            (i-2-1-1-4) 優先度が高→中の順で待ちタスク
                                        があり，自タスクの優先度が低の
                                        場合．

                  (i-2-1-2) データ管理領域に格納できるデータ数を3とする
                            場合．(データ数は0)
                            ※データキューの属性を優先度順にしてもFIFO
                              となること

                            (i-2-1-2-1) 受信待ちタスクがない場合は，
                                        先頭につながれる状態になること．

                            (i-2-1-2-2) 優先度が中→低の順で待ちタスク
                                        があり，自タスクの優先度が高の
                                        場合．

                            (i-2-1-2-3) 優先度が中→低の順で待ちタスク
                                        があり，自タスクの優先度が中の
                                        場合．

                            (i-2-1-2-4) 優先度が高→中の順で待ちタスク
                                        があり，自タスクの優先度が低の
                                        場合．

          (i-2-2) 送信待ち行列にタスクが存在する場合，送信待ち行列の先
                  頭のタスクの送信データが，p_dataで指定したメモリ領域
                  に返される．送信待ち行列の先頭のタスクは，待ち解除さ
                  れる．待ち解除されたタスクには，待ち状態となったサー
                  ビスコールからE_OKが返る．(格納数は0)
                  (対象タスクとは，待ちタスクの待ち解除されたタスクの
                  ことを示す．)

                  (i-2-2-1) 待ちタスクが1つの場合．

                            (i-2-2-1-1) 対象タスクの優先度が，実行状態
                                        のタスクより高い場合，実行状態
                                        になること．

                            (i-2-2-1-2) 対象タスクの優先度が実行状態の
                                        タスクより低い場合，実行可能
                                        状態となり，同じ優先度のタスク
                                        の最後につながれること．

                            (i-2-2-1-3) 対象タスクの優先度が実行状態の
                                        タスクと同じ場合，実行可能状態
                                        となり，同じ優先度のタスクの
                                        最後につながれること．

                            (i-2-2-1-4) 対象タスクが，二重待ち状態の
                                        場合，強制待ちとなること．

                  (i-2-2-2) 待ちタスクが2つの場合．

                            (i-2-2-2-1) 対象タスクの優先度が，実行状態
                                        のタスクより高い場合，実行状態
                                        になること．

                            (i-2-2-2-2) 対象タスクの優先度が実行状態の
                                        タスクより低い場合，実行可能
                                        状態となり，同じ優先度のタスク
                                        の最後につながれること．

                            (i-2-2-2-3) 対象タスクの優先度が実行状態の
                                        タスクと同じ場合，実行可能状態
                                        となり，同じ優先度のタスクの
                                        最後につながれること．

                            (i-2-2-2-4) 対象タスクが，二重待ち状態の
                                        場合，強制待ちとなること．

    (i-3) タイムアウトの時に，E_TMOUTが返ること．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

2. ソースコードの条件網羅確認

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.1. ソースコード
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ER
trcv_dtq(jD dtqid, intptr_t *p_data, TMO tmout)
{
	DTQCB	*p_dtqcb;
	WINFO_DTQ winfo_dtq;
	TMEVTB	tmevtb;
	bool_t	reqdsp;
	ER		ercd;

	LOG_TRCV_DTQ_ENTER(dtqid, p_data, tmout);
	CHECK_DISPATCH();
	CHECK_DTQID(dtqid);
	CHECK_TMOUT(tmout);
	p_dtqcb = get_dtqcb(dtqid);

	t_lock_cpu();
	if (receive_data(p_dtqcb, p_data, &reqdsp)) {
		if (reqdsp) {
			dispatch();
		}
		ercd = E_OK;
	}
	else if (tmout == TMO_POL) {
		ercd = E_TMOUT;
	}
	else {
		p_runtsk->tstat = (TS_WAITING | TS_WAIT_RDTQ);
		make_wait_tmout(&(winfo_dtq.winfo), &tmevtb, tmout);
		queue_insert_prev(&(p_dtqcb->rwait_queue), &(p_runtsk->task_queue));
		winfo_dtq.p_dtqcb = p_dtqcb;
		LOG_TSKSTAT(p_runtsk);
		dispatch();
		ercd = winfo_dtq.winfo.wercd;
		if (ercd == E_OK) {
			*p_data = winfo_dtq.data;
		}
	}
	t_unlock_cpu();

	error_exit:
	LOG_TRCV_DTQ_LEAVE(ercd, *p_data);
	return(ercd);
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.2. マクロを展開したAPIと呼び出す内部関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[A] trcv_dtq

00 : ER
01 : trcv_dtq(jD dtqid, intptr_t *p_data, TMO tmout)
02 : {
03 : 	DTQCB	*p_dtqcb;
04 : 	WINFO_DTQ winfo_dtq;
05 : 	TMEVTB	tmevtb;
06 : 	bool_t	reqdsp;
07 : 	ER		ercd;
08 :
09 : 	if (sense_context() || t_sense_lock() || !dspflg) {
10 : 		ercd = E_CTX;
11 : 		goto error_exit;
12 : 	}
13 :
14 :
15 : 	if (!(TMIN_DTQID <= (dtqid) && (dtqid) <= tmax_dtqid)) {
16 : 		ercd = E_ID;
17 : 		goto error_exit;
18 : 	}
19 :
20 :
21 : 	if (!(TMO_FEVR > (tmout))) {
22 : 		ercd = E_PAR;
23 : 		goto error_exit;
24 : 	}
25 :
26 : 	p_dtqcb = &(dtqcb_table[(uint_t)((dtqid) - TMIN_DTQID)]);
27 :
28 : 	t_lock_cpu();
29 : 	if (receive_data(p_dtqcb, p_data, &reqdsp)) {
30 : 		if (reqdsp) {
31 : 			dispatch();
32 : 		}
33 : 		ercd = E_OK;
34 : 	}
35 : 	else if (tmout == TMO_POL) {
36 : 		ercd = E_TMOUT;
37 : 	}
38 : 	else {
39 : 		p_runtsk->tstat = (TS_WAITING | TS_WAIT_RDTQ);
40 : 		make_wait_tmout(&(winfo_dtq.winfo), &tmevtb, tmout);
41 : 		queue_insert_prev(&(p_dtqcb->rwait_queue), &(p_runtsk->task_queue));
42 : 		winfo_dtq.p_dtqcb = p_dtqcb;
43 : 		dispatch();
44 : 		ercd = winfo_dtq.winfo.wercd;
45 : 		if (ercd == E_OK) {
46 : 			*p_data = winfo_dtq.data;
47 : 		}
48 : 	}
49 : 	t_unlock_cpu();
50 :
51 :  error_exit:
52 :
53 : 	return(ercd);
54 : }

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.3. 条件式
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(A1)  09 : sense_context() 
(A2)  09 : t_sense_lock()
(A3)  09 : !dspflg
(A4)  15 : TMIN_DTQID <= (dtqid)
(A5)  15 : (dtqid) <= tmax_dtqid
(A6)  21 : !(TMO_FEVR <= (tmout))
(A7)  29 : receive_data(p_dtqcb, p_data, &reqdsp) 
(A8)  30 : reqdsp 
(A9)  31 : tmout == TMO_POL
(A10) 45 : ercd == E_OK

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.4. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

             (A1) (A2) (A3) (A4) (A5) (A6) (A7) (A8) (A9) (A10)
(a-1)         T   D/F  D/F   D    D    D    D    D    D    D
(a-2)         F    T   D/F   D    D    D    D    D    D    D
(a-3)         F    F    T    D    D    D    D    D    D    D
(a-4)         F    F    T    D    D    D    D    D    D    D
(b-1)         F    F    F    F   D/T   D    D    D    D    D
(b-2)         F    F    F    T    F    D    D    D    D    D
(c)           F    F    F    T    T    T    D    D    D    D
(d)           F    F    F    T    T    F    F    D    F    F
(e)           F    F    F    T    T    F    F    D    F    F
(f)           F    F    F    T    T    F    F    D    F    T
(g-1)         F    F    F    T    T    F    T    F    D    D
(g-2)         F    F    F    T    T    F    F    D    T    D
(h-1)         F    F    F    T    T    F    T    F    D    D
(h-2)         F    F    F    T    T    F    F    D    F    D
(i-1-1-1)     F    F    F    T    T    F    T    F    D    D
(i-1-1-2)     F    F    F    T    T    F    T    F    D    D
(i-1-2-1-1)   F    F    F    T    T    F    T    T    D    D
(i-1-2-1-2)   F    F    F    T    T    F    T    F    D    D
(i-1-2-1-3)   F    F    F    T    T    F    T    F    D    D
(i-1-2-1-4)   F    F    F    T    T    F    T    F    D    D
(i-1-2-2-1)   F    F    F    T    T    F    T    T    D    D
(i-1-2-2-2)   F    F    F    T    T    F    T    F    D    D
(i-1-2-2-3)   F    F    F    T    T    F    T    F    D    D
(i-1-2-2-4)   F    F    F    T    T    F    T    F    D    D
(i-2-1-1-1)   F    F    F    T    T    F    F    D    F    D
(i-2-1-1-2)   F    F    F    T    T    F    F    D    F    D
(i-2-1-1-3)   F    F    F    T    T    F    F    D    F    D
(i-2-1-1-4)   F    F    F    T    T    F    F    D    F    D
(i-2-1-2-1)   F    F    F    T    T    F    F    D    F    D
(i-2-1-2-2)   F    F    F    T    T    F    F    D    F    D
(i-2-1-2-3)   F    F    F    T    T    F    F    D    F    D
(i-2-1-2-4)   F    F    F    T    T    F    F    D    F    D
(i-2-2-1-1)   F    F    F    T    T    F    T    T    D    D
(i-2-2-1-2)   F    F    F    T    T    F    T    F    D    D
(i-2-2-1-3)   F    F    F    T    T    F    T    F    D    D
(i-2-2-1-4)   F    F    F    T    T    F    T    F    D    D
(i-2-2-2-1)   F    F    F    T    T    F    T    T    D    D
(i-2-2-2-2)   F    F    F    T    T    F    T    F    D    D
(i-2-2-2-3)   F    F    F    T    T    F    T    F    D    D
(i-2-2-2-4)   F    F    F    T    T    F    T    F    D    D
(i-3)         F    F    F    T    T    F    F    D    F    F
--------------------------------------------------------------
網羅          O    O    O    O    O    O    O    O    O    O


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

3. ホワイトボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
必要なし．



以上．
