
	fsnd_dtq テストシート

----------------------------------------------------------------------
 TTSP
     TOPPERS Test Suite Package

 Copyright (C) 2009-2011 by Center for Embedded Computing Systems
             Graduate School of Information Science, Nagoya Univ., JAPAN
 Copyright (C) 2009-2011 by Digital Craft Inc.
 Copyright (C) 2009-2011 by NEC Communication Systems, Ltd.
 Copyright (C) 2009-2011 by FUJISOFT INCORPORATED
 Copyright (C) 2009-2010 by Mitsuhiro Matsuura

 上記著作権者は，以下の (1)〜(3) の条件を満たす場合に限り，本ドキュメ
 ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
     および下記の無保証規定が，そのままの形でドキュメント中に含まれて
     いること．
 (2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
     を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
     ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
     りではない．
 (3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
     からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
     本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
     く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

 本ドキュメントは，無保証で提供されているものである．上記著作権者およ
 びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
 る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
 により直接的または間接的に生じたいかなる損害に関しても，その責任を負
 わない．

 $Id: fsnd_dtq.txt 2 2012-05-09 02:23:52Z nces-shigihara $
----------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

0. API仕様

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

fsnd_dtq データキューへの強制送信〔T〕
ifsnd_dtq データキューへの強制送信〔I〕

【C言語API】
    ER ercd = fsnd_dtq(ID dtqid, intptr_t data)
    ER ercd = ifsnd_dtq(ID dtqid, intptr_t data)

【パラメータ】
    ID         dtqid        対象データキューのID番号
    intptr_t   data         送信データ

【リターンパラメータ】
    ER         ercd         正常終了(E_OK)またはエラーコード

【エラーコード】
    E_CTX          コンテキストエラー(非タスクコンテキストからの呼出
                   し:fsnd_dtqの場合，タスクコンテキストからの呼出し:
                   ifsnd_dtqの場合，CPUロック状態からの呼出し)
    E_ID           不正ID番号(dtqidが不正)
    E_NOEXS〔D〕   オブジェクト未登録(対象データキューが未登録)
    E_OACV〔P〕    オブジェクトアクセス違反(対象データキューに対する
                   通常操作1が許可されていない:fsnd_dtqの場合)
    E_ILUSE        サービスコール不正使用(対象データキューのデータキュ
                   ー管理領域のサイズが0)

【機能】

dtqidで指定したデータキュー(対象データキュー)に，dataで指定したデータ
を強制送信する．具体的な振舞いは以下の通り．

対象データキューの受信待ち行列にタスクが存在する場合には，受信待ち行列
の先頭のタスクが，dataで指定したデータを受信し，待ち解除される．待ち解
除されたタスクには，待ち状態となったサービスコールからE_OKが返る．

対象データキューの受信待ち行列にタスクが存在せず，データキュー管理領域
にデータを格納するスペースがある場合には，dataで指定したデータが，FIFO
順でデータキュー管理領域に格納される．

対象データキューの受信待ち行列にタスクが存在せず，データキュー管理領域
にデータを格納するスペースがない場合には，データキュー管理領域の先頭に
格納されたデータを削除し，空いたスペースを用いて，dataで指定したデータ
が，FIFO順でデータキュー管理領域に格納される．

対象データキューのデータキュー管理領域のサイズが0の場合には，E_ILUSEエ
ラーとなる．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

１．仕様ベースのブラックボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.1. エラー条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(a) ディスパッチ保留状態で呼出す場合．

    (a-1) 非タスクコンテキストから呼び出して，E_CTXエラーが返ること．

    (a-2) CPUロック状態で呼び出して，E_CTXエラーが返ること．

(b) dtqidが不正の時にE_IDが返ること．

    (b-1) dtqidが許容される最小値-1(=0)の時にE_IDが返ること．

    (b-2) dtqidが許容される最大値+1(TNUM_DTQID+1)の時にE_IDが返ること．

(c) 対象データキューのデータキュー管理領域のサイズが0の場合にE_ILUSEが
    返ること．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.2. 正常条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(d) 対象データキューの受信待ち行列にタスクが存在する場合，受信待ち行列
    の先頭のタスクが，dataで指定したデータを受信し，待ち解除されること．
    (対象タスクとは，待ちタスクの待ち解除されたタスクのことを示す．)

    (d-1) 待ちタスクが1つの場合．(格納数は3)

          (d-1-1) 対象タスクの優先度が，実行状態のタスクより高い場合．

                  (d-1-1-1) 実行状態になること．

                  (d-1-1-2) ディスパッチ禁止状態の場合，
                            実行可能状態になること．

                  (d-1-1-3) 割込み優先度マスクが全解除でない場合，
                            実行可能状態になること．

          (d-1-2) 対象タスクの優先度が実行状態のタスクより低い場合，
                  実行可能状態となり，同じ優先度のタスクの最後に
                  つながれること．

          (d-1-3) 対象タスクの優先度が実行状態のタスクと同じ場合，
                  実行可能状態となり，同じ優先度のタスクの最後に
                  つながれること．

          (d-1-4) 対象タスクが，二重待ち状態の場合，
                  強制待ちとなること．

    (d-2) 待ちタスクが2つの場合．(格納数は3)

          (d-2-1) 対象タスクの優先度が，実行状態のタスクより高い場合．

                  (d-2-1-1) 実行状態になること．

                  (d-2-1-2) ディスパッチ禁止状態の場合，
                            実行可能状態になること．

                  (d-2-1-3) 割込み優先度マスクが全解除でない場合，
                            実行可能状態になること．

          (d-2-2) 対象タスクの優先度が実行状態のタスクより低い場合，
                  実行可能状態となり，同じ優先度のタスクの最後に
                  つながれること．

          (d-2-3) 対象タスクの優先度が実行状態のタスクと同じ場合，
                  実行可能状態となり，同じ優先度のタスクの最後に
                  つながれること．

          (d-2-4) 対象タスクが，二重待ち状態の場合，
                  強制待ちとなること．
   
(e) 対象データキューの受信待ち行列にタスクが存在しない場合．

    (e-1) データキュー管理領域にデータを格納するスペースがない場合，
          データキュー管理領域の先頭に格納されたデータを削除し，
          空いたスペースを用いて，dataで指定したデータが，FIFO順で
          データキュー管理領域に格納になること．

          (e-1-1) データキューの格納数が1でデータ数が1の場合．

          (e-1-2) データキューの格納数が3でデータ数が3の場合．

    (e-2) データキュー管理領域にデータを格納するスペースがある場合，
          dataで指定したデータが，FIFO順でデータキュー管理領域に
          格納される状態になること．(格納数は3)

          (e-2-1) データキューにデータがない場合．

          (e-2-2) データキューにデータが2つ存在する場合，
                  新規データをデータキューに入れること．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

2. ソースコードの条件網羅確認

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.1. ソースコード
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ER
fsnd_dtq(ID dtqid, intptr_t data)
{
    DTQCB   *p_dtqcb;   
    ER      ercd;

    LOG_FSND_DTQ_ENTER(dtqid, data);
    CHECK_TSKCTX_UNL();
    CHECK_DTQID(dtqid);
    p_dtqcb = get_dtqcb(dtqid);
    CHECK_ILUSE(p_dtqcb->p_dtqinib->dtqcnt > 0U);

    t_lock_cpu();
    if (force_send_data(p_dtqcb, data)) {
        dispatch();
    }
    ercd = E_OK;
    t_unlock_cpu();

  error_exit:
    LOG_FSND_DTQ_LEAVE(frcd);
    return(frcd);
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.2. マクロを展開したAPIと呼び出す内部関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[A] fsnd_dtq

00 : ER
01 : fsnd_dtq(ID dtqid, intptr_t data)
02 : {
03 :    DTQCB   *p_dtqcb;   
04 :    ER      ercd;
05 :    if (sense_context() || t_sense_lock()) {
06 :        ercd = E_CTX;
07 :        goto error_exit;
08 :    }
09 :    if (!(TMIN_DTQID <= (dtqid) && (dtqid) <= tmax_dtqid)){
10 :        ercd = E_ID;
11 :        goto error_exit;
12 :    }    
13 :    p_dtqcb = &(dtqcb_table[(uint_t)((dtqid) - TMIN_DTQID)]);
14 :    if (!(p_dtqcb->p_dtqinib->dtqcnt > 0U)) {
15 :        ercd = E_ILUSE;
16 :        goto error_exit;
17 :    }            
18 :
19 :    t_lock_cpu();
20 :    if (force_send_data(p_dtqcb, data)) {
21 :        dispatch();
22 :    }
23 :    ercd = E_OK;
24 :    t_unlock_cpu();
25 :
26 :  error_exit:
27 :    return(frcd);
28 : }

[B] force_send_data
00 : bool_t
01 : force_send_data(DTQCB *p_dtqcb, intptr_t data)
02 : {
03 :    TCB     *p_tcb;
04 : 
05 :    if (!queue_empty(&(p_dtqcb->rwait_queue))) {
06 :        p_tcb = (TCB *) queue_delete_next(&(p_dtqcb->rwait_queue));
07 :        ((WINFO_DTQ *)(p_tcb->p_winfo))->data = data;
08 :        return(wait_complete(p_tcb));
09 :    }
10 :    else {
11 :        force_enqueue_data(p_dtqcb, data);
12 :        return(false);
13 :    }
14 : }

[C] force_enqueue_data
00 : void
01 : force_enqueue_data(DTQCB *p_dtqcb, intptr_t data)
02 : {
03 : 	(p_dtqcb->p_dtqinib->p_dtqmb + p_dtqcb->tail)->data = data;
04 : 	p_dtqcb->tail++;
05 : 	if (p_dtqcb->tail >= p_dtqcb->p_dtqinib->dtqcnt) {
06 : 		p_dtqcb->tail = 0U;
07 : 	}
08 : 	if (p_dtqcb->count < p_dtqcb->p_dtqinib->dtqcnt) {
09 : 		p_dtqcb->count++;
10 : 	}
11 : 	else {
12 : 		p_dtqcb->head = p_dtqcb->tail;
13 : 	}
14 : }

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.3. 条件式
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(A1) 05 : sense_context()
(A2) 05 : t_sense_lock()
(A3) 09 : TMIN_DTQID <= (dtqid)
(A4) 09 : (dtqid) <= tmax_dtqid
(A5) 14 : !(p_dtqcb->p_dtqinib->dtqcnt > 0U)
(A6) 20 : force_send_data(p_dtqcb, data)

(B1) 05 : !queue_empty(&(p_dtqcb->rwait_queue))

(C1) 05 : p_dtqcb->tail >= p_dtqcb->p_dtqinib->dtqcnt
(C2) 08 : p_dtqcb->count < p_dtqcb->p_dtqinib->dtqcnt

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.4. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

           (A1) (A2) (A3) (A4) (A5) (A6) (B1) (C1) (C2)
(a-1)       T   D/F   D    D    D    D    D    D    D
(a-2)       F    T    D    D    D    D    D    D    D
(b-1)       F    F    F   D/T   D    D    D    D    D
(b-2)       F    F    T    F    D    D    D    D    D
(c)         F    F    T    T    T    D    D    D    D
(d-1-1-1)   F    F    T    T    F    T    T    D    D
(d-1-1-2)   F    F    T    T    F    F    T    D    D
(d-1-1-3)   F    F    T    T    F    F    T    D    D
(d-1-2)     F    F    T    T    F    F    T    D    D
(d-1-3)     F    F    T    T    F    F    T    D    D
(d-1-4)     F    F    T    T    F    F    T    D    D
(d-2-1-1)   F    F    T    T    F    T    T    D    D
(d-2-1-2)   F    F    T    T    F    F    T    D    D
(d-2-1-3)   F    F    T    T    F    F    T    D    D
(d-2-2)     F    F    T    T    F    F    T    D    D
(d-2-3)     F    F    T    T    F    F    T    D    D
(d-2-4)     F    F    T    T    F    F    T    D    D
(e-1-1)     F    F    T    T    F    F    F    T    F
(e-1-2)     F    F    T    T    F    F    F    F    F
(e-2-1)     F    F    T    T    F    F    F    F    T
(e-2-2)     F    F    T    T    F    F    F    T    T
-------------------------------------------------------
網羅        O    O    O    O    O    O    O    O    O


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

3. ホワイトボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
必要なし．



以上．
