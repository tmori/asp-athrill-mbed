
	snd_dtq テストシート

----------------------------------------------------------------------
 TTSP
     TOPPERS Test Suite Package

 Copyright (C) 2009-2011 by Center for Embedded Computing Systems
             Graduate School of Information Science, Nagoya Univ., JAPAN
 Copyright (C) 2009-2011 by Digital Craft Inc.
 Copyright (C) 2009-2011 by NEC Communication Systems, Ltd.
 Copyright (C) 2009-2011 by FUJISOFT INCORPORATED
 Copyright (C) 2009-2010 by Mitsuhiro Matsuura

 上記著作権者は，以下の (1)〜(3) の条件を満たす場合に限り，本ドキュメ
 ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
     および下記の無保証規定が，そのままの形でドキュメント中に含まれて
     いること．
 (2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
     を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
     ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
     りではない．
 (3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
     からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
     本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
     く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

 本ドキュメントは，無保証で提供されているものである．上記著作権者およ
 びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
 る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
 により直接的または間接的に生じたいかなる損害に関しても，その責任を負
 わない．

 $Id: snd_dtq.txt 2 2012-05-09 02:23:52Z nces-shigihara $
----------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

0. API仕様

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

snd_dtq		データキューへの送信〔T〕
psnd_dtq	データキューへの送信（ポーリング）〔T〕
ipsnd_dtq	データキューへの送信（ポーリング）〔I〕
tsnd_dtq	データキューへの送信（タイムアウト付き）〔T〕

【C言語API】
	ER ercd = snd_dtq(ID dtqid, intptr_t data)
	ER ercd = psnd_dtq(ID dtqid, intptr_t data)
	ER ercd = ipsnd_dtq(ID dtqid, intptr_t data)
	ER ercd = tsnd_dtq(ID dtqid, intptr_t data, TMO tmout)

【パラメータ】
	ID			dtqid		対象データキューのID番号
	intptr_t	data		送信データ
	TMO			tmout		タイムアウト時間（tsnd_dtqの場合）

【リターンパラメータ】
	ER			ercd		正常終了（E_OK）またはエラーコード

【エラーコード】
	E_CTX			コンテキストエラー（非タスクコンテキストからの呼出
					し：ipsnd_dtqを除く，タスクコンテキストからの呼出し：
					ipsnd_dtqの場合，CPUロック状態からの呼出し，ディス
					パッチ保留状態からの呼出し：snd_dtqとtsnd_dtqの場合）
	E_NOSPT			未サポート機能（制約タスクからの呼出し：snd_dtqと
					tsnd_dtqの場合）
	E_ID			不正ID番号（dtqidが不正）
	E_PAR			パラメータエラー（tmoutが不正：tsnd_dtqの場合）
	E_NOEXS〔D〕	オブジェクト未登録（対象データキューが未登録）
	E_OACV〔P〕		オブジェクトアクセス違反（対象データキューに対する
					通常操作1が許可されていない：ipsnd_dtqを除く）
	E_TMOUT			ポーリング失敗またはタイムアウト（snd_dtqを除く）
	E_RLWAI			待ち禁止状態または待ち状態の強制解除（snd_dtqと
					tsnd_dtqの場合）
	E_DLT			待ちオブジェクトの削除または再初期化（snd_dtqと
					tsnd_dtqの場合）

【機能】

dtqidで指定したデータキュー（対象データキュー）に，dataで指定したデータ
を送信する．具体的な振舞いは以下の通り．

対象データキューの受信待ち行列にタスクが存在する場合には，受信待ち行列
の先頭のタスクが，dataで指定したデータを受信し，待ち解除される．待ち解
除されたタスクには，待ち状態となったサービスコールからE_OKが返る．

対象データキューの受信待ち行列にタスクが存在せず，データキュー管理領域
にデータを格納するスペースがある場合には，dataで指定したデータが，FIFO
順でデータキュー管理領域に格納される．

対象データキューの受信待ち行列にタスクが存在せず，データキュー管理領域
にデータを格納するスペースがない場合には，自タスクはデータキューへの送
信待ち状態となり，対象データキューの送信待ち行列につながれる．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

1. 仕様ベースのブラックボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.1. エラー条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(a) ディスパッチ保留状態で呼出す場合．

    (a-1) 非タスクコンテキストから呼び出して，E_CTXエラーが返ること．

    (a-2) CPUロック状態で呼び出して，E_CTXエラーが返ること．

    (a-3) 割込み優先度マスクが全解除でない状態で呼び出して，
          E_CTXエラーが返ること．

    (a-4) ディスパッチ禁止状態で呼び出して，E_CTXエラーが返ること．

(b) dtqidが不正の時にE_IDが返ること．

    (b-1) dtqidが許容される最小値-1(=0)の時にE_IDが返ること．

    (b-2) dtqidが許容される最大値+1(TNUM_DTQID+1)の時にE_IDが返ること．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.2. 正常条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(c) 待ち状態を強制解除の時にE_RLWAIが返ること．

(d) 待ち状態を再初期化の時にE_DLTが返ること．

(e) 待ち状態が解除された時にE_OKが返ること．

(f) 対象データキューの受信待ち行列にタスクが存在する場合，受信待ち行列
    の先頭のタスクが，dataで指定したデータを受信し，待ち解除されること．
    (対象タスクとは，待ちタスクの待ち解除されたタスクのことを示す．)

    (f-1) 待ちタスクが1つの場合．(格納数は0)

          (f-1-1) 対象タスクの優先度が，実行状態のタスクより高い場合，
                  実行状態になること．

          (f-1-2) 対象タスクの優先度が実行状態のタスクより低い場合，
                  実行可能状態となり，同じ優先度のタスクの最後に
                  つながれること．

          (f-1-3) 対象タスクの優先度が実行状態のタスクと同じ場合，
                  実行可能状態となり，同じ優先度のタスクの最後に
                  つながれること．

          (f-1-4) 対象タスクが，二重待ち状態の場合，強制待ちとなること．

    (f-2) 待ちタスクが2つの場合．(格納数は3)

          (f-2-1) 対象タスクの優先度が，実行状態のタスクより高い場合，
                  実行状態になること．

          (f-2-2) 対象タスクの優先度が実行状態のタスクより低い場合，
                  実行可能状態となり，同じ優先度のタスクの最後に
                  つながれること．

          (f-2-3) 対象タスクの優先度が実行状態のタスクと同じ場合，
                  実行可能状態となり，同じ優先度のタスクの最後に
                  つながれること．

          (f-2-4) 対象タスクが，二重待ち状態の場合，強制待ちとなること．

(g) 対象データキューの受信待ち行列にタスクが存在しない場合．

    (g-1) データキュー管理領域にデータを格納するスペースがない場合，
          実行状態のタスクはデータキューへの送信待ち状態となり，
          対象データキューの送信待ち行列につながれる状態になること．

          (g-1-1) データキューの送信待ち行列がFIFO順の場合，実行状態の
                  タスクは待ち行列の最後につながれること．(格納数は0)

                  (g-1-1-1) 待ちタスクがない場合．

                  (g-1-1-2) 優先度が中→低の順で待ちタスクがあり，
                            実行状態のタスクの優先度が高の場合．

                  (g-1-1-3) 優先度が中→低の順で待ちタスクがあり，
                            実行状態のタスクの優先度が中の場合．

                  (g-1-1-4) 優先度が高→中の順で待ちタスクがあり，
                            実行状態のタスクの優先度が低の場合．

          (g-1-2) データキュー管理領域にスペースがなく，データキューの
                  送信待ち行列がタスク優先度順の場合，実行状態のタスク
                  は優先度に合わせ待ち行列の位置につながれること．
                  (格納数は3)

                  (g-1-2-1) 待ちタスクがない場合．

                  (g-1-2-2) 優先度が中→低の順で待ちタスクがあり，
                            実行状態のタスクの優先度が高の場合．

                  (g-1-2-3) 優先度が中→低の順で待ちタスクがあり，
                            実行状態のタスクの優先度が中の場合．

                  (g-1-2-4) 優先度が高→中の順で待ちタスクがあり，
                            実行状態のタスクの優先度が低の場合．

    (g-2) データキュー管理領域にデータを格納するスペースがある場合，
          dataで指定したデータが，FIFO順でデータキュー管理領域に
          格納される状態になること．(格納数は3)

          (g-2-1) データキューにデータがない場合．

          (g-2-2) データキューにデータが2つ存在する場合，
                  新規データをデータキューに入れること．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

2. ソースコードの条件網羅確認

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.1. ソースコード
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ER
snd_dtq(ID dtqid, intptr_t data)
{
	DTQCB	*p_dtqcb;
	WINFO_DTQ winfo_dtq;
	bool_t	reqdsp;
	ER		ercd;

	LOG_SND_DTQ_ENTER(dtqid, data);
	CHECK_DISPATCH();
	CHECK_DTQID(dtqid);
	p_dtqcb = get_dtqcb(dtqid);

	t_lock_cpu();
	if (send_data(p_dtqcb, data, &reqdsp)) {
		if (reqdsp) {
			dispatch();
		}
		ercd = E_OK;
	}
	else {
		winfo_dtq.data = data;
		p_runtsk->tstat = (TS_WAITING | TS_WAIT_SDTQ);
		wobj_make_wait((WOBJCB *) p_dtqcb, (WINFO_WOBJ *) &winfo_dtq);
		dispatch();
		ercd = winfo_dtq.winfo.wercd;
	}
	t_unlock_cpu();

  error_exit:
	LOG_SND_DTQ_LEAVE(ercd);
	return(ercd);
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.2. マクロを展開したAPIと呼び出す内部関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[A] snd_dtq

00 : ER
01 : snd_dtq(ID dtqid, intptr_t data)
02 : {
03 : 	DTQCB	*p_dtqcb;
04 : 	WINFO_DTQ winfo_dtq;
05 : 	bool_t	reqdsp;
06 : 	ER		ercd;
07 : 
08 : 	if (sense_context() || t_sense_lock() || !dspflg) {
09 : 		ercd = E_CTX;
10 : 		goto error_exit;
11 : 	}
12 : 	if (!((TMIN_DTQID <= (dtqid) && (dtqid) <= tmax_dtqid))) {
13 : 		ercd = E_ID;
14 : 		goto error_exit;  
15 :    }
16 : 	p_dtqcb = &(dtqcb_table[(uint_t)((dtqid) - TMIN_DTQID)])
17 : 
18 : 	t_lock_cpu();
19 : 	if (send_data(p_dtqcb, data, &reqdsp)) {
20 : 		if (reqdsp) {
21 : 			dispatch();
22 : 		}
23 : 		ercd = E_OK;
24 : 	}
25 : 	else {
26 : 		winfo_dtq.data = data;
27 : 		p_runtsk->tstat = (TS_WAITING | TS_WAIT_SDTQ);
28 : 		wobj_make_wait((WOBJCB *) p_dtqcb, (WINFO_WOBJ *) &winfo_dtq);
29 : 		dispatch();
30 : 		ercd = winfo_dtq.winfo.wercd;
31 : 	}
32 : 	t_unlock_cpu();
33 : 
34 :   error_exit:
35 : 	return(ercd);
36 :}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.3. 条件式
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(A1) 08 : sense_context()
(A2) 08 : t_sense_lock()
(A3) 08 : !dspflg
(A4) 12 : TMIN_DTQID <= (dtqid)
(A5) 12 : (dtqid) <= tmax_dtqid
(A6) 19 : send_data(p_dtqcb, data, &reqdsp)
(A7) 20 : reqdsp

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.4. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

             (A1) (A2) (A3) (A4) (A5) (A6) (A7)
(a-1)         T   D/F  D/F   D    D    D    D
(a-2)         F    T   D/F   D    D    D    D
(a-3)         F    F    T    D    D    D    D
(a-4)         F    F    T    D    D    D    D
(b-1)         F    F    F    F   D/T   D    D
(b-2)         F    F    F    T    F    D    D
(c)           F    F    F    T    T    F    D
(d)           F    F    F    T    T    F    D
(e)           F    F    F    T    T    F    D
(f-1-1)       F    F    F    T    T    T    T
(f-1-2)       F    F    F    T    T    T    F
(f-1-3)       F    F    F    T    T    T    F
(f-1-4)       F    F    F    T    T    T    F
(f-2-1)       F    F    F    T    T    T    T
(f-2-2)       F    F    F    T    T    T    F
(f-2-3)       F    F    F    T    T    T    F
(f-2-4)       F    F    F    T    T    T    F
(g-1-1-1)     F    F    F    T    T    F    D
(g-1-1-2)     F    F    F    T    T    F    D
(g-1-1-3)     F    F    F    T    T    F    D
(g-1-1-4)     F    F    F    T    T    F    D
(g-1-2-1)     F    F    F    T    T    F    D
(g-1-2-2)     F    F    F    T    T    F    D
(g-1-2-3)     F    F    F    T    T    F    D
(g-1-2-4)     F    F    F    T    T    F    D
(g-2-1)       F    F    F    T    T    T    F
(g-2-2)       F    F    F    T    T    T    F
-----------------------------------------------
網羅          O    O    O    O    O    O    O


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

3. ホワイトボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
必要なし．



以上．
