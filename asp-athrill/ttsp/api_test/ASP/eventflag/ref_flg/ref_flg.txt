
	ref_flg テストシート

----------------------------------------------------------------------
 TTSP
     TOPPERS Test Suite Package

 Copyright (C) 2009-2011 by Center for Embedded Computing Systems
             Graduate School of Information Science, Nagoya Univ., JAPAN
 Copyright (C) 2009-2011 by Digital Craft Inc.
 Copyright (C) 2009-2011 by NEC Communication Systems, Ltd.
 Copyright (C) 2009-2011 by FUJISOFT INCORPORATED
 Copyright (C) 2009-2010 by Mitsuhiro Matsuura

 上記著作権者は，以下の (1)〜(3) の条件を満たす場合に限り，本ドキュメ
 ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
     および下記の無保証規定が，そのままの形でドキュメント中に含まれて
     いること．
 (2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
     を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
     ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
     りではない．
 (3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
     からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
     本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
     く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

 本ドキュメントは，無保証で提供されているものである．上記著作権者およ
 びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
 る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
 により直接的または間接的に生じたいかなる損害に関しても，その責任を負
 わない．

 $Id: ref_flg.txt 2 2012-05-09 02:23:52Z nces-shigihara $
----------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

0. API仕様

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

ref_flg		イベントフラグの状態参照〔T〕

【C言語API】
	ER ercd = ref_flg(ID flgid, T_RFLG *pk_rflg)

【パラメータ】
	ID			flgid		対象イベントフラグのID番号
	T_RFLG *	pk_rflg		イベントフラグの現在状態を入れるパケットへ
							のポインタ

【リターンパラメータ】
	ER			ercd		正常終了(E_OK)またはエラーコード

　＊イベントフラグの現在状態(パケットの内容)
	ID			wtskid		イベントフラグの待ち行列の先頭のタスクのID
							番号
	uint_t		flgptn		イベントフラグのビットパターン

【エラーコード】
	E_CTX			コンテキストエラー(非タスクコンテキストからの呼出
					し，CPUロック状態からの呼出し)
	E_ID			不正ID番号(flgidが不正)
	E_NOEXS〔D〕	オブジェクト未登録(対象イベントフラグが未登録)
	E_OACV〔P〕		オブジェクトアクセス違反(対象イベントフラグに対す
					る参照操作が許可されていない)
	E_MACV〔P〕		メモリアクセス違反(pk_rflgが指すメモリ領域への書込
					みアクセスが許可されていない)

【機能】

flgidで指定したイベントフラグ(対象イベントフラグ)の現在状態を参照する．
参照した現在状態は，pk_rflgで指定したパケットに返される．

対象イベントフラグの待ち行列にタスクが存在しない場合，wtskidには
TSK_NONE(＝0)が返る．

【使用上の注意】

ref_flgはデバッグ時向けの機能であり，その他の目的に使用することは推奨し
ない．これは，ref_flgを呼び出し，対象イベントフラグの現在状態を参照した
直後に割込みが発生した場合，ref_flgから戻ってきた時には対象イベントフラ
グの状態が変化している可能性があるためである．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

1. 仕様ベースのブラックボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.1. エラー条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(a) ディスパッチ保留状態で呼出す場合．

    (a-1) 非タスクコンテキストから呼び出して，E_CTXエラーが返ること．

    (a-2) CPUロック状態で呼び出して，E_CTXエラーが返ること．

(b) flgidが不正の時にE_IDが返ること

    (b-1) flgidが許容される最小値-1(=0)の時にE_IDが返ること．

    (b-2) flgidが許容される最大値+1(TNUM_FLGID+1)の時にE_IDが返ること．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.2. 正常条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(c) 対象イベントフラグの現在状態がpk_rflgで指定したパケットに格納され
    E_OKが返る．

    (c-1) 対象イベントフラグの待ち行列にタスクが存在しない場合，wtskid
          にはTSK_NONE(=0)が返り，flgptnにビットパターンが返る．

    (c-2) 対象イベントフラグの待ち行列にタスクが存在する場合，wtskid
          にはそのID番号が返り，flgptnにビットパターンが返る．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

2. ホワイトボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.1. ソースコード
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ER
ref_flg(ID flgid, T_RFLG *pk_rflg)
{
	FLGCB	*p_flgcb;
	ER		ercd;
    
	LOG_REF_FLG_ENTER(flgid, pk_rflg);
	CHECK_TSKCTX_UNL();
	CHECK_FLGID(flgid);
	p_flgcb = get_flgcb(flgid);

	t_lock_cpu();
	pk_rflg->wtskid = wait_tskid(&(p_flgcb->wait_queue));
	pk_rflg->flgptn = p_flgcb->flgptn;
	ercd = E_OK;
	t_unlock_cpu();

  error_exit:
	LOG_REF_FLG_LEAVE(ercd, pk_rflg);
	return(ercd);
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.2. マクロを展開したAPIと呼び出す内部関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[A] ref_flg

00 : ER
01 : ref_flg(ID flgid, T_RFLG *pk_rflg)
02 : {
03 : 	FLGCB	*p_flgcb;
04 : 	ER		ercd;
05 :     
06 : 	if (sense_context() || t_sense_lock()) {
07 : 		ercd = E_CTX;
08 : 		goto error_exit;
09 : 	}
10 : 	if (!(TMIN_FLGID <= flgid && flgid <= tmax_flgid)) {
11 : 		ercd = E_ID;
12 : 		goto error_exit;
13 : 	}
14 : 	p_flgcb = &(flgcb_table[(uint_t)(flgid - TMIN_FLGID)]);
15 : 
16 : 	t_lock_cpu();
17 : 	pk_rflg->wtskid = wait_tskid(&(p_flgcb->wait_queue));
18 : 	pk_rflg->flgptn = p_flgcb->flgptn;
19 : 	ercd = E_OK;
20 : 	t_unlock_cpu();
21 : 
22 :   error_exit:
23 : 	return(ercd);
24 : }


[B] wait_tskid

00 : Inline ID
01 : wait_tskid(QUEUE *p_wait_queue)
02 : {
03 : 	if (!queue_empty(p_wait_queue)) {
04 : 		return(TSKID((TCB *) p_wait_queue->p_next));
05 : 	}
06 : 	else {
07 : 		return(TSK_NONE);
08 : 	}
09 : }

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.3. 条件式
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(A1) 06 : sense_context()
(A2) 06 : t_sense_lock()
(A3) 10 : TMIN_FLGID <= flgid
(A4) 10 : flgid <= tmax_flgid

(B1) 03 : queue_empty(p_wait_queue)

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.4. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

      (A1) (A2) (A3) (A4) (B1)
(a-1)  T   D/F   D    D    D
(a-2)  F    T    D    D    D
(b-1)  F    F    F   D/T   D
(b-2)  F    F    T    F    D
(c-1)  F    F    T    T    T
(c-2)  F    F    T    T    F
----------------------------
網羅   O    O    O    O    O


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

3. ホワイトボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
必要なし．


以上．
