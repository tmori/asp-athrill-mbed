
	iset_flg テストシート

----------------------------------------------------------------------
 TTSP
     TOPPERS Test Suite Package

 Copyright (C) 2009-2011 by Center for Embedded Computing Systems
             Graduate School of Information Science, Nagoya Univ., JAPAN
 Copyright (C) 2009-2011 by Digital Craft Inc.
 Copyright (C) 2009-2011 by NEC Communication Systems, Ltd.
 Copyright (C) 2009-2011 by FUJISOFT INCORPORATED
 Copyright (C) 2009-2010 by Mitsuhiro Matsuura

 上記著作権者は，以下の (1)〜(3) の条件を満たす場合に限り，本ドキュメ
 ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
     および下記の無保証規定が，そのままの形でドキュメント中に含まれて
     いること．
 (2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
     を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
     ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
     りではない．
 (3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
     からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
     本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
     く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

 本ドキュメントは，無保証で提供されているものである．上記著作権者およ
 びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
 る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
 により直接的または間接的に生じたいかなる損害に関しても，その責任を負
 わない．

 $Id: iset_flg.txt 2 2012-05-09 02:23:52Z nces-shigihara $
----------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

0. API仕様

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

set_flg		イベントフラグのセット〔T〕
iset_flg	イベントフラグのセット〔I〕

【C言語API】
	ER ercd = set_flg(ID flgid, FLGPTN setptn)
	ER ercd = iset_flg(ID flgid, FLGPTN setptn)

【パラメータ】
	ID			flgid		対象イベントフラグのID番号
	FLGPTN		setptn		セットするビットパターン

【リターンパラメータ】
	ER			ercd		正常終了（E_OK）またはエラーコード

【エラーコード】
	E_CTX			コンテキストエラー（非タスクコンテキストからの呼出
					し：set_flgの場合，タスクコンテキストからの呼出し：
					iset_flgの場合，CPUロック状態からの呼出し）
	E_ID			不正ID番号（flgidが不正）
	E_NOEXS〔D〕	オブジェクト未登録（対象イベントフラグが未登録）
	E_OACV〔P〕		オブジェクトアクセス違反（対象イベントフラグに対す
					る通常操作1が許可されていない：set_flgの場合）

【機能】

flgidで指定したイベントフラグ（対象イベントフラグ）のsetptnで指定したビッ
トをセットする．具体的な振舞いは以下の通り．

対象イベントフラグのビットパターンは，それまでの値とsetptnで指定した値
のビット毎論理和（C言語の"|"）に更新される．対象イベントフラグの待ち行
列にタスクが存在する場合には，待ち解除の条件を満たしたタスクが，待ち行
列の前方につながれたものから順に待ち解除される．待ち解除されたタスクに
は，待ち状態となったサービスコールからE_OKが返る．

ただし，対象イベントフラグがTA_CLR属性である場合には，待ち解除の条件を
満たしたタスクを1つ待ち解除した時点で，対象イベントフラグのビットパター
ンが0にクリアされるため，他のタスクが待ち解除されることはない．

【使用上の注意】

対象イベントフラグが，TA_WMUL属性であり，TA_CLR属性でない場合，set_flg
またはiset_flgにより複数のタスクが待ち解除される場合がある．この場合，
サービスコールの処理時間およびカーネル内での割込み禁止時間が，待ち解除
されるタスクの数に比例して長くなる．特に，多くのタスクが待ち解除される
場合，カーネル内での割込み禁止時間が長くなるため，注意が必要である．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

1. 仕様ベースのブラックボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.1. エラー条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(a) 不正なコンテキスト状態で呼出す場合．

    (a-1) タスクコンテキストから呼び出して，E_CTXエラーが返ること．

    (a-2) CPUロック状態で呼び出して，E_CTXエラーが返ること．

(b) flgidが不正の時にE_IDが返ること．

    (b-1) flgidが許容される最小値-1(=0)の時にE_IDが返ること．

    (b-2) flgidが許容される最大値+1(TNUM_FLGID+1)の時にE_IDが返ること．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.2. 正常条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(c) 対象イベントフラグの待ち行列にタスクが存在しない場合には，フラグを
    更新してE_OKが返ること．

(d) 対象イベントフラグの待ち行列にタスクが存在するが，セットされたビッ
    トによりフラグが待ち解除の条件を満たさない場合には，フラグを更新し
    てE_OKが返ること．

(e) 対象イベントフラグの待ち行列にタスクが1つ存在し，セットされたビット
    によりフラグが待ち解除の条件を満たす場合には，フラグを更新してその
    タスクは待ち解除されること．
    (待ち行列のタスクを対象タスクとする)

    (e-1) 対象タスクの優先度が，実行状態のタスクより高い場合．

          (e-1-1) 実行状態になること．

          (e-1-2) ディスパッチ禁止状態の場合，
                  実行可能状態になること．

          (e-1-3) 割込み優先度マスクが全解除でない場合，
                  実行可能状態になること．

    (e-2) 対象タスクの優先度が，実行状態のタスクより低い場合，
          実行可能状態になり，同じ優先度のタスクの最後につながれること．

    (e-3) 対象タスクの優先度が，実行状態のタスクと同じ場合，
          実行可能状態となり，同じ優先度のタスクの最後につながれること．

    (e-4) 対象タスクが，二重待ち状態の場合，
          強制待ちとなること．

    (e-5) 実行状態のタスクが存在しない場合，
          対象タスクが実行状態となること．

(f) 対象イベントフラグの待ち行列にタスクが2つ存在し，セットされたビット
    によりフラグが先頭のタスクの待ち解除の条件を満たす場合には，フラグ
    を更新してそのタスクは待ち解除されること．
    (待ち行列の先頭タスクを対象タスクとする)

    (f-1) 対象タスクの優先度が，実行状態のタスクより高い場合．

          (f-1-1) 実行状態になること．

          (f-1-2) ディスパッチ禁止状態の場合，
                  実行可能状態になること．

          (f-1-3) 割込み優先度マスクが全解除でない場合，
                  実行可能状態になること．

    (f-2) 対象タスクの優先度が実行状態のタスクより低い場合，
          実行可能状態になり，同じ優先度のタスクの最後につながれること．

    (f-3) 対象タスクの優先度が，実行状態のタスクと同じ場合，
          実行可能状態となり同じ優先度のタスクの最後につながれること．

    (f-4) 対象タスクが，二重待ち状態の場合，
          強制待ちとなること．

    (f-5) 実行状態のタスクが存在しない場合，
          対象タスクが実行状態となること．

(g) 対象イベントフラグの待ち行列にタスクが3つ存在し，セットされたビット
    によりフラグがタスクの待ち解除の条件を満たす場合には，フラグを更新
    してそのタスクは待ち解除されること．

    (g-1) 対象イベントフラグの待ち行列にタスクが3つ存在してその中の1つ
          が解除されるとき，その優先度が実行状態のタスクより高い場合は，
          実行状態になること．

          (g-1-1) 待ち行列の1番目のタスクが待ち解除される場合．

          (g-1-2) 待ち行列の2番目のタスクが待ち解除される場合．

          (g-1-3) 待ち行列の3番目のタスクが待ち解除される場合．

    (g-2) 対象イベントフラグの待ち行列にタスクが3つ存在してその中の2つ
          が解除されるとき，その優先度が実行状態のタスクより低い場合は，
          待ち行列の先頭のタスクから順に実行可能状態になること．

          (g-2-1) 待ち行列の1番目と2番目のタスクが待ち解除される場合．

          (g-2-2) 待ち行列の1番目と3番目のタスクが待ち解除される場合．

          (g-2-3) 待ち行列の2番目と3番目のタスクが待ち解除される場合．

    (g-3) 対象イベントフラグの待ち行列にタスクが3つ存在して，その3つの
          条件を満たす場合．

          (g-3-1) 対象イベントフラグの属性がTA_NULLの場合，その優先度が
                  実行状態のタスクと同じ場合は，待ち行列の先頭のタスク
                  から順に実行可能状態になり同じ優先度の実行可能タスク
                  の最後につながれること．

          (g-3-2) 対象イベントフラグの属性がTA_CLRの場合，最初のタスク
                  のみが実行可能状態になりフラグの現在パターンがクリア
                  されること．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

2. ソースコードの条件網羅確認

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.1. ソースコード
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ER
iset_flg(ID flgid, FLGPTN setptn)
{
	FLGCB	*p_flgcb;
	QUEUE	*p_queue;
	TCB		*p_tcb;
	WINFO_FLG *p_winfo_flg;
	ER		ercd;

	LOG_ISET_FLG_ENTER(flgid, setptn);
	CHECK_INTCTX_UNL();
	CHECK_FLGID(flgid);
	p_flgcb = get_flgcb(flgid);

	i_lock_cpu();
	p_flgcb->flgptn |= setptn;
	p_queue = p_flgcb->wait_queue.p_next;
	while (p_queue != &(p_flgcb->wait_queue)) {
		p_tcb = (TCB *) p_queue;
		p_queue = p_queue->p_next;
		p_winfo_flg = (WINFO_FLG *)(p_tcb->p_winfo);
		if (check_flg_cond(p_flgcb, p_winfo_flg->waiptn,
							p_winfo_flg->wfmode, &(p_winfo_flg->flgptn))) {
			queue_delete(&(p_tcb->task_queue));
			if (wait_complete(p_tcb)) {
				reqflg = true;
			}
			if ((p_flgcb->p_flginib->flgatr & TA_CLR) != 0U) {
				break;
			}
		}
	}
	ercd = E_OK;
	i_unlock_cpu();

  error_exit:
	LOG_ISET_FLG_LEAVE(ercd);
	return(ercd);
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.2. マクロを展開したAPIと呼び出す内部関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[A] iset_flg

00 : ER
01 : iset_flg(ID flgid, FLGPTN setptn)
02 : {
03 : 	FLGCB	*p_flgcb;
04 : 	QUEUE	*p_queue;
05 : 	TCB		*p_tcb;
06 : 	WINFO_FLG *p_winfo_flg;
07 :
08 : 	ER		ercd;
09 : 
10 : 	if (!sense_context() || i_sense_lock()) {
11 : 		ercd = E_CTX;
12 : 		goto error_exit;
13 : 	}
14 : 	if (!(TMIN_FLGID <= flgid && flgid <= tmax_flgid) {
15 : 		ercd = E_ID;
16 : 		goto error_exit;
17 : 	}
18 : 	p_flgcb = &(flgcb_table[(uint_t)(flgid - TMIN_FLGID)]);
19 : 
20 : 	i_lock_cpu();
21 : 	p_flgcb->flgptn |= setptn;
22 : 	p_queue = p_flgcb->wait_queue.p_next;
23 : 	while (p_queue != &(p_flgcb->wait_queue)) {
24 : 		p_tcb = (TCB *) p_queue;
25 : 		p_queue = p_queue->p_next;
26 : 		p_winfo_flg = (WINFO_FLG *)(p_tcb->p_winfo);
27 : 		if (check_flg_cond(p_flgcb, p_winfo_flg->waiptn,
28 : 							p_winfo_flg->wfmode, &(p_winfo_flg->flgptn))) {
29 : 			queue_delete(&(p_tcb->task_queue));
30 : 			if (wait_complete(p_tcb)) {
31 : 				reqflg = true;
32 : 			}
33 : 			if ((p_flgcb->p_flginib->flgatr & TA_CLR) != 0U) {
34 : 				break;
35 : 			}
36 : 		}
37 : 	}
38 : 	ercd = E_OK;
39 : 	i_unlock_cpu();
40 : 
41 :   error_exit:
42 : 	return(ercd);
43 : }

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.3. 条件式
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(A1) 10 : !sense_context()
(A2) 10 : i_sense_lock()
(A3) 14 : TMIN_FLGID <= flgid
(A4) 14 : flgid <= tmax_flgid
(A5) 23 : p_queue != &(p_flgcb->wait_queue)
(A6) 27 : check_flg_cond(p_flgcb, p_winfo_flg->waiptn,
						p_winfo_flg->wfmode, &(p_winfo_flg->flgptn))
(A7) 30 : wait_complete(p_tcb)
(A8) 33 : (p_flgcb->p_flginib->flgatr & TA_CLR) != 0U

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.4. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

        (A1) (A2) (A3) (A4) (A5) (A6) (A7) (A8)
(a-1)    T   D/F   D    D    D    D    D    D
(a-2)    F    T    D    D    D    D    D    D
(b-1)    F    F    F   D/T   D    D    D    D
(b-2)    F    F    T    F    D    D    D    D
(c)      F    F    T    T    F    D    D    D
(d)      F    F    T    T    TF   F    D    D
(e-1-1)  F    F    T    T    TF   T    T    F
(e-1-2)  F    F    T    T    TF   T    F    F
(e-1-3)  F    F    T    T    TF   T    F    F
(e-2)    F    F    T    T    TF   T    F    F
(e-3)    F    F    T    T    TF   T    F    F
(e-4)    F    F    T    T    TF   T    F    F
(e-5)    F    F    T    T    TF   T    T    F
(f-1-1)  F    F    T    T    TTF  TF   TD   FD
(f-1-2)  F    F    T    T    TTF  TF   FD   FD
(f-1-3)  F    F    T    T    TTF  TF   FD   FD
(f-2)    F    F    T    T    TTF  TF   FD   FD
(f-3)    F    F    T    T    TTF  TF   FD   FD
(f-4)    F    F    T    T    TTF  TF   FD   FD
(f-5)    F    F    T    T    TTF  TF   TD   FD
(g-1-1)  F    F    T    T    TTTF TFF  TDD  FDD
(g-1-2)  F    F    T    T    TTTF FTF  DTD  DFD
(g-1-3)  F    F    T    T    TTTF FFT  DDT  DDF
(g-2-1)  F    F    T    T    TTTF TTF  FFD  FFD
(g-2-2)  F    F    T    T    TTTF TFT  FDF  FDF
(g-2-3)  F    F    T    T    TTTF FTT  DFF  DFF
(g-3-1)  F    F    T    T    TTTF TTT  FFF  FFF
(g-3-2)  F    F    T    T    T    T    F    T
-----------------------------------------------
網羅     O    O    O    O    O    O    O    O


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

3. ホワイトボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
必要なし．



以上．
