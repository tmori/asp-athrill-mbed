
	wai_flg テストシート

----------------------------------------------------------------------
 TTSP
     TOPPERS Test Suite Package

 Copyright (C) 2009-2011 by Center for Embedded Computing Systems
             Graduate School of Information Science, Nagoya Univ., JAPAN
 Copyright (C) 2009-2011 by Digital Craft Inc.
 Copyright (C) 2009-2011 by NEC Communication Systems, Ltd.
 Copyright (C) 2009-2011 by FUJISOFT INCORPORATED
 Copyright (C) 2009-2010 by Mitsuhiro Matsuura

 上記著作権者は，以下の (1)〜(3) の条件を満たす場合に限り，本ドキュメ
 ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
     および下記の無保証規定が，そのままの形でドキュメント中に含まれて
     いること．
 (2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
     を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
     ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
     りではない．
 (3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
     からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
     本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
     く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

 本ドキュメントは，無保証で提供されているものである．上記著作権者およ
 びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
 る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
 により直接的または間接的に生じたいかなる損害に関しても，その責任を負
 わない．

 $Id: wai_flg.txt 2 2012-05-09 02:23:52Z nces-shigihara $
----------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

0. API仕様

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

wai_flg		イベントフラグ待ち〔T〕
pol_flg		イベントフラグ待ち（ポーリング）〔T〕
twai_flg	イベントフラグ待ち（タイムアウト付き）〔T〕

【C言語API】
	ER ercd = wai_flg(ID flgid, FLGPTN waiptn, MODE wfmode, FLGPTN *p_flgptn)
	ER ercd = pol_flg(ID flgid, FLGPTN waiptn, MODE wfmode, FLGPTN *p_flgptn)
	ER ercd = twai_flg(ID flgid, FLGPTN waiptn,
									MODE wfmode, FLGPTN *p_flgptn, TMO tmout)

【パラメータ】
	ID			flgid		対象イベントフラグのID番号
	FLGPTN		waiptn		待ちビットパターン
	MODE		wfmode		待ちモード
	FLGPTN *	p_flgptn	待ち解除時のビットパターンを入れるメモリ領
							域へのポインタ
	TMO			tmout		タイムアウト時間（twai_flgの場合）

【リターンパラメータ】
	ER			ercd		正常終了（E_OK）またはエラーコード
	FLGPTN		flgptn		待ち解除時のビットパターン

【エラーコード】
	E_CTX			コンテキストエラー（非タスクコンテキストからの呼出
					し，CPUロック状態からの呼出し，ディスパッチ保留状態
					からの呼出し：pol_flgを除く）
	E_NOSPT			未サポート機能（制約タスクからの呼出し：pol_flgを除
					く）
	E_ID			不正ID番号（flgidが不正）
	E_PAR			パラメータエラー（waiptn，wfmodeが不正，tmoutが不正：
					twai_flgの場合）
	E_NOEXS〔D〕	オブジェクト未登録（対象イベントフラグが未登録）
	E_OACV〔P〕		オブジェクトアクセス違反（対象イベントフラグに対す
					る通常操作2が許可されていない）
	E_MACV〔P〕		メモリアクセス違反（p_flgptnが指すメモリ領域への書
					込みアクセスが許可されていない）
	E_ILUSE			サービスコール不正使用（TA_WMUL属性でないイベントフ
					ラグで待ちタスクあり）
	E_TMOUT			ポーリング失敗またはタイムアウト（wai_flgを除く）
	E_RLWAI			待ち禁止状態または待ち状態の強制解除（pol_flgを除く）
	E_DLT			待ちオブジェクトの削除または再初期化（pol_flgを除く）

【機能】

flgidで指定したイベントフラグ（対象イベントフラグ）が，waiptnとwfmodeで
指定した待ち解除の条件を満たすのを待つ．具体的な振舞いは以下の通り．

対象イベントフラグが，waiptnとwfmodeで指定した待ち解除の条件を満たして
いる場合には，対象イベントフラグのビットパターンの現在値がflgptnに返さ
れる．対象イベントフラグがTA_CLR属性である場合には，対象イベントフラグ
のビットパターンが0にクリアされる．

待ち解除の条件を満たしていない場合には，自タスクはイベントフラグ待ち状
態となり，対象イベントフラグの待ち行列につながれる．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

1. 仕様ベースのブラックボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.1. エラー条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(a) ディスパッチ保留状態で呼出す場合．

    (a-1) 非タスクコンテキストから呼び出して，E_CTXエラーが返ること．

    (a-2) CPUロック状態で呼び出して，E_CTXエラーが返ること．

    (a-3) 割込み優先度マスクが全解除でない状態で呼び出して，E_CTXエラー
          が返ること．

    (a-4) ディスパッチ禁止状態で呼び出して，E_CTXエラーが返ること．

(b) flgidが不正の時にE_IDが返ること．

    (b-1) flgidが許容される最小値-1(=0)の時にE_IDが返ること．

    (b-2) flgidが許容される最大値+1(TNUM_FLGID+1)の時にE_IDが返ること．

(c) パラメータエラーの時，E_PARが返ること．

    (c-1) waiptnが不正(=0)

    (c-2) wfmodeが不正(=0)

(d) 対象イベントフラグが複数待ち禁止で既に待ちタスクがある場合，
    E_ILUSEが返ること．

    (d-1) 対象イベントフラグが，waiptnとwfmodeで指定した待ち解除の条件
          を満たしている場合．

    (d-2) 対象イベントフラグが，waiptnとwfmodeで指定した待ち解除の条件
          を満たしていない場合．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.2. 正常条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(e) 待ち状態が強制解除された時にE_RLWAIが返ること．

(f) 待ちオブジェクトが再初期化された時にE_DLTが返ること．

(g) 待ち状態が解除された時にE_OKが返ること．

(h) 対象イベントフラグが，waiptnとwfmodeで指定した待ち解除の条件を満た
    している場合には，対象イベントフラグのビットパターンの現在値が
    flgptnに返されてE_OKが返ること．

    (h-1) 対象イベントフラグの属性がTA_NULLの場合．

    (h-2) 対象イベントフラグの属性がTA_CLRの場合．

(i) 対象イベントフラグが，waiptnとwfmodeで指定した待ち解除の条件を満た
    していない場合には，自タスクはイベントフラグ待ち状態となり，対象イ
    ベントフラグの待ち行列につながれること．

    (i-1) 対象イベントフラグの属性がFIFO順で複数待ち許可の場合，自タスク
          は待ち行列の最後につながれること．

          (i-1-1) 待ちタスクがない場合．

          (i-1-2) 優先度が中→低の順で待ちタスクがあり，
                  自タスクの優先度が高の場合．

          (i-1-3) 優先度が中→低の順で待ちタスクがあり，
                  自タスクの優先度が中の場合．

          (i-1-4) 優先度が高→中の順で待ちタスクがあり，
                  自タスクの優先度が低の場合．

    (i-2) 対象イベントフラグの属性が優先度順で複数待ち許可の場合，自タ
          スクは優先度に合わせ待ち行列の位置につながれること．

          (i-2-1) 待ちタスクがない場合．

          (i-2-2) 優先度が中→低の順で待ちタスクがあり，
                  自タスクの優先度が高の場合．

          (i-2-3) 優先度が中→低の順で待ちタスクがあり，
                  自タスクの優先度が中の場合．

          (i-2-4) 優先度が高→中の順で待ちタスクがあり，
                  自タスクの優先度が低の場合．

    (i-3) 対象イベントフラグの属性が複数待ち禁止で待ちタスクがない場合，
          自タスクは待ち行列につながれること．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

2. ソースコードの条件網羅確認

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.1. ソースコード
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ER
wai_flg(ID flgid, FLGPTN waiptn, MODE wfmode, FLGPTN *p_flgptn)
{
	FLGCB	*p_flgcb;
	WINFO_FLG winfo_flg;
	ER		ercd;

	LOG_WAI_FLG_ENTER(flgid, waiptn, wfmode, p_flgptn);
	CHECK_DISPATCH();
	CHECK_FLGID(flgid);
	CHECK_PAR(waiptn != 0U);
	CHECK_PAR(wfmode == TWF_ORW || wfmode == TWF_ANDW);
	p_flgcb = get_flgcb(flgid);

	t_lock_cpu();
	if ((p_flgcb->p_flginib->flgatr & TA_WMUL) == 0U
					&& !queue_empty(&(p_flgcb->wait_queue))) {
		ercd = E_ILUSE;
	}
	else if (check_flg_cond(p_flgcb, waiptn, wfmode, p_flgptn)) {
		ercd = E_OK;
	}
	else {
		winfo_flg.waiptn = waiptn;
		winfo_flg.wfmode = wfmode;
		p_runtsk->tstat = (TS_WAITING | TS_WAIT_FLG);
		wobj_make_wait((WOBJCB *) p_flgcb, (WINFO_WOBJ *) &winfo_flg);
		dispatch();
		ercd = winfo_flg.winfo.wercd;
		if (ercd == E_OK) {
			*p_flgptn = winfo_flg.flgptn;
		}
	}
	t_unlock_cpu();

  error_exit:
	LOG_WAI_FLG_LEAVE(ercd, *p_flgptn);
	return(ercd);
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.2. マクロを展開したAPIと呼び出す内部関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[A] wai_flg

00 :ER
01 :wai_flg(ID flgid, FLGPTN waiptn, MODE wfmode, FLGPTN *p_flgptn)
02 :{
03 :	FLGCB	*p_flgcb;
04 :	WINFO_FLG winfo_flg;
05 :	ER		ercd;
06 :
07 :	if (sense_context() || t_sense_lock() || !dspflg) {
08 :		ercd = E_CTX;
09 :		goto error_exit;
10 :	}
11 :	if (!(TMIN_FLGID <= flgid && flgid <= tmax_flgid)) {
12 :		ercd = E_ID;
13 :		goto error_exit;
14 :	}
15 :	if (!(waiptn != 0U)) {
16 :		ercd = E_PAR;
17 :		goto error_exit;
18 :	}
19 :	if (!(wfmode == TWF_ORW || wfmode == TWF_ANDW)) {
20 :		ercd = E_PAR;
21 :		goto error_exit;
22 :	}
23 :	p_flgcb = &(flgcb_table[(uint_t)(flgid - TMIN_FLGID)]);
24 :
25 :	t_lock_cpu();
26 :	if ((p_flgcb->p_flginib->flgatr & TA_WMUL) == 0U
27 :					&& !queue_empty(&(p_flgcb->wait_queue))) {
28 :		ercd = E_ILUSE;
29 :	}
30 :	else if (check_flg_cond(p_flgcb, waiptn, wfmode, p_flgptn)) {
31 :		ercd = E_OK;
32 :	}
33 :	else {
34 :		winfo_flg.waiptn = waiptn;
35 :		winfo_flg.wfmode = wfmode;
36 :		p_runtsk->tstat = (TS_WAITING | TS_WAIT_FLG);
37 :		wobj_make_wait((WOBJCB *) p_flgcb, (WINFO_WOBJ *) &winfo_flg);
38 :		dispatch();
39 :		ercd = winfo_flg.winfo.wercd;
40 :		if (ercd == E_OK) {
41 :			*p_flgptn = winfo_flg.flgptn;
42 :		}
43 :	}
44 :	t_unlock_cpu();
45 :
46 :  error_exit:
47 :	return(ercd);
48 :}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.3. 条件式
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(A1) 07 : sense_context()
(A2) 07 : t_sense_lock()
(A3) 07 : !dspflg
(A4) 11 : TMIN_FLGID <= flgid
(A5) 11 : flgid <= tmax_flgid
(A6) 15 : !(waiptn != 0U)
(A7) 19 : wfmode == TWF_ORW
(A8) 19 : wfmode == TWF_ANDW
(A9) 26 : (p_flgcb->p_flginib->flgatr & TA_WMUL) == 0U
(A10) 27 : !queue_empty(&(p_flgcb->wait_queue))
(A11) 30 : check_flg_cond(p_flgcb, waiptn, wfmode, p_flgptn)
(A12) 40 : ercd == E_OK

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.4. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

       (A1) (A2) (A3) (A4) (A5) (A6) (A7) (A8) (A9) (A10) (A11) (A12)
(a-1)   T   D/F  D/F   D    D    D    D    D    D    D     D     D
(a-2)   F    T   D/F   D    D    D    D    D    D    D     D     D
(a-3)   F    F    T    D    D    D    D    D    D    D     D     D
(a-4)   F    F    T    D    D    D    D    D    D    D     D     D
(b-1)   F    F    F    F   D/T   D    D    D    D    D     D     D
(b-2)   F    F    F    T    F    D    D    D    D    D     D     D
(c-1)   F    F    F    T    T    T    D    D    D    D     D     D
(c-2)   F    F    F    T    T    F    F    F    D    D     D     D
(d-1)   F    F    F    T    T    F    T   D/F   T    T     D     D
(d-2)   F    F    F    T    T    F    F    T    T    T     D     D
(e)     F    F    F    T    T    F    F    T    T    F     F     F
(f)     F    F    F    T    T    F    F    T    T    F     F     F
(g)     F    F    F    T    T    F    F    T    T    F     F     T
(h-1)   F    F    F    T    T    F    T   D/F   T    F     T     D
(h-2)   F    F    F    T    T    F    T   D/F   T    F     T     D
(i-1-1) F    F    F    T    T    F    F    T    F   D/F    F     D
(i-1-2) F    F    F    T    T    F    F    T    F   D/T    F     D
(i-1-3) F    F    F    T    T    F    F    T    F   D/T    F     D
(i-1-4) F    F    F    T    T    F    F    T    F   D/T    F     D
(i-2-1) F    F    F    T    T    F    F    T    F   D/F    F     D
(i-2-2) F    F    F    T    T    F    F    T    F   D/T    F     D
(i-2-3) F    F    F    T    T    F    F    T    F   D/T    F     D
(i-2-4) F    F    F    T    T    F    F    T    F   D/T    F     D
(i-3)   F    F    F    T    T    F    F    T    T    F     F     D
--------------------------------------------------------------------
網羅    O    O    O    O    O    O    O    O    O    O     O     O


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

3. ホワイトボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
必要なし．



以上．
