
	ref_tex テストシート

----------------------------------------------------------------------
 TTSP
     TOPPERS Test Suite Package

 Copyright (C) 2009-2011 by Center for Embedded Computing Systems
             Graduate School of Information Science, Nagoya Univ., JAPAN
 Copyright (C) 2009-2011 by Digital Craft Inc.
 Copyright (C) 2009-2011 by NEC Communication Systems, Ltd.
 Copyright (C) 2009-2011 by FUJISOFT INCORPORATED
 Copyright (C) 2009-2010 by Mitsuhiro Matsuura

 上記著作権者は，以下の (1)〜(3) の条件を満たす場合に限り，本ドキュメ
 ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
     および下記の無保証規定が，そのままの形でドキュメント中に含まれて
     いること．
 (2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
     を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
     ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
     りではない．
 (3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
     からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
     本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
     く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

 本ドキュメントは，無保証で提供されているものである．上記著作権者およ
 びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
 る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
 により直接的または間接的に生じたいかなる損害に関しても，その責任を負
 わない．

 $Id: ref_tex.txt 2 2012-05-09 02:23:52Z nces-shigihara $
----------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

0. API仕様

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

ref_tex		タスク例外処理の状態参照〔T〕

【C言語API】
	ER ercd = ref_tex(ID tskid, T_RTEX *pk_rtex)

【パラメータ】
	ID			tskid		対象タスクのID番号
	T_RTEX *	pk_rtex		タスク例外処理の現在状態を入れるパケットへ
							のポインタ

【リターンパラメータ】
	ER			ercd		正常終了（E_OK）またはエラーコード

　＊タスク例外処理の現在状態（パケットの内容）
	STAT		texstat		タスク例外処理の状態
	TEXPTN		pndptn		タスクの保留例外要因

【エラーコード】
	E_CTX			コンテキストエラー（非タスクコンテキストからの呼出
					し，CPUロック状態からの呼出し）
	E_ID			不正ID番号（tskidが不正）
	E_NOEXS〔D〕	オブジェクト未登録（対象タスクが未登録）
	E_OACV〔P〕		オブジェクトアクセス違反（対象タスクに対する参照操
					作が許可されていない）
	E_MACV〔P〕		メモリアクセス違反（pk_rtexが指すメモリ領域への書込
					みアクセスが許可されていない）
	E_OBJ			オブジェクト状態エラー（対象タスクが休止状態，対象
					タスクに対してタスク例外処理ルーチンが定義されてい
					ない）

【機能】

tskidで指定したタスク（対象タスク）のタスク例外処理に関する現在状態を参
照する．参照した現在状態は，pk_rtexで指定したパケットに返される．

texstatには，対象タスクの現在のタスク例外処理禁止フラグを表す次のいずれ
かの値が返される．

	TTEX_ENA	0x01U		タスク例外処理許可状態
	TTEX_DIS	0x02U		タスク例外処理禁止状態

pndptnには，対象タスクの現在の保留例外要因が返される．

tskidにTSK_SELF（＝0）を指定すると，自タスクが対象タスクとなる．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

1. 仕様ベースのブラックボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.1. エラー条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(a) ディスパッチ保留状態で呼出す場合．

    (a-1) 非タスクコンテキストから呼び出して，E_CTXエラーが返ること．

    (a-2) CPUロック状態で呼び出して，E_CTXエラーが返ること．

(b) tskidが不正の時にE_IDが返ること．

    (b-1) tskidが許容される最小値-1(=-1)の時にE_IDが返ること．

    (b-2) tskidが許容される最大値+1(TNUM_TSKID+1)の時にE_IDが返ること．

(c) 対象タスクが休止状態の時にE_OBJが返ること．

(d) タスク例外処理ルーチンが定義されていないタスクを指定すると，
    E_OBJが返ること．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.2. 正常条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(e) tskidで指定したタスクのタスク例外処理に関する現在状態を参照する．
    参照した現在状態は，pk_rtexで指定したパケットに返される．
    対象タスクを他タスクとして呼び出す．

    (e-1) タスクが実行可能状態の場合．

          (e-1-1) タスク例外処理が許可状態の場合．

          (e-1-2) タスク例外処理が禁止状態の場合．

    (e-2) タスクが起床待ち状態の場合．

          (e-2-1) タスク例外処理が許可状態の場合．

          (e-2-2) タスク例外処理が禁止状態の場合．

    (e-3) タスクが時間経過待ち状態の場合．

          (e-3-1) タスク例外処理が許可状態の場合．

          (e-3-2) タスク例外処理が禁止状態の場合．

    (e-4) タスクがセマフォの資源獲得待ち(タイムアウト無)状態の場合．

          (e-4-1) タスク例外処理が許可状態の場合．

          (e-4-2) タスク例外処理が禁止状態の場合．

    (e-5) タスクがセマフォの資源獲得待ち(タイムアウト有)状態の場合．

          (e-5-1) タスク例外処理が許可状態の場合．

          (e-5-2) タスク例外処理が禁止状態の場合．

    (e-6) タスクが強制待ち状態の場合．

          (e-6-1) タスク例外処理が許可状態の場合．

          (e-6-2) タスク例外処理が禁止状態の場合．

    (e-7) タスクが二重待ち(起床待ち)状態の場合．

          (e-7-1) タスク例外処理が許可状態の場合．

          (e-7-2) タスク例外処理が禁止状態の場合．

    (e-8) タスクが二重待ち(時間経過待ち)状態の場合．

          (e-8-1) タスク例外処理が許可状態の場合．

          (e-8-2) タスク例外処理が禁止状態の場合．

(f) tskidにTSK_SELF(=0)を指定すると，自タスクが対象タスクとなること．

          (f-1) タスク例外処理が許可状態の場合．

          (f-2) タスク例外処理が禁止状態の場合．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

2. ソースコードの条件網羅確認

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.1. ソースコード
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ER
ref_tex(ID tskid, T_RTEX *pk_rtex)
{
	TCB		*p_tcb;
	ER		ercd;

	LOG_REF_TEX_ENTER(tskid, pk_rtex);
	CHECK_TSKCTX_UNL();
	CHECK_TSKID_SELF(tskid);
	p_tcb = get_tcb_self(tskid);

	t_lock_cpu();
	if (TSTAT_DORMANT(p_tcb->tstat) || p_tcb->p_tinib->texrtn == NULL) {
		ercd = E_OBJ;
	}
	else {
		pk_rtex->texstat = (p_tcb->enatex) ? TTEX_ENA : TTEX_DIS;
		pk_rtex->pndptn = p_tcb->texptn;
		ercd = E_OK;
	}
	t_unlock_cpu();

  error_exit:
	LOG_REF_TEX_LEAVE(ercd, pk_rtex);
	return(ercd);
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.2. マクロを展開したAPIと呼び出す内部関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[A] ref_tex

00 : ER
01 : ref_tex(ID tskid, T_RTEX *pk_rtex)
02 : {
03 : 	TCB		*p_tcb;
04 : 	ER		ercd;
05 : 
06 : 	if (sense_context() || t_sense_lock()) {
07 : 		ercd = E_CTX;
08 : 		goto error_exit;
09 : 	}
10 : 	if (!((TMIN_TSKID <= tskid && tskid <= tmax_tskid) || tskid == TSK_SELF)) {
11 : 		ercd = E_ID;
12 : 		goto error_exit;
13 : 	}
14 : 	p_tcb = ((tskid) == TSK_SELF ? p_runtsk : (&(tcb_table[((uint_t)((tskid) - TMIN_TSKID))])));
15 : 
16 : 	t_lock_cpu();
17 : 	if (p_tcb->tstat == TS_DORMANT || p_tcb->p_tinib->texrtn == NULL) {
18 : 		ercd = E_OBJ;
19 : 	}
20 : 	else {
21 : 		pk_rtex->texstat = (p_tcb->enatex) ? TTEX_ENA : TTEX_DIS;
22 : 		pk_rtex->pndptn = p_tcb->texptn;
23 : 		ercd = E_OK;
24 : 	}
15 : 	t_unlock_cpu();
16 : 
17 :   error_exit:
18 : 	return(ercd);
19 : }

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.3. 条件式
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(A1) 06 : sense_context()
(A2) 06 : t_sense_lock()
(A3) 10 : TMIN_TSKID <= tskid
(A4) 10 : tskid <= tmax_tskid
(A5) 10 : tskid == TSK_SELF
(A6) 14 : (tskid) == TSK_SELF
(A7) 17 : p_tcb->tstat == TS_DORMANT
(A8) 17 : p_tcb->p_tinib->texrtn == NULL
(A9) 21 : p_tcb->enatex

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.4. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

         (A1) (A2) (A3) (A4) (A5) (A6) (A7) (A8) (A9)
(a-1)     T   D/F   D    D    D    D    D    D    D
(a-2)     F    T    D    D    D    D    D    D    D
(b-1)     F    F    F   D/T   F    D    D    D    D
(b-2)     F    F    T    F    F    D    D    D    D
(c)       F    F    T    T   D/F   F    T   D/F   D
(d)       F    F    T    T   D/F   F    F    T    D
(e-1-1)   F    F    T    T   D/F   F    F    F    T
(e-1-2)   F    F    T    T   D/F   F    F    F    F
(e-2-1)   F    F    T    T   D/F   F    F    F    T
(e-2-2)   F    F    T    T   D/F   F    F    F    F
(e-3-1)   F    F    T    T   D/F   F    F    F    T
(e-3-2)   F    F    T    T   D/F   F    F    F    F
(e-4-1)   F    F    T    T   D/F   F    F    F    T
(e-4-2)   F    F    T    T   D/F   F    F    F    F
(e-5-1)   F    F    T    T   D/F   F    F    F    T
(e-5-2)   F    F    T    T   D/F   F    F    F    F
(e-6-1)   F    F    T    T   D/F   F    F    F    T
(e-6-2)   F    F    T    T   D/F   F    F    F    F
(e-7-1)   F    F    T    T   D/F   F    F    F    T
(e-7-2)   F    F    T    T   D/F   F    F    F    F
(e-8-1)   F    F    T    T   D/F   F    F    F    T
(e-8-2)   F    F    T    T   D/F   F    F    F    F
(f-1)     F    F    F   D/T   T    T    F    F    T
(f-2)     F    F    F   D/T   T    T    F    F    F
---------------------------------------------------
網羅      O    O    O    O    O    O    O    O    O

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

3. ホワイトボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
必要なし．



以上．
