
	iras_tex テストシート

----------------------------------------------------------------------
 TTSP
     TOPPERS Test Suite Package

 Copyright (C) 2009-2011 by Center for Embedded Computing Systems
             Graduate School of Information Science, Nagoya Univ., JAPAN
 Copyright (C) 2009-2011 by Digital Craft Inc.
 Copyright (C) 2009-2011 by NEC Communication Systems, Ltd.
 Copyright (C) 2009-2011 by FUJISOFT INCORPORATED
 Copyright (C) 2009-2010 by Mitsuhiro Matsuura

 上記著作権者は，以下の (1)〜(3) の条件を満たす場合に限り，本ドキュメ
 ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
     および下記の無保証規定が，そのままの形でドキュメント中に含まれて
     いること．
 (2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
     を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
     ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
     りではない．
 (3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
     からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
     本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
     く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

 本ドキュメントは，無保証で提供されているものである．上記著作権者およ
 びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
 る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
 により直接的または間接的に生じたいかなる損害に関しても，その責任を負
 わない．

 $Id: iras_tex.txt 2 2012-05-09 02:23:52Z nces-shigihara $
----------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

0. API仕様

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

ras_tex		タスク例外処理の要求〔T〕
iras_tex	タスク例外処理の要求〔I〕

【C言語API】
	ER ercd = ras_tex(ID tskid, TEXPTN rasptn)
	ER ercd = iras_tex(ID tskid, TEXPTN rasptn)

【パラメータ】
	ID			tskid		対象タスクのID番号
	TEXPTN		rasptn		要求するタスク例外処理のタスク例外要因

【リターンパラメータ】
	ER			ercd		正常終了（E_OK）またはエラーコード

【エラーコード】
	E_CTX			コンテキストエラー（非タスクコンテキストからの呼出
					し：ras_texの場合，タスクコンテキストからの呼出し：
					iras_texの場合，CPUロック状態からの呼出し）
	E_ID			不正ID番号（tskidが不正）
	E_NOEXS〔D〕	オブジェクト未登録（対象タスクが未登録）
	E_OACV〔P〕		オブジェクトアクセス違反（対象タスクに対する通常操
					作2が許可されていない：ras_texの場合）
	E_PAR			パラメータエラー（rasptnが不正）
	E_OBJ			オブジェクト状態エラー（対象タスクが休止状態，対象
					タスクに対してタスク例外処理ルーチンが定義されてい
					ない）

【機能】

tskidで指定したタスク（対象タスク）に対して，rasptnで指定したタスク例外
要因のタスク例外処理を要求する．対象タスクの保留例外要因が，それまでの
値とrasptnで指定した値のビット毎論理和（C言語の"|"）に更新される．

対象タスクが休止状態である場合と，対象タスクに対してタスク例外処理ルー
チンが定義されていない場合には，E_OBJエラーとなる．

ras_texにおいてtskidにTSK_SELF（＝0）を指定すると，自タスクが対象タスク
となる．

rasptnが0の場合には，E_PARエラーとなる．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

1. 仕様ベースのブラックボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.1. エラー条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(a) 不正なコンテキスト状態で呼出す場合．

    (a-1) タスクコンテキストから呼び出して，E_CTXエラーが返ること．

    (a-2) CPUロック状態で呼び出して，E_CTXエラーが返ること．

(b) tskidが不正の時にE_IDが返ること．

    (b-1) tskidが許容される最小値-1(0)の時にE_IDが返ること．

    (b-2) tskidが許容される最大値+1(TNUM_TSKID+1)の時にE_IDが返ること．

(c) 対象タスクが休止状態の時にE_OBJが返ること．

(d) タスク例外処理ルーチンが定義されていないタスクを指定すると，
    E_OBJが返ること．

(e) rasptnに0を指定すると，E_PARが返ること．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.2. 正常条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(f) 対象タスクをタスク例外処理ルーチンが定義された他タスクとして
    呼び出す．

    (f-1) 実行可能状態のタスクを指定する．対象タスクが
          実行状態となったとき，タスク例外処理が実行されること．

    (f-2) 起床待ち状態のタスクを指定する．対象タスクが
          実行状態となったとき，タスク例外処理が実行されること．

    (f-3) 時間経過待ち状態のタスクを指定する．対象タスクが
          実行状態となったとき，タスク例外処理が実行されること．

    (f-4) セマフォの資源獲得待ち(タイムアウト無)状態のタスクを
          指定する．対象タスクが実行状態となったとき，
          タスク例外処理が実行されること．

    (f-5) セマフォの資源獲得待ち(タイムアウト有)状態のタスクを
          指定する．対象タスクが実行状態となったとき，
          タスク例外処理が実行されること．

    (f-6) 強制待ち状態のタスクを指定する．対象タスクが
          実行状態となったとき，タスク例外処理が実行されること．

    (f-7) 二重待ち(起床待ち)状態のタスクを指定する．対象タスクが
          実行状態となったとき，タスク例外処理が実行されること．

    (f-8) 二重待ち(時間経過待ち)状態のタスクを指定する．対象タスクが
          実行状態となったとき，タスク例外処理が実行されること．

    (f-9) 実行状態のタスクを指定する．
          タスク例外処理が実行されること．

(g) タスク例外処理要求されているタスクを対象タスクとして呼び出すと，タ
    スク例外要因がビット毎論理和(C言語の"|")に更新されること．

(h) 対象タスクがタスク例外処理禁止状態の場合，タスク例外要因が更新され
    るが，実行状態になってもタスク例外は実行されないこと．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

2. ソースコードの条件網羅確認

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.1. ソースコード
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ER
iras_tex(ID tskid, TEXPTN rasptn)
{
	TCB	*p_tcb;
	ER	ercd;

	LOG_IRAS_TEX_ENTER(tskid, rasptn);
	CHECK_INTCTX_UNL();
	CHECK_TSKID(tskid);
	CHECK_PAR(rasptn != 0U);
	p_tcb = get_tcb(tskid);

	i_lock_cpu();
	if (TSTAT_DORMANT(p_tcb->tstat) || p_tcb->p_tinib->texrtn == NULL) {
		ercd = E_OBJ;
	}
	else {
		p_tcb->texptn |= rasptn;
		if (p_tcb == p_runtsk && p_runtsk->enatex && ipmflg) {
			reqflg = true;
		}
		ercd = E_OK;
	}
	i_unlock_cpu();

  error_exit:
	LOG_IRAS_TEX_LEAVE(ercd);
	return(ercd);
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.2. マクロを展開したAPIと呼び出す内部関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[A] iras_tex

00 : ER
01 : iras_tex(ID tskid, TEXPTN rasptn)
02 : {
03 : 	TCB	*p_tcb;
04 : 	ER	ercd;
05 : 
06 : 	if (!sense_context() || i_sense_lock()) {
07 : 		ercd = E_CTX;
08 : 		goto error_exit;
09 : 	}
10 : 	if (!(TMIN_TSKID <= (tskid) && (tskid) <= tmax_tskid)) {
11 : 		ercd = E_ID;
12 : 		goto error_exit;
13 : 	}     
14 : 	if (!(rasptn != 0U)) {
15 : 		ercd = E_PAR;
16 : 		goto error_exit;
17 : 	}
18 : 	p_tcb = (&(tcb_table[((uint_t)((tskid) - TMIN_TSKID))]));
19 : 
20 : 	i_lock_cpu();
21 : 	if (((p_tcb->tstat) == TS_DORMANT) || p_tcb->p_tinib->texrtn == NULL) {
22 : 		ercd = E_OBJ;
23 : 	}
24 : 	else {
25 : 		p_tcb->texptn |= rasptn;
26 : 		if (p_tcb == p_runtsk && p_runtsk->enatex && ipmflg) {
27 : 			reqflg = true;
28 : 		}
29 : 		ercd = E_OK;
30 : 	}
31 : 	i_unlock_cpu();
32 : 
33 :   error_exit:
34 : 	return(ercd);
35 : }


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.3. 条件式
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(A1)  06 : !sense_context()
(A2)  06 : i_sense_lock()
(A3)  10 : TMIN_TSKID <= (tskid)
(A4)  10 : (tskid) <= tmax_tskid
(A5)  14 : !(rasptn != 0U)
(A6)  21 : (p_tcb->tstat) == TS_DORMANT
(A7)  21 : p_tcb->p_tinib->texrtn == NULL
(A8)  26 : p_tcb == p_runtsk
(A9)  26 : p_runtsk->enatex
(A10) 26 : ipmflg

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.4. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

      (A1) (A2) (A3) (A4) (A5) (A6) (A7) (A8) (A9) (A10)
(a-1)  T   D/F   D    D    D    D    D    D    D    D
(a-2)  F    T    D    D    D    D    D    D    D    D
(b-1)  F    F    F   D/T   D    D    D    D    D    D
(b-2)  F    F    T    F    D    D    D    D    D    D
(c)    F    F    T    T    F    T   D/F   D    D    D
(d)    F    F    T    T    F    F    T    D    D    D
(e)    F    F    T    T    T    D    D    D    D    D
(f-1)  F    F    T    T    F    F    F    F   D/T  D/T
(f-2)  F    F    T    T    F    F    F    F   D/T  D/T
(f-3)  F    F    T    T    F    F    F    F   D/T  D/T
(f-4)  F    F    T    T    F    F    F    F   D/T  D/T
(f-5)  F    F    T    T    F    F    F    F   D/T  D/T
(f-6)  F    F    T    T    F    F    F    F   D/T  D/T
(f-7)  F    F    T    T    F    F    F    F   D/T  D/T
(f-8)  F    F    T    T    F    F    F    F   D/T  D/T
(f-9)  F    F    T    T    F    F    F    T    T    T
(g)    F    F    T    T    F    F    F    F   D/T  D/T
(h)    F    F    T    T    F    F    F    T    F   D/T
--------------------------------------------------------
網羅   O    O    O    O    O    O    O    O    O    X

【備考】
・(A10)の網羅をさせるために，以下にホワイトボックステストを実施する．

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

3. ホワイトボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
3.1. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

      (A1) (A2) (A3) (A4) (A5) (A6) (A7) (A8) (A9) (A10)
(W_a)  F    F    T    T    F    F    F    T    T    F
--------------------------------------------------------
網羅   O    O    O    O    O    O    O    O    O    O

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
3.2. テストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(W_a) 以下の条件が成り立つ時．

  ・実行状態のタスクを指定した場合．
  ・アラームハンドラが起動する前の割込み優先度マスクが，全解除状態でな
    い場合．



以上．
