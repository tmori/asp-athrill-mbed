
	ras_tex テストシート

----------------------------------------------------------------------
 TTSP
     TOPPERS Test Suite Package

 Copyright (C) 2009-2011 by Center for Embedded Computing Systems
             Graduate School of Information Science, Nagoya Univ., JAPAN
 Copyright (C) 2009-2011 by Digital Craft Inc.
 Copyright (C) 2009-2011 by NEC Communication Systems, Ltd.
 Copyright (C) 2009-2011 by FUJISOFT INCORPORATED
 Copyright (C) 2009-2010 by Mitsuhiro Matsuura

 上記著作権者は，以下の (1)〜(3) の条件を満たす場合に限り，本ドキュメ
 ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
     および下記の無保証規定が，そのままの形でドキュメント中に含まれて
     いること．
 (2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
     を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
     ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
     りではない．
 (3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
     からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
     本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
     く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

 本ドキュメントは，無保証で提供されているものである．上記著作権者およ
 びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
 る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
 により直接的または間接的に生じたいかなる損害に関しても，その責任を負
 わない．

 $Id: ras_tex.txt 2 2012-05-09 02:23:52Z nces-shigihara $
----------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

0. API仕様

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

ras_tex		タスク例外処理の要求〔T〕
iras_tex	タスク例外処理の要求〔I〕

【C言語API】
	ER ercd = ras_tex(ID tskid, TEXPTN rasptn)
	ER ercd = iras_tex(ID tskid, TEXPTN rasptn)

【パラメータ】
	ID			tskid		対象タスクのID番号
	TEXPTN		rasptn		要求するタスク例外処理のタスク例外要因

【リターンパラメータ】
	ER			ercd		正常終了（E_OK）またはエラーコード

【エラーコード】
	E_CTX			コンテキストエラー（非タスクコンテキストからの呼出
					し：ras_texの場合，タスクコンテキストからの呼出し：
					iras_texの場合，CPUロック状態からの呼出し）
	E_ID			不正ID番号（tskidが不正）
	E_NOEXS〔D〕	オブジェクト未登録（対象タスクが未登録）
	E_OACV〔P〕		オブジェクトアクセス違反（対象タスクに対する通常操
					作2が許可されていない：ras_texの場合）
	E_PAR			パラメータエラー（rasptnが不正）
	E_OBJ			オブジェクト状態エラー（対象タスクが休止状態，対象
					タスクに対してタスク例外処理ルーチンが定義されてい
					ない）

【機能】

tskidで指定したタスク（対象タスク）に対して，rasptnで指定したタスク例外
要因のタスク例外処理を要求する．対象タスクの保留例外要因が，それまでの
値とrasptnで指定した値のビット毎論理和（C言語の"|"）に更新される．

対象タスクが休止状態である場合と，対象タスクに対してタスク例外処理ルー
チンが定義されていない場合には，E_OBJエラーとなる．

ras_texにおいてtskidにTSK_SELF（＝0）を指定すると，自タスクが対象タスク
となる．

rasptnが0の場合には，E_PARエラーとなる．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

1. 仕様ベースのブラックボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.1. エラー条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(a) ディスパッチ保留状態で呼出す場合．

    (a-1) 非タスクコンテキストから呼び出して，E_CTXエラーが返ること．

    (a-2) CPUロック状態で呼び出して，E_CTXエラーが返ること．

(b) tskidが不正の時にE_IDが返ること．

    (b-1) tskidが許容される最小値-1(-1)の時にE_IDが返ること．

    (b-2) tskidが許容される最大値+1(TNUM_TSKID+1)の時にE_IDが返ること．

(c) 対象タスクが休止状態の時にE_OBJが返ること．

(d) タスク例外処理ルーチンが定義されていないタスクを指定すると，
    E_OBJが返ること．

(e) rasptnに0を指定すると，E_PARが返ること．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.2. 正常条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(f) 自タスクにタスク例外処理ルーチンが定義された状態で呼び出すと，
    タスク例外処理が実行されること．

(g) 対象タスクをタスク例外処理ルーチンが定義された他タスクとして
    呼び出す．

    (g-1) 実行可能状態のタスクを指定する．対象タスクが
          実行状態となったとき，タスク例外処理が実行されること．

    (g-2) 起床待ち状態のタスクを指定する．対象タスクが
          実行状態となったとき，タスク例外処理が実行されること．

    (g-3) 時間経過待ち状態のタスクを指定する．対象タスクが
          実行状態となったとき，タスク例外処理が実行されること．

    (g-4) セマフォの資源獲得待ち(タイムアウト無)状態のタスクを
          指定する．対象タスクが実行状態となったとき，
          タスク例外処理が実行されること．

    (g-5) セマフォの資源獲得待ち(タイムアウト有)状態のタスクを
          指定する．対象タスクが実行状態となったとき，
          タスク例外処理が実行されること．

    (g-6) 強制待ち状態のタスクを指定する．対象タスクが
          実行状態となったとき，タスク例外処理が実行されること．

    (g-7) 二重待ち(起床待ち)状態のタスクを指定する．対象タスクが
          実行状態となったとき，タスク例外処理が実行されること．

    (g-8) 二重待ち(時間経過待ち)状態のタスクを指定する．対象タスクが
          実行状態となったとき，タスク例外処理が実行されること．

(h) タスク例外処理要求されているタスクを対象タスクを既として呼び出すと，
    タスク例外要因がビット毎論理和(C言語の"|")に更新されること．

(i) 対象タスクがタスク例外処理禁止状態の場合，タスク例外要因が更新され
    るが，実行状態になってもタスク例外は実行されないこと．

    (i-1) 対象タスクが自タスクの場合．

    (i-2) 対象タスクが他タスクの場合．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

2. ソースコードの条件網羅確認

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.1. ソースコード
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ER
ras_tex(ID tskid, TEXPTN rasptn)
{
	TCB		*p_tcb;
	ER		ercd;

	LOG_RAS_TEX_ENTER(tskid, rasptn);
	CHECK_TSKCTX_UNL();
	CHECK_TSKID_SELF(tskid);
	CHECK_PAR(rasptn != 0U);
	p_tcb = get_tcb_self(tskid);

	t_lock_cpu();
	if (TSTAT_DORMANT(p_tcb->tstat) || p_tcb->p_tinib->texrtn == NULL) {
		ercd = E_OBJ;
	}
	else {
		p_tcb->texptn |= rasptn;
		if (p_tcb == p_runtsk && p_runtsk->enatex && ipmflg) {
			call_texrtn();
		}
		ercd = E_OK;
	}
	t_unlock_cpu();

  error_exit:
	LOG_RAS_TEX_LEAVE(ercd);
	return(ercd);
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.2. マクロを展開したAPIと呼び出す内部関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[A] ras_tex

00 : ER
01 : ras_tex(ID tskid, TEXPTN rasptn)
02 : {
03 : 	TCB		*p_tcb;
04 : 	ER		ercd;
05 : 
06 : 	if (sense_context() || t_sense_lock()) {
07 : 		ercd = E_CTX;
08 : 		goto error_exit;
09 : 	}     
10 : 	if (!((TMIN_TSKID <= (tskid) && (tskid) <= tmax_tskid) || (tskid) == TSK_SELF)) {
11 : 		ercd = E_ID;
12 : 		goto error_exit;
13 : 	}
14 : 	if (!(rasptn != 0U)) {
15 : 		ercd = E_PAR;
16 : 		goto error_exit;
17 : 	}
18 : 	p_tcb = ((tskid) == TSK_SELF ? p_runtsk : (&(tcb_table[((uint_t)((tskid) - TMIN_TSKID))])));
19 : 
20 : 	t_lock_cpu();
21 : 	if (((p_tcb->tstat) == TS_DORMANT) || p_tcb->p_tinib->texrtn == NULL) {
22 : 		ercd = E_OBJ;
23 : 	}
24 : 	else {
25 : 		p_tcb->texptn |= rasptn;
26 : 		if (p_tcb == p_runtsk && p_runtsk->enatex && ipmflg) {
27 : 			call_texrtn();
28 : 		}
29 : 		ercd = E_OK;
30 : 	}
31 : 	t_unlock_cpu();
32 : 
33 :   error_exit:
34 : 	return(ercd);
35 : }

[B] call_texrtn

00 : void
01 : call_texrtn(void)
02 : {
03 : 	TEXPTN	texptn;
04 : 	bool_t	saved_disdsp;
05 : 
06 : 	saved_disdsp = disdsp;
07 : 	p_runtsk->enatex = false;
08 : 	do {
09 : 		texptn = p_runtsk->texptn;
10 : 		p_runtsk->texptn = 0U;
11 : 
12 : 		t_unlock_cpu();
13 : 		(*((TEXRTN)(p_runtsk->p_tinib->texrtn)))(texptn,
14 : 												p_runtsk->p_tinib->exinf);
15 : 		if (!t_sense_lock()) {
16 : 			t_lock_cpu();
17 : 		}
18 : 		if (!ipmflg) {
19 : 			t_set_ipm(TIPM_ENAALL);
20 : 			ipmflg = true;
21 : 		}
22 : 		disdsp = saved_disdsp;
23 : 		dspflg = !disdsp;
24 : 		p_runtsk->enatex = false;
25 : 		if (p_runtsk != p_schedtsk && dspflg) {
26 : 			/*
27 : 			 *  ここでdispatchを呼び出す処理は，相互再帰呼出しになって
28 : 			 *  いるが，dispatchを呼ぶ前にp_runtsk->enatexをfalseにして
29 : 			 *  おけば支障がない．その理由については，「TOPPERS/ASP カー
30 : 			 *  ネル 設計メモ」を参照のこと．
31 : 			 */
32 : 			dispatch();
33 : 		}
34 : 	} while (p_runtsk->texptn != 0U);
35 : 	p_runtsk->enatex = true;
36 : }

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.3. 条件式
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(A1)  06 : sense_context()
(A2)  06 : t_sense_lock()
(A3)  10 : TMIN_TSKID <= (tskid)
(A4)  10 : (tskid) <= tmax_tskid
(A5)  10 : (tskid) == TSK_SELF
(A6)  14 : !(rasptn != 0U)
(A7)  18 : (tskid) == TSK_SELF
(A8)  21 : (p_tcb->tstat) == TS_DORMANT
(A9)  21 : p_tcb->p_tinib->texrtn == NULL
(A10) 26 : p_tcb == p_runtsk
(A11) 26 : p_runtsk->enatex
(A12) 26 : ipmflg

(B1)  15 : !t_sense_lock()
(B2)  18 : !ipmflg
(B3)  25 : p_runtsk != p_schedtsk
(B4)  25 : dspflg
(B5)  34 : p_runtsk->texptn != 0U

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.4. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

      (A1) (A2) (A3) (A4) (A5) (A6) (A7) (A8) (A9) (A10) (A11) (A12) (B1) (B2) (B3) (B4) (B5)
(a-1)  T   D/F   D    D    D    D    D    D    D    D     D     D     D    D    D    D    D
(a-2)  F    T    D    D    D    D    D    D    D    D     D     D     D    D    D    D    D
(b-1)  F    F    F   D/T   F    D    D    D    D    D     D     D     D    D    D    D    D
(b-2)  F    F    T    F    F    D    D    D    D    D     D     D     D    D    D    D    D
(c)    F    F    T    T   D/F   F    F    T   D/F   D     D     D     D    D    D    D    D
(d)    F    F    T    T   D/F   F    F    F    T    D     D     D     D    D    D    D    D
(e)    F    F    T    T   D/F   T    D    D    D    D     D     D     D    D    D    D    D
(f)    F    F    F   D/T   T    F    T    F    F    T     T     T     T    F    F   D/T   F
(g-1)  F    F    T    T   D/F   F    F    F    F    F    D/T   D/T    T    F    F   D/T   F
(g-2)  F    F    T    T   D/F   F    F    F    F    F    D/T   D/T    T    F    F   D/T   F
(g-3)  F    F    T    T   D/F   F    F    F    F    F    D/T   D/T    T    F    F   D/T   F
(g-4)  F    F    T    T   D/F   F    F    F    F    F    D/T   D/T    T    F    F   D/T   F
(g-5)  F    F    T    T   D/F   F    F    F    F    F    D/T   D/T    T    F    F   D/T   F
(g-6)  F    F    T    T   D/F   F    F    F    F    F    D/T   D/T    T    F    F   D/T   F
(g-7)  F    F    T    T   D/F   F    F    F    F    F    D/T   D/T    T    F    F   D/T   F
(g-8)  F    F    T    T   D/F   F    F    F    F    F    D/T   D/T    T    F    F   D/T   F
(h)    F    F    T    T   D/F   F    F    F    F    F    D/T   D/T    D    D    D    D    D
(i-1)  F    F    F   D/T   T    F    T    F    F    T     F    D/T    D    D    D    D    D
(i-2)  F    F    T    T   D/F   F    F    F    F    F    D/F   D/T    D    D    D    D    D
---------------------------------------------------------------------------------------------
網羅   O    O    O    O    O    O    O    O    O    O     O     X     X    X    X    X    X

【備考】
・g-Xの(B1)〜(B5)はディスパッチ発生後，対象タスクが実行状態となった際に，
  call_texrtnが呼ばれたときの条件網羅である．
・call_texrtn内の命令網羅を実現するために，f，g-Xではタスク例外処理ルー
  チンが終了するまでをテストとする．
・gcovにてcall_texrtnのカバレッジを取得するために，f，g-Xでは複数のdoを
  gcov対象とする．
・(A12)(B1)(B2)(B3)(B4)(B5)の網羅をさせるために，以下にホワイトボックス
  テストを実施する．

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

3. ホワイトボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
3.1. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

      (A1) (A2) (A3) (A4) (A5) (A6) (A7) (A8) (A9) (A10) (A11) (A12) (B1) (B2) (B3) (B4)  (B5)
(W_a)  F    F    T    T   D/F   F    F    F    F    F    D/T   D/T    F    F    F   D/T    F
(W_b)  F    F    F   D/T   T    F    T    F    F    T     T     T     T    F    T    F     F
(W_c)  F    F    F   D/T   T    F    T    F    F    T     T     T     T    F    T    T     F
(W_d)  F    F    T    T   D/F   F    F    F    F    F    D/T   D/T    TT   FF   FF  D/TD/T TF
(W_e)  F    F    F   D/T   T    F    T    F    F    T     T     F     T    F    F   D/T    F
(W_f)  F    F    F   D/T   T    F    T    F    F    T     T     T     T    T    F   D/T    F
---------------------------------------------------------------------------------------------
網羅   O    O    O    O    O    O    O    O    O    O     O     O     O    O    O    O     O

【備考】
・W-a，W-dの(B1)〜(B5)はディスパッチ発生後，対象タスクが実行状態となっ
  た際に，call_texrtnが呼ばれたときの条件網羅である．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
3.2. テストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(W_a) 以下の条件が成り立つ時．

  ・他タスクを指定した場合．
  ・タスク例外処理の中でCPUロックした場合．

(W_b) 以下の条件が成り立つ時．

  ・自タスクを指定した場合．
  ・ディスパッチ禁止状態の場合．
  ・タスク例外処理の中で自タスクより
    優先度の高いタスクを実行可能状態へ移行した場合．

(W_c) 以下の条件が成り立つ時．

  ・自タスクを指定した場合．
  ・タスク例外処理の中でディスパッチ禁止状態とし，自タスクより
    優先度の高いタスクを実行可能状態へ移行した場合．

(W_d) 以下の条件が成り立つ時．

  ・他タスクを指定した場合．
  ・タスク例外処理ルーチンの中で，ras_texにより再度タスク例外要求した場
    合．

(W_e) 以下の条件が成り立つ時．
  ・自タスクを指定した場合．
  ・割込み優先度マスクが全解除状態でない場合．

(W_f) 以下の条件が成り立つ時．
  ・自タスクを指定した場合．
  ・タスク例外処理ルーチンの中で，chg_ipmにより割込み優先度マスクを全解
    除状態でない状態にした場合．



以上．
