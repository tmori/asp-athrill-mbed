
	rot_rdq テストシート

----------------------------------------------------------------------
 TTSP
     TOPPERS Test Suite Package

 Copyright (C) 2009-2011 by Center for Embedded Computing Systems
             Graduate School of Information Science, Nagoya Univ., JAPAN
 Copyright (C) 2009-2011 by Digital Craft Inc.
 Copyright (C) 2009-2011 by NEC Communication Systems, Ltd.
 Copyright (C) 2009-2011 by FUJISOFT INCORPORATED
 Copyright (C) 2009-2010 by Mitsuhiro Matsuura

 上記著作権者は，以下の (1)〜(3) の条件を満たす場合に限り，本ドキュメ
 ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
     および下記の無保証規定が，そのままの形でドキュメント中に含まれて
     いること．
 (2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
     を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
     ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
     りではない．
 (3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
     からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
     本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
     く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

 本ドキュメントは，無保証で提供されているものである．上記著作権者およ
 びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
 る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
 により直接的または間接的に生じたいかなる損害に関しても，その責任を負
 わない．

 $Id: rot_rdq.txt 2 2012-05-09 02:23:52Z nces-shigihara $
----------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

0. API仕様

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

rot_rdq		タスクの優先順位の回転〔T〕
irot_rdq	タスクの優先順位の回転〔I〕

【C言語API】
	ER ercd = rot_rdq(PRI tskpri)
	ER ercd = irot_rdq(PRI tskpri)

【パラメータ】
	PRI	　		tskpri		回転対象の優先度（対象優先度）

【リターンパラメータ】
	ER			ercd		正常終了（E_OK）またはエラーコード

【エラーコード】
	E_CTX			コンテキストエラー（非タスクコンテキストからの呼出
					し：rot_rdqの場合，タスクコンテキストからの呼出し：
					irot_rdqの場合，CPUロック状態からの呼出し）
	E_NOSPT			未サポート機能（対象優先度の最も優先順位が高いタス
					クが制約タスク）
	E_PAR			パラメータエラー（tskpriが不正）
	E_OACV〔P〕		オブジェクトアクセス違反（システム状態に対する通常
					操作1が許可されていない）

【機能】

tskpriで指定した優先度（対象優先度）を持つ実行できる状態のタスクの中で，
最も優先順位が高いタスクを，同じ優先度のタスクの中で最も優先順位が低い
状態にする．対象優先度を持つ実行できる状態のタスクが無いか1つのみの場合
には，何も行われずに正常終了する．

rot_rdqにおいて，tskpriにTPRI_SELF（＝0）を指定すると，自タスクのベース
優先度が対象優先度となる．

対象優先度を持つ実行できる状態のタスクの中で，最も優先順位が高いタスク
が制約タスクの場合には，E_NOSPTエラーとなる．

tskpriは，TPRI_SELFであるか（rot_rdqの場合のみ），TMIN_TPRI以上，
TMAX_TPRI以下でなければならない．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

１．仕様ベースのブラックボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.1. エラー条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(a) ディスパッチ保留状態で呼出す場合．

    (a-1) 非タスクコンテキストから呼び出して，E_CTXエラーが返ること．

    (a-2) CPUロック状態で呼び出して，E_CTXエラーが返ること．

(b) tskpriが不正の場合．

    (b-1) tskpriが許容される最小値-1(=-1)の時にE_PARが返ること．

    (b-2) tskpriが許容される最大値+1(TMAX_TPRI+1)の時にE_PARが返ること．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.2. 正常条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(c) tskpriで指定した優先度(対象優先度)を持つ実行できる状態のタスクが2つ
    ある場合，最も優先順位が高いタスクを，同じ優先度のタスクの中で最も
    優先順位が低い状態にすること．

    (c-1) tskpriに実行状態のタスクの優先度を指定した場合．
          (tskpri=TPRI_SELF)

          (c-1-1) 自タスクが実行可能状態になること．

          (c-1-2) ディスパッチ禁止状態の場合，自タスクは実行状態のまま
                  になること．

          (c-1-3) 割込み優先度マスクが全解除でない場合，自タスクは実行
                  状態のままになること．

    (c-2) tskpriに実行状態のタスクの優先度ではない優先度を指定した場合．

(d) tskpriで指定した優先度(対象優先度)を持つ実行できる状態のタスクが3つ
    ある場合，最も優先順位が高いタスクを，同じ優先度のタスクの中で最も
    優先順位が低い状態にすること．

    (d-1) tskpriに実行状態のタスクの優先度を指定した場合．
          (tskpri=TPRI_SELF)

          (d-1-1) 自タスクが実行可能状態になること．

          (d-1-2) ディスパッチ禁止状態の場合，自タスクは実行状態のまま
                  になること．

          (d-1-3) 割込み優先度マスクが全解除でない場合，自タスクは実行
                  状態のままになること．

    (d-2) tskpriに実行状態のタスクの優先度ではない優先度を指定した場合．

(e) 対象優先度を持つ実行できる状態のタスクが無いか1つのみの場合には，
    何も行われずに正常終了すること．

    (e-1) タスクが無い場合．

    (e-2) タスクが1つのみの場合．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.3 テストシナリオ
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
----------------------------------------------------------------------
(a) ディスパッチ保留状態で呼出す場合．

    (a-1) 非タスクコンテキストから呼び出して，E_CTXエラーが返ること．
----------------------------------------------------------------------

前状態
	タイプ	: アラームハンドラ
	ID		: ALM1
	状態	: 実行中

	タイプ	: タスク
	ID		: TASK1
	状態	: 実行

処理
	ALM1がrot_rdq(中)を発行し，
	エラーコードとしてE_CTXが返る．

後状態
	タイプ	: アラームハンドラ
	ID		: ALM1
	状態	: 停止中

----------------------------------------------------------------------
(a) ディスパッチ保留状態で呼出す場合．

    (a-2) CPUロック状態で呼び出して，E_CTXエラーが返ること．
----------------------------------------------------------------------

前状態
	タイプ	: タスク
	ID		: TASK1
	状態	: 実行

	タイプ		: CPU状態
	ID			: CPU_STATE
	CPUロック	: CPUロック状態
	
処理
	TASK1がrot_rdq(中)を発行し，
	エラーコードとしてE_CTXが返る．

後状態
	タイプ	: タスク
	ID		: TASK1
	状態	: 実行

	タイプ		: CPU状態
	ID			: CPU_STATE
	CPUロック	: CPUロック状態

----------------------------------------------------------------------
(b) tskpriが不正の場合．

    (b-1) tskpriが許容される最小値-1(=-1)の時にE_PARが返ること．
----------------------------------------------------------------------

前状態
	タイプ	: タスク
	ID		: TASK1
	状態	: 実行

処理
	TASK1がrot_rdq(-1)を発行し，
	エラーコードとしてE_PARが返る．

後状態
	タイプ	: タスク
	ID		: TASK1
	状態	: 実行

----------------------------------------------------------------------
(b) tskpriが不正の場合．

    (b-2) tskpriが許容される最大値+1(TMAX_TPRI+1)の時にE_PARが返ること．
----------------------------------------------------------------------

前状態
	タイプ	: タスク
	ID		: TASK1
	状態	: 実行

処理
	TASK1がrot_rdq(TMAX_TPRI+1)を発行し，
	エラーコードとしてE_PARが返る．

前状態
	タイプ	: タスク
	ID		: TASK1
	状態	: 実行

----------------------------------------------------------------------
(c) tskpriで指定した優先度(対象優先度)を持つ実行できる状態のタスクが2つ
    ある場合，最も優先順位が高いタスクを，同じ優先度のタスクの中で最も
    優先順位が低い状態にすること．

    (c-1) tskpriに実行状態のタスクの優先度を指定した場合．
          (tskpri=TPRI_SELF)

          (c-1-1) 自タスクが実行可能状態になること．
----------------------------------------------------------------------

前状態
	タイプ					: タスク
	ID						: TASK1
	優先度					: 中
	状態					: 実行
	レディーキュー内での順位: 1

	タイプ					: タスク
	ID						: TASK2
	優先度					: 中
	状態					: 実行可能
	レディーキュー内での順位: 2

処理
	TASK1がrot_rdq(TPRI_SELF)を発行する．

後状態
	タイプ					: タスク
	ID						: TASK1
	優先度					: 中
	状態					: 実行可能
	レディーキュー内での順位: 2

	タイプ					: タスク
	ID						: TASK2
	優先度					: 中
	状態					: 実行
	レディーキュー内での順位: 1

----------------------------------------------------------------------
(c) tskpriで指定した優先度(対象優先度)を持つ実行できる状態のタスクが2つ
    ある場合，最も優先順位が高いタスクを，同じ優先度のタスクの中で最も
    優先順位が低い状態にすること．

    (c-1) tskpriに実行状態のタスクの優先度を指定した場合．
          (tskpri=TPRI_SELF)

          (c-1-2) ディスパッチ禁止状態の場合，自タスクは実行状態のまま
                  になること．
----------------------------------------------------------------------

前状態
	タイプ					: タスク
	ID						: TASK1
	優先度					: 中
	状態					: 実行
	レディーキュー内での順位: 1

	タイプ					: タスク
	ID						: TASK2
	優先度					: 中
	状態					: 実行可能
	レディーキュー内での順位: 2

	タイプ					: CPU状態
	ID						: CPU_STATE
	ディスパッチ禁止フラグ	: 禁止

処理
	TASK1がrot_rdq(TPRI_SELF)を発行し，
	エラーコードとしてE_OKが返る．

後状態
	タイプ					: タスク
	ID						: TASK1
	優先度					: 中
	状態					: 実行
	レディーキュー内での順位: 2

	タイプ					: タスク
	ID						: TASK2
	優先度					: 中
	状態					: 実行可能
	レディーキュー内での順位: 1

	タイプ					: CPU状態
	ID						: CPU_STATE
	ディスパッチ禁止フラグ	: 禁止

----------------------------------------------------------------------
(c) tskpriで指定した優先度(対象優先度)を持つ実行できる状態のタスクが2つ
    ある場合，最も優先順位が高いタスクを，同じ優先度のタスクの中で最も
    優先順位が低い状態にすること．

    (c-1) tskpriに実行状態のタスクの優先度を指定した場合．
          (tskpri=TPRI_SELF)

          (c-1-3) 割込み優先度マスクが全解除でない場合，自タスクは実行
                  状態のままになること．
----------------------------------------------------------------------

前状態
	タイプ					: タスク
	ID						: TASK1
	優先度					: 中
	状態					: 実行
	レディーキュー内での順位: 1

	タイプ					: タスク
	ID						: TASK2
	優先度					: 中
	状態					: 実行可能
	レディーキュー内での順位: 2

	タイプ					: CPU状態
	ID						: CPU_STATE
	割り込み優先度マスクの値: -1

処理
	TASK1がrot_rdq(TPRI_SELF)を発行し，
	エラーコードとしてE_OKが返る．

後状態
	タイプ					: タスク
	ID						: TASK1
	優先度					: 中
	状態					: 実行
	レディーキュー内での順位: 2

	タイプ					: タスク
	ID						: TASK2
	優先度					: 中
	状態					: 実行可能
	レディーキュー内での順位: 1

	タイプ					: CPU状態
	ID						: CPU_STATE
	割り込み優先度マスクの値: -1

----------------------------------------------------------------------
(c) tskpriで指定した優先度(対象優先度)を持つ実行できる状態のタスクが2つ
    ある場合，最も優先順位が高いタスクを，同じ優先度のタスクの中で最も
    優先順位が低い状態にすること．

    (c-2) tskpriに実行状態のタスクの優先度ではない優先度を指定した場合．
----------------------------------------------------------------------

前状態
	タイプ					: タスク
	ID						: TASK1
	優先度					: 高
	状態					: 実行
	レディーキュー内での順位: 1

	タイプ					: タスク
	ID						: TASK2
	優先度					: 中
	状態					: 実行可能
	レディーキュー内での順位: 1

	タイプ					: タスク
	ID						: TASK3
	優先度					: 中
	状態					: 実行可能
	レディーキュー内での順位: 2

処理
	TASK1がrot_rdq(中)を発行し，
	エラーコードとしてE_OKが返る．

後状態
	タイプ					: タスク
	ID						: TASK1
	優先度					: 高
	状態					: 実行
	レディーキュー内での順位: 1

	タイプ					: タスク
	ID						: TASK2
	優先度					: 中
	状態					: 実行可能
	レディーキュー内での順位: 2

	タイプ					: タスク
	ID						: TASK3
	優先度					: 中
	状態					: 実行可能
	レディーキュー内での順位: 1

----------------------------------------------------------------------
(d) tskpriで指定した優先度(対象優先度)を持つ実行できる状態のタスクが3つ
    ある場合，最も優先順位が高いタスクを，同じ優先度のタスクの中で最も
    優先順位が低い状態にすること．

    (d-1) tskpriに実行状態のタスクの優先度を指定した場合．
          (tskpri=TPRI_SELF)

          (d-1-1) 自タスクが実行可能状態になること．
----------------------------------------------------------------------

前状態
	タイプ					: タスク
	ID						: TASK1
	優先度					: 中
	状態					: 実行
	レディーキュー内での順位: 1

	タイプ					: タスク
	ID						: TASK2
	優先度					: 中
	状態					: 実行可能
	レディーキュー内での順位: 2

	タイプ					: タスク
	ID						: TASK3
	優先度					: 中
	状態					: 実行可能
	レディーキュー内での順位: 3

処理
	TASK1がrot_rdq(TPRI_SELF)を発行する．

後状態
	タイプ					: タスク
	ID						: TASK1
	優先度					: 中
	状態					: 実行可能
	レディーキュー内での順位: 3

	タイプ					: タスク
	ID						: TASK2
	優先度					: 中
	状態					: 実行
	レディーキュー内での順位: 1

	タイプ					: タスク
	ID						: TASK3
	優先度					: 中
	状態					: 実行可能
	レディーキュー内での順位: 2

----------------------------------------------------------------------
(d) tskpriで指定した優先度(対象優先度)を持つ実行できる状態のタスクが3つ
    ある場合，最も優先順位が高いタスクを，同じ優先度のタスクの中で最も
    優先順位が低い状態にすること．

    (d-1) tskpriに実行状態のタスクの優先度を指定した場合．
          (tskpri=TPRI_SELF)

          (d-1-2) ディスパッチ禁止状態の場合，自タスクは実行状態のまま
                  になること．
----------------------------------------------------------------------

前状態
	タイプ					: タスク
	ID						: TASK1
	優先度					: 中
	状態					: 実行
	レディーキュー内での順位: 1

	タイプ					: タスク
	ID						: TASK2
	優先度					: 中
	状態					: 実行可能
	レディーキュー内での順位: 2

	タイプ					: タスク
	ID						: TASK3
	優先度					: 中
	状態					: 実行可能
	レディーキュー内での順位: 3

	タイプ					: CPU状態
	ID						: CPU_STATE
	ディスパッチ禁止フラグ	: 禁止

処理
	TASK1がrot_rdq(TPRI_SELF)を発行し，
	エラーコードとしてE_OKが返る．

後状態
	タイプ					: タスク
	ID						: TASK1
	優先度					: 中
	状態					: 実行
	レディーキュー内での順位: 3

	タイプ					: タスク
	ID						: TASK2
	優先度					: 中
	状態					: 実行可能
	レディーキュー内での順位: 1

	タイプ					: タスク
	ID						: TASK3
	優先度					: 中
	状態					: 実行可能
	レディーキュー内での順位: 2

	タイプ					: CPU状態
	ID						: CPU_STATE
	ディスパッチ禁止フラグ	: 禁止

----------------------------------------------------------------------
(d) tskpriで指定した優先度(対象優先度)を持つ実行できる状態のタスクが3つ
    ある場合，最も優先順位が高いタスクを，同じ優先度のタスクの中で最も
    優先順位が低い状態にすること．

    (d-1) tskpriに実行状態のタスクの優先度を指定した場合．
          (tskpri=TPRI_SELF)

          (d-1-3) 割込み優先度マスクが全解除でない場合，自タスクは実行
                  状態のままになること．
----------------------------------------------------------------------

前状態
	タイプ					: タスク
	ID						: TASK1
	優先度					: 中
	状態					: 実行
	レディーキュー内での順位: 1

	タイプ					: タスク
	ID						: TASK2
	優先度					: 中
	状態					: 実行可能
	レディーキュー内での順位: 2

	タイプ					: タスク
	ID						: TASK3
	優先度					: 中
	状態					: 実行可能
	レディーキュー内での順位: 3

	タイプ					: CPU状態
	ID						: CPU_STATE
	割り込み優先度マスクの値: -1

処理
	TASK1がrot_rdq(TPRI_SELF)を発行し，
	エラーコードとしてE_OKが返る．

後状態
	タイプ					: タスク
	ID						: TASK1
	優先度					: 中
	状態					: 実行
	レディーキュー内での順位: 3

	タイプ					: タスク
	ID						: TASK2
	優先度					: 中
	状態					: 実行可能
	レディーキュー内での順位: 1

	タイプ					: タスク
	ID						: TASK3
	優先度					: 中
	状態					: 実行可能
	レディーキュー内での順位: 2

	タイプ					: CPU状態
	ID						: CPU_STATE
	割り込み優先度マスクの値: -1

----------------------------------------------------------------------
(d) tskpriで指定した優先度(対象優先度)を持つ実行できる状態のタスクが3つ
    ある場合，最も優先順位が高いタスクを，同じ優先度のタスクの中で最も
    優先順位が低い状態にすること．

    (d-2) tskpriに実行状態のタスクの優先度ではない優先度を指定した場合．
----------------------------------------------------------------------

前状態
	タイプ					: タスク
	ID						: TASK1
	優先度					: 高
	状態					: 実行
	レディーキュー内での順位: 1

	タイプ					: タスク
	ID						: TASK2
	優先度					: 中
	状態					: 実行可能
	レディーキュー内での順位: 1

	タイプ					: タスク
	ID						: TASK3
	優先度					: 中
	状態					: 実行可能
	レディーキュー内での順位: 2

	タイプ					: タスク
	ID						: TASK4
	優先度					: 中
	状態					: 実行可能
	レディーキュー内での順位: 3

処理
	TASK1がrot_rdq(中)を発行し，
	エラーコードとしてE_OKが返る．

後状態
	タイプ					: タスク
	ID						: TASK1
	優先度					: 高
	状態					: 実行
	レディーキュー内での順位: 1

	タイプ					: タスク
	ID						: TASK2
	優先度					: 中
	状態					: 実行可能
	レディーキュー内での順位: 3

	タイプ					: タスク
	ID						: TASK3
	優先度					: 中
	状態					: 実行可能
	レディーキュー内での順位: 1.

	タイプ					: タスク
	ID						: TASK4
	優先度					: 中
	状態					: 実行可能
	レディーキュー内での順位: 2


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

2. ソースコードの条件網羅確認

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.1. ソースコード
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ER
rot_rdq(PRI tskpri)
{
	uint_t	pri;
	ER		ercd;

	LOG_ROT_RDQ_ENTER(tskpri);
	CHECK_TSKCTX_UNL();
	CHECK_TPRI_SELF(tskpri);

	t_lock_cpu();
	pri = (tskpri == TPRI_SELF) ? p_runtsk->priority : INT_PRIORITY(tskpri);
	if (rotate_ready_queue(pri)) {
		dispatch();
	}
	ercd = E_OK;
	t_unlock_cpu();

  error_exit:
	LOG_ROT_RDQ_LEAVE(ercd);
	return(ercd);
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.2. マクロを展開したAPIと呼び出す内部関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[A] rot_rdq

00 : ER
01 : rot_rdq(PRI tskpri)
02 : {
03 : 	uint_t	pri;
04 : 	ER		ercd;
05 : 
06 :    if (sense_context() || t_sense_lock()) {
07 :        ercd = E_CTX;
08 :        goto error_exit;
09 :    }
10 :    if (!((TMIN_TPRI <= (tskpri) && (tskpri) <= TMAX_TPRI) || (tskpri) == TPRI_SELF)) {
11 :        ercd = E_PAR;
12 :        goto error_exit;
13 :    }
14 : 
15 : 	t_lock_cpu();
16 : 	pri = (tskpri == TPRI_SELF) ? p_runtsk->priority : ((uint_t)((tskpri) - TMIN_TPRI))
17 : 	if (rotate_ready_queue(pri)) {
18 : 		dispatch();
19 : 	}
20 : 	ercd = E_OK;
21 : 	t_unlock_cpu();
22 : 
23 :   error_exit:
24 : 	return(ercd);
25 : }

[B] rotate_ready_queue

00 : bool_t
01 : rotate_ready_queue(uint_t pri)
02 : {
03 :     QUEUE   *p_queue = &(ready_queue[pri]);
04 :     QUEUE   *p_entry;
05 : 
06 :     if (!queue_empty(p_queue) && p_queue->p_next->p_next != p_queue) {
07 :         p_entry = queue_delete_next(p_queue);
08 :         queue_insert_prev(p_queue, p_entry);
09 :         if (p_schedtsk == (TCB *) p_entry) {
10 :             p_schedtsk = (TCB *)(p_queue->p_next);
11 :             return(dspflg);
12 :         }
13 :     }
14 :     return(false);
15 : }

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.3. 条件式
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(A1) 06 : sense_context()
(A2) 06 : t_sense_lock()
(A3) 10 : TMIN_TPRI <= (tskpri)
(A4) 10 : (tskpri) <= TMAX_TPRI
(A5) 10 : (tskpri) == TPRI_SELF
(A6) 16 : tskpri == TPRI_SELF
(A7) 17 : rotate_ready_queue(pri)

(B1) 06 : !queue_empty(p_queue)
(B2) 06 : p_queue->p_next->p_next != p_queue
(B3) 09 : p_schedtsk == (TCB *) p_entry

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.4. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
         (A1) (A2) (A3) (A4) (A5) (A6) (A7) (B1) (B2) (B3)
(a-1)     T   D/F   D    D    D    D    D    D    D    D
(a-2)     F    T    D    D    D    D    D    D    D    D
(b-1)     F    F    F   D/T   F    D    D    D    D    D
(b-2)     F    F    T    F    F    D    D    D    D    D
(c-1-1)   F    F    F   D/T   T    T    T    T    T    T
(c-1-2)   F    F    F   D/T   T    T    F    T    T    T
(c-1-3)   F    F    F   D/T   T    T    F    T    T    T
(c-2)     F    F    T    T   D/F   F    F    T    T    F
(d-1-1)   F    F    F   D/T   T    T    T    T    T    T
(d-1-2)   F    F    F   D/T   T    T    F    T    T    T
(d-1-3)   F    F    F   D/T   T    T    F    T    T    T
(d-2)     F    F    T    T   D/F   F    F    T    T    F
(e-1)     F    F    T    T   D/F   F    F    F   D/F   D
(e-2)     F    F    T    T   D/F   F    F    T    F    D
----------------------------------------------------------
網羅      O    O    O    O    O    O    O    O    O    O


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

3. ホワイトボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
必要なし．



以上．
