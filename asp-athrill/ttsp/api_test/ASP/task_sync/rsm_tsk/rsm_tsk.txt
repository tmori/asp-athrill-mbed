
	rsm_tsk テストシート

----------------------------------------------------------------------
 TTSP
     TOPPERS Test Suite Package

 Copyright (C) 2009-2011 by Center for Embedded Computing Systems
             Graduate School of Information Science, Nagoya Univ., JAPAN
 Copyright (C) 2009-2011 by Digital Craft Inc.
 Copyright (C) 2009-2011 by NEC Communication Systems, Ltd.
 Copyright (C) 2009-2011 by FUJISOFT INCORPORATED
 Copyright (C) 2009-2010 by Mitsuhiro Matsuura

 上記著作権者は，以下の (1)〜(3) の条件を満たす場合に限り，本ドキュメ
 ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
     および下記の無保証規定が，そのままの形でドキュメント中に含まれて
     いること．
 (2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
     を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
     ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
     りではない．
 (3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
     からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
     本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
     く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

 本ドキュメントは，無保証で提供されているものである．上記著作権者およ
 びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
 る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
 により直接的または間接的に生じたいかなる損害に関しても，その責任を負
 わない．

 $Id: rsm_tsk.txt 2 2012-05-09 02:23:52Z nces-shigihara $
----------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

0. API仕様

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

rsm_tsk		強制待ち状態からの再開〔T〕

【C言語API】
	ER ercd = rsm_tsk(ID tskid)

【パラメータ】
	ID			tskid		対象タスクのID番号

【リターンパラメータ】
	ER			ercd		正常終了（E_OK）またはエラーコード

【エラーコード】
	E_CTX			コンテキストエラー（非タスクコンテキストからの呼出
					し，CPUロック状態からの呼出し）
	E_NOSPT			未サポート機能（対象タスクが制約タスク）
	E_ID			不正ID番号（tskidが不正）
	E_NOEXS〔D〕	オブジェクト未登録（対象タスクが未登録）
	E_OACV〔P〕		オブジェクトアクセス違反（対象タスクに対する通常操
					作2が許可されていない）
	E_OBJ			オブジェクト状態エラー（対象タスクが強制待ち状態で
					ない）

【機能】

tskidで指定したタスク（対象タスク）を，強制待ちから再開する．具体的な振
舞いは以下の通り．

対象タスクが強制待ち状態である場合には，対象タスクは強制待ちから再開さ
れる．強制待ち状態でない場合には，E_OBJエラーとなる．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

1. 仕様ベースのブラックボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.1. エラー条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(a) ディスパッチ保留状態で呼出す場合．

    (a-1) 非タスクコンテキストから呼び出して，E_CTXエラーが返ること．

    (a-2) CPUロック状態で呼び出して，E_CTXエラーが返ること．

(b) tskidが不正の時にE_IDが返ること．

    (b-1) tskidが許容される最小値-1(0)の時にE_IDが返ること．

    (b-2) tskidが許容される最大値+1(TNUM_TSKID+1)の時にE_IDが返ること．

(c) 対象タスクが強制待ち状態でない場合．

    (c-1) 対象タスクが実行可能状態の時にE_OBJが返ること．

    (c-2) 対象タスクが起床待ち状態の時にE_OBJが返ること．

    (c-3) 対象タスクが時間経過待ち状態の時にE_OBJが返ること．

    (c-4) 対象タスクがセマフォの資源獲得待ち(タイムアウト無)状態の時に
          E_OBJが返ること．

    (c-5) 対象タスクがセマフォの資源獲得待ち(タイムアウト有)状態の時に
          E_OBJが返ること．

    (c-6) 対象タスクが休止状態の時にE_OBJが返ること．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.2. 正常条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(d) 強制待ち状態のタスクを指定して呼び出す．

    (d-1) 対象タスクの優先度が，実行状態のタスクより高い場合．

          (d-1-1) 実行状態になること．

          (d-1-2) ディスパッチ禁止状態の場合，
                  実行可能状態になること．

          (d-1-3) 割込み優先度マスクが全解除でない場合，
                  実行可能状態になること．

    (d-2) 対象タスクの優先度が，実行状態のタスクより低い場合，
          実行可能状態になり，同じ優先度のタスクの最後につながれること．

    (d-3) 対象タスクの優先度が，実行状態のタスクと同じ場合，
          実行可能状態となり，同じ優先度のタスクの最後につながれること．

(e) 二重待ち状態のタスクを指定して呼び出す．

    (e-1) 二重待ち(起床待ち)状態のタスクを指定して呼び出すと，
          起床待ち状態となること．

    (e-2) 二重待ち(時間経過待ち)状態のタスクを指定して呼び出すと，
          時間経過待ち状態となること．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

2. ソースコードの条件網羅確認

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.1. ソースコード
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ER
rsm_tsk(ID tskid)
{
	TCB	 *p_tcb;
	ER	  ercd;

	LOG_RSM_TSK_ENTER(tskid);
	CHECK_TSKCTX_UNL();
	CHECK_TSKID(tskid);
	p_tcb = get_tcb(tskid);

	t_lock_cpu();
	if (!TSTAT_SUSPENDED(p_tcb->tstat)) {
		ercd = E_OBJ;
	}
	else if (!TSTAT_WAITING(p_tcb->tstat)) {
		/*
		 *  強制待ち状態から実行できる状態への遷移
		 */
		p_tcb->tstat = TS_RUNNABLE;
		LOG_TSKSTAT(p_tcb);
		if (make_runnable(p_tcb)) {
			dispatch();
		}
		ercd = E_OK;
	}
	else {
		/*
		 *  二重待ち状態から待ち状態への遷移
		 */
		p_tcb->tstat &= ~TS_SUSPENDED;
		LOG_TSKSTAT(p_tcb);
		ercd = E_OK;
	}
	t_unlock_cpu();

  error_exit:
	LOG_RSM_TSK_LEAVE(ercd);
	return(ercd);
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.2. マクロを展開したAPIと呼び出す内部関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[A] rsm_tsk

00 : ER
01 : rsm_tsk(ID tskid)
02 : {
03 : 	TCB	*p_tcb;
04 : 	ER	ercd;
05 : 
06 : 	if (sense_context() || t_sense_lock()) {
07 : 		ercd = E_CTX;
08 : 		goto error_exit;
09 : 	}
10 : 	if (!(TMIN_TSKID <= (tskid) && (tskid) <= tmax_tskid)) {
11 : 		ercd = E_ID;
12 : 		goto error_exit;
13 : 	}
14 : 
15 : 	p_tcb = (&(tcb_table[((uint_t)((tskid) - TMIN_TSKID))]));
16 : 
17 : 	t_lock_cpu();
18 : 	if (!(((p_tcb->tstat) & TS_SUSPENDED) != 0U)) {
19 : 		ercd = E_OBJ;
20 : 	}
21 : 	else if (!(((p_tcb->tstat) & TS_WAITING) != 0U)) {
22 : 		/*
23 : 		*  強制待ち状態から実行できる状態への遷移
24 : 		*/
25 : 		p_tcb->tstat = TS_RUNNABLE;
26 : 		if (make_runnable(p_tcb)) {
27 : 			dispatch();
28 : 		}
29 : 		ercd = E_OK;
30 : 	}
31 : 	else {
32 : 		/*
33 : 		*  二重待ち状態から待ち状態への遷移
34 : 		*/
35 : 		p_tcb->tstat &= ~TS_SUSPENDED;
36 : 		ercd = E_OK;
37 : 	}
38 : 	t_unlock_cpu();
39 : 
40 :   error_exit:
41 : 	return(ercd);
42 : }

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.3. 条件式
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(A1) 06 : sense_context()
(A2) 06 : t_sense_lock()
(A3) 10 : TMIN_TSKID <= (tskid)
(A4) 10 : (tskid) <= tmax_tskid
(A5) 18 : !(((p_tcb->tstat) & TS_SUSPENDED) != 0U)
(A6) 21 : !(((p_tcb->tstat) & TS_WAITING) != 0U)
(A7) 26 : make_runnable(p_tcb)

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.4. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

         (A1) (A2) (A3) (A4) (A5) (A6) (A7)
(a-1)     T   D/F   D    D    D    D    D
(a-2)     F    T    D    D    D    D    D
(b-1)     F    F    F   D/T   D    D    D
(b-2)     F    F    T    F    D    D    D
(c-1)     F    F    T    T    T    D    D
(c-2)     F    F    T    T    T    D    D
(c-3)     F    F    T    T    T    D    D
(c-4)     F    F    T    T    T    D    D
(c-5)     F    F    T    T    T    D    D
(c-6)     F    F    T    T    T    D    D
(d-1-1)   F    F    T    T    F    T    T
(d-1-2)   F    F    T    T    F    T    F
(d-1-3)   F    F    T    T    F    T    F
(d-2)     F    F    T    T    F    T    F
(d-3)     F    F    T    T    F    T    F
(e-1)     F    F    T    T    F    F    D
(e-2)     F    F    T    T    F    F    D
-------------------------------------------
網羅      O    O    O    O    O    O    O


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

3. ホワイトボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
必要なし．



以上．
