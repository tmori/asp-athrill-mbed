
	iwup_tsk テストシート

----------------------------------------------------------------------
 TTSP
     TOPPERS Test Suite Package

 Copyright (C) 2009-2011 by Center for Embedded Computing Systems
             Graduate School of Information Science, Nagoya Univ., JAPAN
 Copyright (C) 2009-2011 by Digital Craft Inc.
 Copyright (C) 2009-2011 by NEC Communication Systems, Ltd.
 Copyright (C) 2009-2011 by FUJISOFT INCORPORATED
 Copyright (C) 2009-2010 by Mitsuhiro Matsuura

 上記著作権者は，以下の (1)〜(3) の条件を満たす場合に限り，本ドキュメ
 ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
     および下記の無保証規定が，そのままの形でドキュメント中に含まれて
     いること．
 (2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
     を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
     ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
     りではない．
 (3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
     からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
     本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
     く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

 本ドキュメントは，無保証で提供されているものである．上記著作権者およ
 びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
 る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
 により直接的または間接的に生じたいかなる損害に関しても，その責任を負
 わない．

 $Id: iwup_tsk.txt 2 2012-05-09 02:23:52Z nces-shigihara $
----------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

0. API仕様

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

wup_tsk		タスクの起床〔T〕
iwup_tsk	タスクの起床〔I〕

【C言語API】
	ER ercd = wup_tsk(ID tskid)
	ER ercd = iwup_tsk(ID tskid)

【パラメータ】
	ID			tskid		対象タスクのID番号

【リターンパラメータ】
	ER			ercd		正常終了（E_OK）またはエラーコード

【エラーコード】
	E_CTX			コンテキストエラー（非タスクコンテキストからの呼出
					し：wup_tskの場合，タスクコンテキストからの呼出し：
					iwup_tskの場合，CPUロック状態からの呼出し）
	E_NOSPT			未サポート機能（対象タスクが制約タスク）
	E_ID			不正ID番号（tskidが不正）
	E_NOEXS〔D〕	オブジェクト未登録（対象タスクが未登録）
	E_OACV〔P〕		オブジェクトアクセス違反（対象タスクに対する通常操
					作1が許可されていない：wup_tskの場合）
	E_OBJ			オブジェクト状態エラー（対象タスクが休止状態）
	E_QOVR			キューイングオーバフロー（起床要求キューイング数が
					TMAX_WUPCNTに一致）

【機能】

tskidで指定したタスク（対象タスク）を起床する．具体的な振舞いは以下の通
り．

対象タスクが起床待ち状態である場合には，対象タスクが待ち解除される．待
ち解除されたタスクには，待ち状態となったサービスコールからE_OKが返る．

対象タスクが起床待ち状態でなく，休止状態でもない場合には，対象タスクの
起床要求キューイング数に1が加えられる．起床要求キューイング数に1を加え
るとTMAX_WUPCNTを超える場合には，E_QOVRエラーとなる．

対象タスクが休止状態である場合には，E_OBJエラーとなる．

wup_tskにおいてtskidにTSK_SELF（＝0）を指定すると，自タスクが対象タスク
となる．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

1. 仕様ベースのブラックボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.1. エラー条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(a) 不正なコンテキスト状態で呼出す場合．

    (a-1) タスクコンテキストから呼び出して，E_CTXエラーが返ること．

    (a-2) CPUロック状態で呼び出して，E_CTXエラーが返ること．

(b) tskidが不正の時にE_IDが返ること．

    (b-1) tskidが許容される最小値-1(0)の時にE_IDが返ること．

    (b-2) tskidが許容される最大値+1(TNUM_TSKID+1)の時にE_IDが返ること．

(c) 対象タスクが休止状態の時にE_OBJが返ること．

(d) 対象タスクの起床要求キューイング数がTMAX_WUPCNT(=1)に一致している
    時に呼ぶと，E_QOVRが返ること．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.2. 正常条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(e) 起床要求キューイング数が0であるタスクを指定して呼び出す．

    (e-1) 起床待ち状態のタスクを指定する．

          (e-1-1) 対象タスクの優先度が，実行状態のタスクより高い場合．

                  (e-1-1-1) 実行状態になること．

                  (e-1-1-2) ディスパッチ禁止状態の場合，
                            実行可能状態になること．

                  (e-1-1-3) 割込み優先度マスクが全解除でない場合，
                            実行可能状態になること．

          (e-1-2) 対象タスクの優先度が，実行状態のタスクより低い場合，
                  実行可能状態になり，同じ優先度のタスクの最後に
                  つながれること．

          (e-1-3) 対象タスクの優先度が，実行状態のタスクと同じ場合，
                  実行可能状態となり，同じ優先度のタスクの最後に
                  つながれること．

          (e-1-4) 実行状態のタスクが存在しない場合，
                  対象タスクが実行状態となること．

    (e-2) 二重待ち(起床待ち)状態のタスクを指定すると，
          対象タスクが強制待ち状態となること．

    (e-3) 二重待ち(時間経過待ち)状態のタスクを指定すると，
          対象タスクの起床要求キューイング数に1が加えられること．

    (e-4) 実行可能状態のタスクを指定すると，
          対象タスクの起床要求キューイング数に1が加えられること．

    (e-5) 強制待ち状態のタスクを指定すると，
          対象タスクの起床要求キューイング数に1が加えられること．

    (e-6) 時間経過待ち状態のタスクを指定すると，
          対象タスクの起床要求キューイング数に1が加えられること．

    (e-7) セマフォの資源獲得待ち(タイムアウト無)状態のタスクを
          指定すると，対象タスクの起床要求キューイング数に
          1が加えられること．

    (e-8) セマフォの資源獲得待ち(タイムアウト有)状態のタスクを
          指定すると，対象タスクの起床要求キューイング数に
          1が加えられること．

    (e-9) 実行状態のタスクを指定すると，
          対象タスクの起床要求キューイング数に1が加えられること．



■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

2. ソースコードの条件網羅確認

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.1. ソースコード
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ER
iwup_tsk(ID tskid)
{
	TCB		*p_tcb;
	ER		ercd;

	LOG_IWUP_TSK_ENTER(tskid);
	CHECK_INTCTX_UNL();
	CHECK_TSKID(tskid);
	p_tcb = get_tcb(tskid);

	i_lock_cpu();
	if (TSTAT_DORMANT(p_tcb->tstat)) {
		ercd = E_OBJ;
	}
	else if (TSTAT_WAIT_SLP(p_tcb->tstat)) {
		if (wait_complete(p_tcb)) {
			reqflg = true;
		}
		ercd = E_OK;
	}
	else if (!(p_tcb->wupque)) {
		p_tcb->wupque = true;
		ercd = E_OK;
	}
	else {
		ercd = E_QOVR;
	}
	i_unlock_cpu();

  error_exit:
	LOG_IWUP_TSK_LEAVE(ercd);
	return(ercd);
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.2. マクロを展開したAPIと呼び出す内部関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[A] iwup_tsk

00 : ER
01 : iwup_tsk(ID tskid)
02 : {
03 : 	TCB		*p_tcb;
04 : 	ER		ercd;
05 : 
06 : 	if (!sense_context() || i_sense_lock()) {
07 : 		ercd = E_CTX;
08 : 		goto error_exit;
09 : 	}
10 : 	if (!(TMIN_TSKID <= (tskid) && (tskid) <= tmax_tskid)) {
11 : 		 ercd = E_ID;
12 : 		 goto error_exit;
13 : 	} 
14 : 
15 : 	p_tcb = (&(tcb_table[((uint_t)((tskid) - TMIN_TSKID))]));
16 : 
17 : 	i_lock_cpu();
18 : 	if ((p_tcb->tstat) == TS_DORMANT) {
19 : 		ercd = E_OBJ;
20 : 	}
21 : 	else if (((p_tcb->tstat) & TS_WAIT_MASK) == TS_WAIT_SLP) {
22 : 		if (wait_complete(p_tcb)) {
23 : 			reqflg = true;
24 : 		}
25 : 		ercd = E_OK;
26 : 	}
27 : 	else if (!(p_tcb->wupque)) {
28 : 		p_tcb->wupque = true;
29 : 		ercd = E_OK;
30 : 	}
31 : 	else {
32 : 		ercd = E_QOVR;
33 : 	}
34 : 	i_unlock_cpu();
35 : 
36 :   error_exit:
37 : 	return(ercd);
38 : }

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.3. 条件式
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(A1) 06 : !sense_context()
(A2) 06 : i_sense_lock()
(A3) 10 : TMIN_TSKID <= (tskid)
(A4) 10 : (tskid) <= tmax_tskid
(A5) 18 : (p_tcb->tstat) == TS_DORMANT
(A6) 21 : ((p_tcb->tstat) & TS_WAIT_MASK) == TS_WAIT_SLP
(A7) 22 : wait_complete(p_tcb)
(A8) 27 : !(p_tcb->wupque)

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.4. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

           (A1) (A2) (A3) (A4) (A5) (A6) (A7) (A8)
(a-1)       T   D/F   D    D    D    D    D    D
(a-2)       F    T    D    D    D    D    D    D
(b-1)       F    F    F   D/T   D    D    D    D
(b-2)       F    F    T    F    D    D    D    D
(c)         F    F    T    T    T    D    D    D
(d)         F    F    T    T    F    F    D    F
(e-1-1-1)   F    F    T    T    F    T    T    D
(e-1-1-2)   F    F    T    T    F    T    F    D
(e-1-1-3)   F    F    T    T    F    T    F    D
(e-1-2)     F    F    T    T    F    T    F    D
(e-1-3)     F    F    T    T    F    T    F    D
(e-1-4)     F    F    T    T    F    T    T    D
(e-2)       F    F    T    T    F    T    F    D
(e-3)       F    F    T    T    F    F    D    T
(e-4)       F    F    T    T    F    F    D    T
(e-5)       F    F    T    T    F    F    D    T
(e-6)       F    F    T    T    F    F    D    T
(e-7)       F    F    T    T    F    F    D    T
(e-8)       F    F    T    T    F    F    D    T
(e-9)       F    F    T    T    F    F    D    T
--------------------------------------------------
網羅        O    O    O    O    O    O    O    O


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

3. ホワイトボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
必要なし．



以上．
