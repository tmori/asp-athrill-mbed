
	dly_tsk テストシート

----------------------------------------------------------------------
 TTSP
     TOPPERS Test Suite Package

 Copyright (C) 2009-2011 by Center for Embedded Computing Systems
             Graduate School of Information Science, Nagoya Univ., JAPAN
 Copyright (C) 2009-2011 by Digital Craft Inc.
 Copyright (C) 2009-2011 by NEC Communication Systems, Ltd.
 Copyright (C) 2009-2011 by FUJISOFT INCORPORATED
 Copyright (C) 2009-2010 by Mitsuhiro Matsuura

 上記著作権者は，以下の (1)〜(3) の条件を満たす場合に限り，本ドキュメ
 ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
     および下記の無保証規定が，そのままの形でドキュメント中に含まれて
     いること．
 (2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
     を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
     ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
     りではない．
 (3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
     からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
     本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
     く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

 本ドキュメントは，無保証で提供されているものである．上記著作権者およ
 びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
 る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
 により直接的または間接的に生じたいかなる損害に関しても，その責任を負
 わない．

 $Id: dly_tsk.txt 2 2012-05-09 02:23:52Z nces-shigihara $
----------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

0. API仕様

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

dly_tsk		自タスクの遅延〔T〕

【C言語API】
	ER ercd = dly_tsk(RELTIM dlytim)

【パラメータ】
	RELTIM		dlytim		遅延時間

【リターンパラメータ】
	ER			ercd		正常終了（E_OK）またはエラーコード

【エラーコード】
	E_CTX			コンテキストエラー（ディスパッチ保留状態からの呼
					出し）
	E_NOSPT			未サポート機能（制約タスクからの呼出し）
	E_PAR			パラメータエラー（dlytimが不正）
	E_RLWAI			待ち禁止状態または待ち状態の強制解除

【機能】

dlytimで指定した時間，自タスクを遅延させる．具体的な振舞いは以下の通り．

自タスクは，dlytimで指定した時間が経過するまでの間，時間経過待ち状態と
なる．dly_tskを呼び出してからdlytimで指定した相対時間後に，自タスクは待
ち解除され，dly_tskからE_OKが返る．

dlytimは，TMAX_RELTIM以下でなければならない．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

1. 仕様ベースのブラックボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.1. エラー条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(a) ディスパッチ保留状態で呼出す場合．

    (a-1) 非タスクコンテキストから呼び出して，E_CTXエラーが返ること．

    (a-2) CPUロック状態で呼び出して，E_CTXエラーが返ること．

    (a-3) 割込み優先度マスクが全解除でない状態呼び出して，
          E_CTXエラーが返ること．

    (a-4) ディスパッチ禁止状態呼び出して，E_CTXエラーが返ること．

(b) dlytimが不正の時にE_PARが返ること．

    (b-1) dlytimが許容される最小値-1(-1)の時にE_PARが返ること．

    (b-2) dlytimが許容される最大値+1(TMAX_RELTIM+1)の時に
          E_PARが返ること．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.2. 正常条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(c) 自タスクが指定した時間前に他タスクから待ち解除され場合，
    E_RLWAIが返ること．

(d) dlytimに0を指定した場合，次のタイムティックで待ち解除され，
    E_OKが返ること．

(e) dlytimに1を指定した場合，2回目のタイムティックで待ち解除され，
    E_OKが返ること．

(f) 自タスクが時間経過待ち状態となること．

    (f-1) 同じ優先度の実行可能なタスクが存在する場合，
          ディスパッチが発生し，そのタスクが実行状態となること．
          指定した遅延時間が経過後，自タスクが待ち解除され，
          実行可能状態となること．

    (f-2) 同じ優先度の実行可能なタスクが存在せず，自タスクより低い
          優先度の実行可能なタスクが存在する場合，ディスパッチが発生し，
          そのタスクが実行状態となること．
          指定した遅延時間が経過後，自タスクが待ち解除され，
          実行状態となり，E_OKが返ること．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

2. ソースコードの条件網羅確認

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.1. ソースコード
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ER
dly_tsk(RELTIM dlytim)
{
	WINFO	winfo;
	TMEVTB	tmevtb;
	ER		ercd;

	LOG_DLY_TSK_ENTER(dlytim);
	CHECK_DISPATCH();
	CHECK_PAR(dlytim <= TMAX_RELTIM);

	t_lock_cpu();
	p_runtsk->tstat = (TS_WAITING | TS_WAIT_DLY);
	(void) make_non_runnable(p_runtsk);
	p_runtsk->p_winfo = &winfo;
	winfo.p_tmevtb = &tmevtb;
	tmevtb_enqueue(&tmevtb, dlytim, (CBACK) wait_tmout_ok, (void *) p_runtsk);
	LOG_TSKSTAT(p_runtsk);
	dispatch();
	ercd = winfo.wercd;
	t_unlock_cpu();

  error_exit:
	LOG_DLY_TSK_LEAVE(ercd);
	return(ercd);
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.2. マクロを展開したAPIと呼び出す内部関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[A] dly_tsk

00 : ER
01 : dly_tsk(RELTIM dlytim)
02 : {
03 : 	WINFO   winfo;
04 : 	TMEVTB  tmevtb;
05 : 	ER 	 ercd;
06 : 
07 : 	if (sense_context() || t_sense_lock() || !dspflg) {
08 : 		ercd = E_CTX;
09 : 		goto error_exit;
10 : 	}
11 : 	if (!(dlytim <= TMAX_RELTIM)) {
12 : 		ercd = E_PAR;
13 : 		goto error_exit;
14 : 	}
15 : 
16 : 	t_lock_cpu();
17 : 	p_runtsk->tstat = (TS_WAITING | TS_WAIT_DLY);
18 : 	(void) make_non_runnable(p_runtsk);
19 : 	p_runtsk->p_winfo = &winfo;
20 : 	winfo.p_tmevtb = &tmevtb;
21 : 	tmevtb_enqueue(&tmevtb, dlytim, (CBACK) wait_tmout_ok, (void *) p_runtsk);
22 : 	dispatch();
23 : 	ercd = winfo.wercd;
24 : 	t_unlock_cpu();
25 : 
26 :   error_exit:
27 : 	return(ercd);
28 : }


[B] tmevtb_enqueue

00 : Inline void
01 : tmevtb_enqueue(TMEVTB *p_tmevtb, RELTIM time, CBACK callback, void *arg)
02 : {
03 : 	assert(time <= TMAX_RELTIM);
04 : 
05 : 	p_tmevtb->callback = callback;
06 : 	p_tmevtb->arg = arg;
07 : 	tmevtb_insert(p_tmevtb, base_time + time);
08 : }


[C] tmevtb_insert

00 : void
01 : tmevtb_insert(TMEVTB *p_tmevtb, EVTTIM time)
02 : {
03 : 	uint_t  index;
04 : 
05 : 	/*
06 : 	 *  last_indexをインクリメントし，そこから上に挿入位置を探す．
07 : 	 */
08 : 	index = tmevt_up(++last_index, time);
09 : 
10 : 	/*
11 : 	 *  タイムイベントをindexの位置に挿入する．
12 : 	 */ 
13 : 	(tmevt_heap[(index) - 1]).time = time;
14 : 	(tmevt_heap[(index) - 1]).p_tmevtb = p_tmevtb;
15 : 	p_tmevtb->index = index;
16 : }


[D] tmevt_up

00 : uint_t
01 : tmevt_up(uint_t index, EVTTIM time)
02 : {
03 : 	uint_t  parent;
04 : 
05 : 	while (index > 1) {
06 : 		/*
07 : 		 *  親ノードのイベント発生時刻の方が早い(または同じ)ならば，
08 : 		 *  indexが挿入位置なのでループを抜ける．
09 : 		 */
10 : 		parent = ((index) >> 1);
11 : 		if ((((tmevt_heap[(parent) - 1]).time) - current_time) <= ((time) - current_time)) {
12 : 			break;
13 : 		}
14 : 
15 : 		/*
16 : 		 *  親ノードをindexの位置に移動させる．
17 : 		 */
18 : 		(tmevt_heap[(index) - 1]) = (tmevt_heap[(parent) - 1])
19 : 		(tmevt_heap[(index) - 1]).p_tmevtb->index = index;
20 : 
21 : 		/*
22 : 		 *  indexを親ノードの位置に更新．
23 : 		 */
24 : 		index = parent;
25 : 	}
26 : 	return(index);
27 : }


[E] wait_tmout_ok

00 : void
01 : wait_tmout_ok(TCB *p_tcb)
02 : {
03 : 	p_tcb->p_winfo->wercd = E_OK;
04 : 	if (make_non_wait(p_tcb)) {
05 : 		reqflg = true;
06 : 	}
07 : 
08 : 	/*
09 : 	 *  ここで優先度の高い割込みを受け付ける．
10 : 	 */
11 : 	i_unlock_cpu();
12 : 	i_lock_cpu();
13 : }


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.3. 条件式
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(A1) 07 : sense_context()
(A2) 07 : t_sense_lock()
(A3) 07 : !dspflg
(A4) 11 : dlytim <= TMAX_RELTIM

(D1) 05 : index > 1
(D2) 11 : (((tmevt_heap[(parent) - 1]).time) - current_time) <= ((time) - current_time)

(E1) 04 : make_non_wait(p_tcb)

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.4. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

      (A1) (A2) (A3) (A4) (D1) (D2) (E1)
(a-1)  T   D/F  D/F   D    D    D    D
(a-2)  F    T   D/F   D    D    D    D
(a-3)  F    F    T    D    D    D    D
(a-4)  F    F    T    D    D    D    D
(b-1)  F    F    F    F    D    D    D
(b-2)  F    F    F    F    D    D    D
(c)    F    F    F    T    F    D    D
(d)    F    F    F    T    F    D    T
(e)    F    F    F    T    F    D    T
(f-1)  F    F    F    T    F    D    F
(f-2)  F    F    F    T    F    D    T
----------------------------------------
網羅   O    O    O    O    X    X    O

【備考】
・(b-2)はuint型へ-1を指定しているために(A4)でfalseとなる．
  [参考]https://www.nces.is.nagoya-u.ac.jp/trac/mprtos-conso/ticket/214
・(D1)，(D2)の網羅をさせるために，
  以下にホワイトボックステストを実施する．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

3. ホワイトボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
3.1. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

      (A1) (A2) (A3) (A4) (D1) (D2) (E1)
(W_a)  F    F    F    T    TF   F    T
(W_b)  F    F    F    T    TTF  FF   T
(W_c)  F    F    F    T    TTTF FFF  T
(W_d)  F    F    F    T    T    T    D
----------------------------------------
網羅   O    O    O    O    O    O    O

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
3.2. テストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(W_a) 以下の順序で実行する．

  ・TASK1がtslp_tsk(3)を発行する．
  ・TASK2がdly_tsk(2)を発行する．

(W_b) 以下の順序で実行する．

  ・TASK1がtslp_tsk(2)を発行する．
  ・TASK2がtslp_tsk(3)を発行する．
  ・TASK3がtslp_tsk(4)を発行する．
  ・TASK4がdly_tsk(1)を発行する．

(W_c) 以下の順序で実行する．

  ・TASK1がtslp_tsk(2)を発行する．
  ・TASK2がtslp_tsk(3)を発行する．
  ・TASK3がtslp_tsk(4)を発行する．
  ・TASK4がtslp_tsk(5)を発行する．
  ・TASK5がtslp_tsk(6)を発行する．
  ・TASK6がtslp_tsk(7)を発行する．
  ・TASK7がtslp_tsk(8)を発行する．
  ・TASK8がtslp_tsk(9)を発行する．
  ・TASK9がdly_tsk(1)を発行する．

(W_d) 以下の順序で実行する．

  ・TASK1がtslp_tsk(2)を発行する．
  ・TASK2がdly_tsk(3)を発行する．




以上．
