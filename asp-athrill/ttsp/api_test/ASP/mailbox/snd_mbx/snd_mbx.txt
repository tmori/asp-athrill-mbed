
	snd_mbx テストシート

----------------------------------------------------------------------
 TTSP
     TOPPERS Test Suite Package

 Copyright (C) 2009-2011 by Center for Embedded Computing Systems
             Graduate School of Information Science, Nagoya Univ., JAPAN
 Copyright (C) 2009-2011 by Digital Craft Inc.
 Copyright (C) 2009-2011 by NEC Communication Systems, Ltd.
 Copyright (C) 2009-2011 by FUJISOFT INCORPORATED
 Copyright (C) 2009-2010 by Mitsuhiro Matsuura

 上記著作権者は，以下の (1)〜(3) の条件を満たす場合に限り，本ドキュメ
 ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
     および下記の無保証規定が，そのままの形でドキュメント中に含まれて
     いること．
 (2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
     を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
     ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
     りではない．
 (3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
     からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
     本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
     く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

 本ドキュメントは，無保証で提供されているものである．上記著作権者およ
 びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
 る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
 により直接的または間接的に生じたいかなる損害に関しても，その責任を負
 わない．

 $Id: snd_mbx.txt 2 2012-05-09 02:23:52Z nces-shigihara $
----------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

0. API仕様

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

snd_mbx		メールボックスへの送信〔Tp〕

【C言語API】
	ER ercd = snd_mbx(ID mbxid, T_MSG *pk_msg)

【パラメータ】
	ID			mbxid		対象メールボックスのID番号
	T_MSG		*pk_msg		送信メッセージの先頭番地

【リターンパラメータ】
	ER			ercd		正常終了（E_OK）またはエラーコード

【エラーコード】
	E_CTX			コンテキストエラー（非タスクコンテキストからの呼出
					し，CPUロック状態からの呼出し）
	E_ID			不正ID番号（mbxidが不正）
	E_PAR			パラメータエラー（メッセージヘッダ中のmsgpriが不正）
	E_NOEXS〔D〕	オブジェクト未登録（対象メールボックスが未登録）

【機能】

mbxidで指定したメールボックス（対象メールボックス）に，pk_msgで指定した
メッセージを送信する．具体的な振舞いは以下の通り．

対象メールボックスの待ち行列にタスクが存在する場合には，待ち行列の先頭
のタスクが，pk_msgで指定したメッセージを受信し，待ち解除される．待ち解
除されたタスクには，待ち状態となったサービスコールからE_OKが返る．

対象メールボックスの待ち行列にタスクが存在しない場合には，pk_msgで指定
したメッセージが，メールボックス属性のTA_MPRI指定の有無によって指定され
る順序で，メッセージキューにつなぐ．

対象メールボックスがTA_MPRI属性である場合には，pk_msgで指定したメッセー
ジの先頭のメッセージヘッダ中のmsgpriフィールドの値が，TMIN_MPRI以上で，
対象メールボックスに送信できるメッセージ優先度の最大値以下でなければな
らない．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

1. 仕様ベースのブラックボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.1. エラー条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(a) ディスパッチ保留状態で呼出す場合．

    (a-1) 非タスクコンテキストから呼び出して，E_CTXエラーが返ること．

    (a-2) CPUロック状態で呼び出して，E_CTXエラーが返ること．

(b) mbxidが不正の時にE_IDが返ること．

    (b-1) mbxidが許容される最小値-1(=0)の時にE_IDが返ること．

    (b-2) mbxidが許容される最大値+1(TNUM_MBXID+1)の時に
          E_IDが返ること．

(c) メッセージヘッダ中のmsgpriが不正の場合、E_PARエラーが返ること．

    (c-1) msgpriが許容される最小値-1(TMIN_MPRI-1)の時にE_PARが返ること．

    (c-2) msgpriが許容される最大値+1(MSG_PRI_MAX+1)の時にE_PARが返ること．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.2. 正常条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(d) 対象メールボックスの待ち行列にタスクが存在する場合には，待ち行列の
    先頭のタスクが，pk_msgで指定したメッセージを受信し，待ち解除される．
    (対象タスクとは，待ちタスクの待ち解除されたタスクのことを示す．)

    (d-1) 待ちタスクが1つの場合．

          (d-1-1) 対象タスクの優先度が，実行状態のタスクより高い場合．

                  (d-1-1-1) 実行状態になること．

                  (d-1-1-2) ディスパッチ禁止状態の場合，
                            実行可能状態になること．

                  (d-1-1-3) 割込み優先度マスクが全解除でない場合，
                            実行可能状態になること．

          (d-1-2) 対象タスクの優先度が実行状態のタスクより低い場合，
                  実行可能状態となり，同じ優先度のタスクの最後に
                  つながれること．

          (d-1-3) 対象タスクの優先度が実行状態のタスクと同じ場合，
                  実行可能状態となり，同じ優先度のタスクの最後に
                  つながれること．

          (d-1-4) 対象タスクが，二重待ち状態の場合，強制待ちとなること．

    (d-2) 待ちタスクが2つの場合．

          (d-2-1) 対象タスクの優先度が，実行状態のタスクより高い場合．

                  (d-2-1-1) 実行状態になること．

                  (d-2-1-2) ディスパッチ禁止状態の場合，
                            実行可能状態になること．

                  (d-2-1-3) 割込み優先度マスクが全解除でない場合，
                            実行可能状態になること．

          (d-2-2) 対象タスクの優先度が実行状態のタスクより低い場合，
                  実行可能状態となり，同じ優先度のタスクの最後に
                  つながれること．

          (d-2-3) 対象タスクの優先度が実行状態のタスクと同じ場合，
                  実行可能状態となり，同じ優先度のタスクの最後に
                  つながれること．

          (d-2-4) 対象タスクが，二重待ち状態の場合，強制待ちとなること．

(e) 対象メールボックスの待ち行列にタスクが存在しない場合には，pk_msgで
    指定したメッセージが，メールボックス属性のTA_MPRI指定の有無によって
    指定される順序で，メッセージキューにつなぐ．

    (e-1) 対象メールボックスがTA_MPRI属性でない場合は，
          メッセージキューはFIFO順になること．

          (e-1-1) メールボックスにメッセージがない場合．

          (e-1-2) メールボックスにメッセージが2つ存在する場合，
                  新規メッセージをメールボックスに入れる．

    (e-2) 対象メールボックスがTA_MPRI属性である場合は，
          メッセージキューはメッセージの優先度順になること．

          (e-2-1) メールボックスにメッセージがない場合．

          (e-2-2) メッセージ優先度が中→低の順で，メッセージ優先度が
                  高のメッセージを送信する場合．

          (e-2-3) メッセージ優先度が中→低の順で，メッセージ優先度が
                  中のメッセージを送信する場合．

          (e-2-4) メッセージ優先度が高→中の順で，メッセージ優先度が
                  低のメッセージを送信する場合．

【備考】

・「対象メールボックスがTA_MPRI属性である場合には，pk_msgで指定した
  メッセージの先頭のメッセージヘッダ中のmsgpriフィールドの値が，
  TMIN_MPRI以上で，対象メールボックスに送信できるメッセージ優先度の
  最大値以下でなければならない．」に関しては，「1.1. エラー条件のテスト
  ケース」の(c)で，エラーの場合のテストをしているので，「1.2. 正常条件
  のテストケース」では行わない．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

2. ソースコードの条件網羅確認

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.1. ソースコード
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ER
snd_mbx(ID mbxid, T_MSG *pk_msg)
{
	MBXCB	*p_mbxcb;
	TCB		*p_tcb;
	ER		ercd;
    
	LOG_SND_MBX_ENTER(mbxid, pk_msg);
	CHECK_TSKCTX_UNL();
	CHECK_MBXID(mbxid);
	p_mbxcb = get_mbxcb(mbxid);
	CHECK_PAR((p_mbxcb->p_mbxinib->mbxatr & TA_MPRI) == 0U
				|| (TMIN_MPRI <= MSGPRI(pk_msg)
		   && MSGPRI(pk_msg) <= p_mbxcb->p_mbxinib->maxmpri));

	t_lock_cpu();
	if (!queue_empty(&(p_mbxcb->wait_queue))) {
		p_tcb = (TCB *) queue_delete_next(&(p_mbxcb->wait_queue));
		((WINFO_MBX *)(p_tcb->p_winfo))->pk_msg = pk_msg;
		if (wait_complete(p_tcb)) {
			dispatch();
		}
		ercd = E_OK;
	}
	else if ((p_mbxcb->p_mbxinib->mbxatr & TA_MPRI) != 0U) {
		enqueue_msg_pri(&(p_mbxcb->pk_head), pk_msg);
		ercd = E_OK;
	}
	else {
		pk_msg->pk_next = NULL;
		if (p_mbxcb->pk_head != NULL) {
			p_mbxcb->pk_last->pk_next = pk_msg;
		}
		else {
			p_mbxcb->pk_head = pk_msg;
		}
		p_mbxcb->pk_last = pk_msg;
		ercd = E_OK;
	}
	t_unlock_cpu();

  error_exit:
	LOG_SND_MBX_LEAVE(ercd);
	return(ercd);
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.2. マクロを展開したAPIと呼び出す内部関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[A] snd_mbx

00 : ER
01 : snd_mbx(ID mbxid, T_MSG *pk_msg)
02 : {
03 : 	 MBXCB	*p_mbxcb;
04 : 	 TCB		*p_tcb;
05 : 	 ER		ercd;
06 :  
07 :     if (sense_context() || t_sense_lock()) {
08 :         ercd = E_CTX;
09 :         goto error_exit;
10 :     }
11 :     if (!(TMIN_MBXID <= mbxid && mbxid <= tmax_mbxid)) {
13 :         ercd = E_ID;
14 :         goto error_exit;
15 :     }
16 :     p_mbxcb = &(mbxcb_table[(uint_t)((mbxid) - TMIN_MBXID)])
17 : 
18 : 	if (!((p_mbxcb->p_mbxinib->mbxatr & TA_MPRI) == 0U
19 : 	           || (TMIN_MPRI <= ((T_MSG_PRI *) pk_msg)->msgpri &&
20 :((T_MSG_PRI *) pk_msg)->msgpri <= p_mbxcb->p_mbxinib->maxmpri))){
21 :            ercd = E_PAR;
22 :            goto error_exit;
23 :        }
24 : 
25 : 	t_lock_cpu();
26 : 	if (!queue_empty(&(p_mbxcb->wait_queue))) {
27 : 		p_tcb = (TCB *) queue_delete_next(&(p_mbxcb->wait_queue));
28 : 		((WINFO_MBX *)(p_tcb->p_winfo))->pk_msg = pk_msg;
29 : 		if (wait_complete(p_tcb)) {
30 : 			dispatch();
31 : 		}
32 : 		ercd = E_OK;
33 : 	}
34 : 	else if ((p_mbxcb->p_mbxinib->mbxatr & TA_MPRI) != 0U) {
35 : 		enqueue_msg_pri(&(p_mbxcb->pk_head), pk_msg);
36 : 		ercd = E_OK;
37 : 	}
38 : 	else {
39 : 		pk_msg->pk_next = NULL;
40 : 		if (p_mbxcb->pk_head != NULL) {
41 : 			p_mbxcb->pk_last->pk_next = pk_msg;
42 : 		}
43 : 		else {
44 : 			p_mbxcb->pk_head = pk_msg;
45 : 		}
46 : 		p_mbxcb->pk_last = pk_msg;
47 : 		ercd = E_OK;
48 : 	}
49 : 	t_unlock_cpu();
50 : 
51 :   error_exit:
52 : 	return(ercd);
53 : }


[B] enqueue_msg_pri

00 : Inline void
01 : enqueue_msg_pri(T_MSG **ppk_prevmsg_next, T_MSG *pk_msg)
02 : {
03 : 	T_MSG	*pk_nextmsg;
04 : 
05 : 	while ((pk_nextmsg = *ppk_prevmsg_next) != NULL) {
06 : 		if (((T_MSG_PRI *) pk_nextmsg)->msgpri > ((T_MSG_PRI *) pk_msg)->msgpri) {
07 : 			break;
08 : 		}
09 : 		ppk_prevmsg_next = &(pk_nextmsg->pk_next);
10 : 	}
11 : 	pk_msg->pk_next = pk_nextmsg;
12 : 	*ppk_prevmsg_next = pk_msg;
13 : }

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.3. 条件式
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(A1)  07 : sense_context()
(A2)  07 : t_sense_lock()
(A3)  11 : TMIN_MBXID <= mbxid
(A4)  11 : mbxid <= tmax_mbxid
(A5)  18 : (p_mbxcb->p_mbxinib->mbxatr & TA_MPRI) == 0U
(A6)  19 : TMIN_MPRI <= ((T_MSG_PRI *) pk_msg)->msgpri
(A7)  20 : ((T_MSG_PRI *) pk_msg)->msgpri <= p_mbxcb->p_mbxinib->maxmpri
(A8)  26 : !queue_empty(&(p_mbxcb->wait_queue))
(A9)  29 : wait_complete(p_tcb)
(A10) 34 : (p_mbxcb->p_mbxinib->mbxatr & TA_MPRI) != 0U
(A11) 40 : p_mbxcb->pk_head != NULL

(B1)  05 : (pk_nextmsg = *ppk_prevmsg_next) != NULL
(B2)  06 : ((T_MSG_PRI *) pk_nextmsg)->msgpri > 
           ((T_MSG_PRI *) pk_msg)->msgpri

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.4. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

           (A1) (A2) (A3) (A4) (A5) (A6) (A7) (A8) (A9) (A10) (B1) (B2) (A11)
(a-1)       T   D/F   D    D    D    D    D    D    D     D    D    D     D  
(a-2)       F    T    D    D    D    D    D    D    D     D    D    D     D  
(b-1)       F    F    F   D/T   D    D    D    D    D     D    D    D     D  
(b-2)       F    F    T    F    D    D    D    D    D     D    D    D     D  
(c-1)       F    F    T    T    F    F   D/T   D    D     D    D    D     D  
(c-2)       F    F    T    T    F    T    F    D    D     D    D    D     D  
(d-1-1-1)   F    F    T    T    T   D/F  D/F   T    T     D    D    D     D  
(d-1-1-2)   F    F    T    T    T   D/F  D/F   T    F     D    D    D     D  
(d-1-1-3)   F    F    T    T    T   D/F  D/F   T    F     D    D    D     D  
(d-1-2)     F    F    T    T    T   D/F  D/F   T    F     D    D    D     D  
(d-1-3)     F    F    T    T    T   D/F  D/F   T    F     D    D    D     D  
(d-1-4)     F    F    T    T    T   D/F  D/F   T    F     D    D    D     D  
(d-2-1-1)   F    F    T    T    T   D/F  D/F   T    T     D    D    D     D  
(d-2-1-2)   F    F    T    T    T   D/F  D/F   T    F     D    D    D     D  
(d-2-1-3)   F    F    T    T    T   D/F  D/F   T    F     D    D    D     D  
(d-2-2)     F    F    T    T    T   D/F  D/F   T    F     D    D    D     D  
(d-2-3)     F    F    T    T    T   D/F  D/F   T    F     D    D    D     D  
(d-2-4)     F    F    T    T    T   D/F  D/F   T    F     D    D    D     D  
(e-1-1)     F    F    T    T    T   D/F  D/F   F    D     F    D    D     F  
(e-1-2)     F    F    T    T    T   D/F  D/F   F    D     F    D    D     T  
(e-2-1)     F    F    T    T    F    T    T    F    D     T    F    D     D  
(e-2-2)     F    F    T    T    F    T    T    F    D     T    T    T     D  
(e-2-3)     F    F    T    T    F    T    T    F    D     T    TT   FT    D  
(e-2-4)     F    F    T    T    F    T    T    F    D     T    TTF  FF    D  
-----------------------------------------------------------------------------
網羅        O    O    O    O    O    O    O    O    O     O    X    O     O  

【備考】

・(B1)のwhileのカバレッジをさせるために，
  以下にホワイトボックステストを実施する．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

3. ホワイトボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
3.1. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

          (A1) (A2) (A3) (A4) (A5) (A6) (A7) (A8) (A9) (A10) (B1) (B2) (A11)
(W_a)      F    F    T    T    T   D/F  D/F   F    D     T    TTTF FFF   D  
----------------------------------------------------------------------------
網羅       O    O    O    O    O    O    O    O    O     O    O    O     O  

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
3.2. テストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(W_a) 以下の条件が成り立つ時．

  ・対象メールボックスの待ち行列にタスクが存在しない場合には，pk_msgで
    指定したメッセージが，メールボックス属性のTA_MPRI指定の有無によって
    指定される順序で，メッセージキューにつなぐ．
  ・対象メールボックスがTA_MPRI属性である場合は，メッセージキューは
    メッセージの優先度順になること．
  ・メールボックスにメッセージがある場合．
  ・受信待ちメッセージのリストに，対象メッセージより優先度が高い
    メッセージが3個ある場合，対象メッセージはメッセージキューの最後に
    つながれること．



以上．
