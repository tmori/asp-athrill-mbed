
	prcv_mbx テストシート

----------------------------------------------------------------------
 TTSP
     TOPPERS Test Suite Package

 Copyright (C) 2009-2011 by Center for Embedded Computing Systems
             Graduate School of Information Science, Nagoya Univ., JAPAN
 Copyright (C) 2009-2011 by Digital Craft Inc.
 Copyright (C) 2009-2011 by NEC Communication Systems, Ltd.
 Copyright (C) 2009-2011 by FUJISOFT INCORPORATED
 Copyright (C) 2009-2010 by Mitsuhiro Matsuura

 上記著作権者は，以下の (1)〜(3) の条件を満たす場合に限り，本ドキュメ
 ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
     および下記の無保証規定が，そのままの形でドキュメント中に含まれて
     いること．
 (2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
     を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
     ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
     りではない．
 (3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
     からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
     本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
     く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

 本ドキュメントは，無保証で提供されているものである．上記著作権者およ
 びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
 る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
 により直接的または間接的に生じたいかなる損害に関しても，その責任を負
 わない．

 $Id: prcv_mbx.txt 2 2012-05-09 02:23:52Z nces-shigihara $
----------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

0. API仕様

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

rcv_mbx		メールボックスからの受信〔Tp〕
prcv_mbx	メールボックスからの受信（ポーリング）〔Tp〕
trcv_mbx	メールボックスからの受信（タイムアウト付き）〔Tp〕

【C言語API】
	ER ercd = rcv_mbx(ID mbxid, T_MSG **ppk_msg)
	ER ercd = prcv_mbx(ID mbxid, T_MSG **ppk_msg)
	ER ercd = trcv_mbx(ID mbxid, T_MSG **ppk_msg, TMO tmout)

【パラメータ】
	ID			mbxid		対象メールボックスのID番号
	T_MSG **	ppk_msg		受信メッセージの先頭番地を入れるメモリ領域
							へのポインタ
	TMO			tmout		タイムアウト時間（trcv_mbxの場合）

【リターンパラメータ】
	ER			ercd		正常終了（E_OK）またはエラーコード
	T_MSG *		ppk_msg		受信メッセージの先頭番地

【エラーコード】
	E_CTX			コンテキストエラー（非タスクコンテキストからの呼出
					し，CPUロック状態からの呼出し，ディスパッチ保留状態
					からの呼出し：prcv_mbxを除く）
	E_NOSPT			未サポート機能（制約タスクからの呼出し：prcv_mbxを除
					く）
	E_ID			不正ID番号（mbxidが不正）
	E_PAR			パラメータエラー（tmoutが不正：trcv_mbxの場合）
	E_NOEXS〔D〕	オブジェクト未登録（対象メールボックスが未登録）
	E_TMOUT			ポーリング失敗またはタイムアウト（rcv_mbxを除く）
	E_RLWAI			待ち禁止状態または待ち状態の強制解除（prcv_mbxを除く）
	E_DLT			待ちオブジェクトの削除または再初期化（prcv_mbxを除く）

【機能】

mbxidで指定したメールボックス（対象メールボックス）からメッセージを受信
する．受信したメッセージの先頭番地は，ppk_msgで指定したメモリ領域に返さ
れる．具体的な振舞いは以下の通り．

対象メールボックスのメッセージキューにメッセージがつながれている場合に
は，メッセージキューの先頭につながれたメッセージが取り出され，ppk_msgで
指定したメモリ領域に返される．

対象メールボックスのメッセージキューにメッセージがつながれていない場合
には，自タスクはメールボックスからの受信待ち状態となり，対象メールボッ
クスの待ち行列につながれる．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

1. 仕様ベースのブラックボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.1. エラー条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(a) ディスパッチ保留状態で呼出す場合．

    (a-1) 非タスクコンテキストから呼び出して，E_CTXエラーが返ること．

    (a-2) CPUロック状態で呼び出して，E_CTXエラーが返ること．

(b) mbxidが不正の時にE_IDが返ること．

    (b-1) mbxidが許容される最小値-1(=0)の時にE_IDが返ること．

    (b-2) mbxidが許容される最大値+1(TNUM_MBXID+1)の時にE_IDが返ること．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.2. 正常条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(c) 対象メールボックスのメッセージキューにメッセージがつながれていない
    場合にポーリング失敗になり、E_TMOUTエラーが返ること．

(d) 対象メールボックスのメッセージキューにメッセージがつながれている場
    合には，メッセージキューの先頭につながれたメッセージが取り出され，
    ppk_msgで指定したメモリ領域に返され，E_OKが返ること．

    (d-1) 対象メールボックスのメッセージキューにメッセージが1つの場合．

    (d-2) 対象メールボックスのメッセージキューにメッセージが2つの場合．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

2. ソースコードの条件網羅確認

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.1. ソースコード
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ER
prcv_mbx(ID mbxid, T_MSG **ppk_msg)
{
	MBXCB	*p_mbxcb;
	ER		ercd;
    
	LOG_PRCV_MBX_ENTER(mbxid, ppk_msg);
	CHECK_TSKCTX_UNL();
	CHECK_MBXID(mbxid);
	p_mbxcb = get_mbxcb(mbxid);
    
	t_lock_cpu();
	if (p_mbxcb->pk_head != NULL) {
		*ppk_msg = p_mbxcb->pk_head;
		p_mbxcb->pk_head = (*ppk_msg)->pk_next;
		ercd = E_OK;
	}
	else {
		ercd = E_TMOUT;
	}
	t_unlock_cpu();

  error_exit:
	LOG_PRCV_MBX_LEAVE(ercd, *ppk_msg);
	return(ercd);
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.2. マクロを展開したAPIと呼び出す内部関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[A] prcv_mbx

00 : ER
01 : prcv_mbx(ID mbxid, T_MSG **ppk_msg)
02 : {
03 :     MBXCB     *p_mbxcb;
04 :     ER        ercd;
05 : 
06 :     if (sense_context() || t_sense_lock()) {
07 :         ercd = E_CTX;
08 :         goto error_exit;
09 :     }
10 :     if (!(TMIN_MBXID <= mbxid && mbxid <= tmax_mbxid)) {
11 :         ercd = E_ID;
12 :         goto error_exit;
13 :     }
14 :     p_mbxcb = &(mbxcb_table[(uint_t)(mbxid - TMIN_MBXID)]);
15 : 
16 :    t_lock_cpu();
17 :    if (p_mbxcb->pk_head != NULL) {
18 :        *ppk_msg = p_mbxcb->pk_head;
19 :        p_mbxcb->pk_head = (*ppk_msg)->pk_next;
20 :        ercd = E_OK;
21 :    }
22 :    else {
23 :        ercd = E_TMOUT;
24 :    }
25 :    t_unlock_cpu();
26 : 
27 :   error_exit:
28 :     return(ercd);
29 : }

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.3. 条件式
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(A1) 06 : sense_context()
(A2) 06 : t_sense_lock()
(A3) 10 : TMIN_MBXID <= mbxid
(A4) 10 : mbxid <= tmax_mbxid
(A5) 17 : p_mbxcb->pk_head != NULL

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.4. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

         (A1) (A2) (A3) (A4) (A5)
(a-1)     T   D/F   D    D    D  
(a-2)     F    T    D    D    D  
(b-1)     F    F    F   D/T   D  
(b-2)     F    F    T    F    D  
(c)       F    F    T    T    F  
(d-1)     F    F    T    T    T  
(d-2)     F    F    T    T    T  
---------------------------------
網羅      O    O    O    O    O  


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

3. ホワイトボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
必要なし．



以上．
