
	ref_alm テストシート

----------------------------------------------------------------------
 TTSP
     TOPPERS Test Suite Package

 Copyright (C) 2009-2011 by Center for Embedded Computing Systems
             Graduate School of Information Science, Nagoya Univ., JAPAN
 Copyright (C) 2009-2011 by Digital Craft Inc.
 Copyright (C) 2009-2011 by NEC Communication Systems, Ltd.
 Copyright (C) 2009-2011 by FUJISOFT INCORPORATED
 Copyright (C) 2009-2010 by Mitsuhiro Matsuura

 上記著作権者は，以下の (1)〜(3) の条件を満たす場合に限り，本ドキュメ
 ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
     および下記の無保証規定が，そのままの形でドキュメント中に含まれて
     いること．
 (2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
     を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
     ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
     りではない．
 (3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
     からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
     本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
     く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

 本ドキュメントは，無保証で提供されているものである．上記著作権者およ
 びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
 る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
 により直接的または間接的に生じたいかなる損害に関しても，その責任を負
 わない．

 $Id: ref_alm.txt 2 2012-05-09 02:23:52Z nces-shigihara $
----------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

0. API仕様

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

ref_alm		アラームハンドラの状態参照〔T〕

【C言語API】
	ER ercd = ref_alm(ID almid, T_RALM *pk_ralm)

【パラメータ】
	ID			almid		対象アラームハンドラのID番号
	T_RALM *	pk_ralm		アラームハンドラの現在状態を入れるパケット
							へのポインタ

【リターンパラメータ】
	ER			ercd		正常終了(E_OK)またはエラーコード

  ＊アラームハンドラの現在状態(パケットの内容)
	STAT	almstat		アラームハンドラの動作状態
	RELTIM	lefttim		アラームハンドラを起動する時刻までの相対時間
	ID		prcid		アラームハンドラの割付けプロセッサのID(マル
						チプロセッサ対応カーネルの場合)

【エラーコード】
	E_CTX			コンテキストエラー(非タスクコンテキストからの呼出
					し，CPUロック状態からの呼出し)
	E_ID			不正ID番号(almidが不正)
	E_NOEXS〔D〕	オブジェクト未登録(対象アラームハンドラが未登録)
	E_OACV〔P〕		オブジェクトアクセス違反(対象アラームハンドラに対
					する参照操作が許可されていない)
	E_MACV〔P〕		メモリアクセス違反(pk_ralmが指すメモリ領域への書込
					みアクセスが許可されていない)

【機能】

almidで指定したアラームハンドラ(対象アラームハンドラ)の現在状態を参照
する．参照した現在状態は，pk_ralmで指定したパケットに返される．

almstatには，対象アラームハンドラの現在の動作状態を表す次のいずれかの値
が返される．

	TALM_STP	0x01U		アラームハンドラが動作していない状態
	TALM_STA	0x02U		アラームハンドラが動作している状態

対象アラームハンドラが動作している状態である場合には，lefttimに，アラー
ムハンドラ起動する時刻までの相対時間が返される．対象アラームハンドラが
動作していない状態である場合には，lefttimの値は保証されない．

マルチプロセッサ対応カーネルでは，prcidに，対象アラームハンドラの割付け
プロセッサのID番号が返される．

【使用上の注意】

ref_almはデバッグ時向けの機能であり，その他の目的に使用することは推奨し
ない．これは，ref_almを呼び出し，対象アラームハンドラの現在状態を参照し
た直後に割込みが発生した場合，ref_almから戻ってきた時には対象アラームハ
ンドラの状態が変化している可能性があるためである．

【μITRON4.0仕様との関係】

TALM_STPとTALM_STAを値を変更した．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

1. 仕様ベースのブラックボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.1. エラー条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(a) ディスパッチ保留状態で呼出す場合．

    (a-1) 非タスクコンテキストから呼び出して，E_CTXエラーが返ること．

    (a-2) CPUロック状態で呼び出して，E_CTXエラーが返ること．

(b) almidが不正の時にE_IDが返ること．

    (b-1) almidが許容される最小値-1(=0)の時にE_IDが返ること．

    (b-2) almidが許容される最大値+1(TNUM_ALMID+1)の時にE_IDが返ること．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.2. 正常条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(c) almidで指定したアラームハンドラ(対象アラームハンドラ)の現在状態を
    参照する．参照した現在状態は，pk_ralmで指定したパケットに返される．

    (c-1) 対象アラームハンドラが動作していない状態であれば，almstatに
          TALM_STP(=0x01U)が返され，lefttimの値は保証されない．

    (c-2) 対象アラームハンドラが動作している状態である場合には，almstat
          にTALM_STA(=0x02U)が，lefttimにアラームハンドラを起動する時刻
          までの相対時間が返される．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

2. ホワイトボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.1. ソースコード
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ER
ref_alm(ID almid, T_RALM *pk_ralm)
{
	ALMCB	*p_almcb;
	ER		ercd;
    
	LOG_REF_ALM_ENTER(almid, pk_ralm);
	CHECK_TSKCTX_UNL();
	CHECK_ALMID(almid);
	p_almcb = get_almcb(almid);

	t_lock_cpu();
	if (p_almcb->almsta) {
		pk_ralm->almstat = TALM_STA;
		pk_ralm->lefttim = tmevt_lefttim(&(p_almcb->tmevtb));
	}
	else {
		pk_ralm->almstat = TALM_STP;
	}
	ercd = E_OK;
	t_unlock_cpu();

  error_exit:
	LOG_REF_ALM_LEAVE(ercd, pk_ralm);
	return(ercd);
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.2. マクロを展開したAPIと呼び出す内部関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[A] ref_alm

00 : ER
01 : ref_alm(ID almid, T_RALM *pk_ralm)
02 : {
03 : 	ALMCB	*p_almcb;
04 : 	ER		ercd;
05 :     
06 : 	if (sense_context() || t_sense_lock()) {
07 : 		ercd = E_CTX;
08 : 		goto error_exit;
09 : 	}
10 : 	if (!(TMIN_ALMID <= almid && almid <= tmax_almid)) {
11 : 		ercd = E_ID;
12 : 		goto error_exit;
13 : 	}
14 : 	p_almcb = &(almcb_table[(uint_t)((almid) - TMIN_ALMID)]);
15 : 
16 : 	t_lock_cpu();
17 : 	if (p_almcb->almsta) {
18 : 		pk_ralm->almstat = TALM_STA;
19 : 		pk_ralm->lefttim = tmevt_lefttim(&(p_almcb->tmevtb));
20 : 	}
21 : 	else {
22 : 		pk_ralm->almstat = TALM_STP;
23 : 	}
24 : 	ercd = E_OK;
25 : 	t_unlock_cpu();
26 : 
27 :   error_exit:
28 : 	return(ercd);
29 : }

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.3. 条件式
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(A1) 06 : sense_context()
(A2) 06 : t_sense_lock()
(A3) 10 : TMIN_ALMID <= almid
(A4) 10 : almid <= tmax_almid
(A5) 17 : p_almcb->almsta

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.4. 条件網羅の確認
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

       (A1) (A2) (A3) (A4) (A5)
(a-1)   T   D/F   D    D    D
(a-2)   F    T    D    D    D
(b-1)   F    F    F   D/T   D
(b-2)   F    F    T    F    D
(c-1)   F    F    T    T    F
(c-2)   F    F    T    T    T
-------------------------------
網羅    O    O    O    O    O


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

3. ホワイトボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
必要なし．



以上．
