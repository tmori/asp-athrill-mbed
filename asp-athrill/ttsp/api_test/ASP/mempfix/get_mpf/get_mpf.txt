
	get_mpf テストシート

----------------------------------------------------------------------
 TTSP
     TOPPERS Test Suite Package

 Copyright (C) 2009-2011 by Center for Embedded Computing Systems
             Graduate School of Information Science, Nagoya Univ., JAPAN
 Copyright (C) 2009-2011 by Digital Craft Inc.
 Copyright (C) 2009-2011 by NEC Communication Systems, Ltd.
 Copyright (C) 2009-2011 by FUJISOFT INCORPORATED
 Copyright (C) 2009-2010 by Mitsuhiro Matsuura

 上記著作権者は，以下の (1)〜(3) の条件を満たす場合に限り，本ドキュメ
 ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
     および下記の無保証規定が，そのままの形でドキュメント中に含まれて
     いること．
 (2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
     を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
     ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
     りではない．
 (3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
     からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
     本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
     く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

 本ドキュメントは，無保証で提供されているものである．上記著作権者およ
 びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
 る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
 により直接的または間接的に生じたいかなる損害に関しても，その責任を負
 わない．

 $Id: get_mpf.txt 2 2012-05-09 02:23:52Z nces-shigihara $
----------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

0. API仕様

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

get_mpf		固定長メモリブロックの獲得〔T〕
pget_mpf	固定長メモリブロックの獲得（ポーリング）〔T〕
tget_mpf	固定長メモリブロックの獲得（タイムアウト付き）〔T〕

【C言語API】
	ER ercd = get_mpf(ID mpfid, void **p_blk)
	ER ercd = pget_mpf(ID mpfid, void **p_blk)
	ER ercd = tget_mpf(ID mpfid, void **p_blk, TMO tmout)

【パラメータ】
	ID			mpfid		対象固定長メモリプールのID番号
	void **		p_blk		獲得した固定長メモリブロックの先頭番地を入
							れるメモリ領域へのポインタ
	TMO			tmout		タイムアウト時間（twai_mpfの場合）

【リターンパラメータ】
	ER			ercd		正常終了（E_OK）またはエラーコード
	void *		blk			獲得した固定長メモリブロックの先頭番地

【エラーコード】
	E_CTX			コンテキストエラー（非タスクコンテキストからの呼出
					し，CPUロック状態からの呼出し，ディスパッチ保留状態
					からの呼出し：pget_mpfを除く）
	E_NOSPT			未サポート機能（制約タスクからの呼出し：pget_mpfを除
					く）
	E_ID			不正ID番号（mpfidが不正）
	E_PAR			パラメータエラー（tmoutが不正：tget_mpfの場合）
	E_NOEXS〔D〕	オブジェクト未登録（対象固定長メモリプールが未登録）
	E_OACV〔P〕		オブジェクトアクセス違反（対象固定長メモリプールに
					対する通常操作2が許可されていない）
	E_MACV〔P〕		メモリアクセス違反（p_blkが指すメモリ領域への読出し
					アクセスが許可されていない）
	E_TMOUT			ポーリング失敗またはタイムアウト（get_mpfを除く）
	E_RLWAI			待ち禁止状態または待ち状態の強制解除（pget_mpfを除
					く）
	E_DLT			待ちオブジェクトの削除または再初期化（pget_mpfを除
					く）

【機能】

mpfidで指定した固定長メモリプール（対象固定長メモリプール）から固定長メ
モリブロックを獲得し，その先頭番地をblkに返す．具体的な振舞いは以下の通
り．

対象固定長メモリプールの固定長メモリプール領域の中に，固定長メモリブロッ
クを割り付けることのできる未割当てのメモリ領域がある場合には，固定長メ
モリブロックが1つ割り付けられ，その先頭番地がblkに返される．

未割当てのメモリ領域がない場合には，自タスクは固定長メモリプールの獲得
待ち状態となり，対象固定長メモリプールの待ち行列につながれる．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

1. 仕様ベースのブラックボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.1. エラー条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(a) ディスパッチ保留状態で呼出す場合．

    (a-1) 非タスクコンテキストから呼び出して，E_CTXエラーが返ること．

    (a-2) CPUロック状態で呼び出して，E_CTXエラーが返ること．

    (a-3) 割込み優先度マスクが全解除でない状態で呼び出して，
          E_CTXエラーが返ること．

    (a-4) ディスパッチ禁止状態で呼び出して，E_CTXエラーが返ること．

(b) mpfidが不正の時にE_IDが返ること．

    (b-1) mpfidが許容される最小値-1(=0)の時にE_IDが返ること．

    (b-2) mpfidが許容される最大値+1(TNUM_MPFID+1)の時にE_IDが返ること．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.2. 正常条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(c) 待ち状態が強制解除された時にE_RLWAIが返ること．

(d) 待ちオブジェクトが再初期化された時にE_DLTが返ること．

(e) 待ち状態が解除された時にE_OKが返ること．

(f) 対象固定長メモリプールの固定長メモリプール領域の中に，固定長メモリ
    ブロックを割り付けることのできる未割当てのメモリ領域がある場合には，
    固定長メモリブロックが1つ割り付けられ，その先頭番地がblkに返される．

(g) 未割当てのメモリ領域がない場合には，自タスクは固定長メモリプールの
    獲得待ち状態となり，対象固定長メモリプールの待ち行列につながれる．

    (g-1) 対象固定長メモリプールの属性がFIFOの場合，自タスクが待ち行列
          の最後につながれること．
          
          (g-1-1) 待ちタスクがない場合．

          (g-1-2) 優先度が中→低の順で待ちタスクがあり，
                  自タスクの優先度が高の場合．

          (g-1-3) 優先度が中→低の順で待ちタスクがあり，
                  自タスクの優先度が中の場合．

          (g-1-4) 優先度が高→中の順で待ちタスクがあり，
                  自タスクの優先度が低の場合．

     (g-2) 対象固定長メモリプールの属性が優先度順の場合，自タスクは優
           先度に合わせた待ち行列の位置につながれること．

          (g-2-1) 待ちタスクがない場合．

          (g-2-2) 優先度が中→低の順で待ちタスクがあり，
                  自タスクの優先度が高の場合．

          (g-2-3) 優先度が中→低の順で待ちタスクがあり，
                  自タスクの優先度が中の場合．

          (g-2-4) 優先度が高→中の順で待ちタスクがあり，
                  自タスクの優先度が低の場合．

(h) blkに獲得したメモリープールのアドレスが正しく入っていること．

    (h-1) 一回目に獲得したアドレスがメモリプール領域の先頭アドレスであ
          ること．

    (h-2) 二回目に獲得したアドレスがメモリプール領域の先頭アドレス＋メ
          モリプールサイズであること．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

2. ソースコードの条件網羅確認

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.1. ソースコード
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ER
get_mpf(ID mpfid, void **p_blk)
{
	MPFCB     *p_mpfcb;
	WINFO_MPF winfo_mpf;
	ER        ercd;
	
	LOG_GET_MPF_ENTER(mpfid, p_blk);
	CHECK_DISPATCH();
 	CHECK_MPFID(mpfid);
	p_mpfcb = get_mpfcb(mpfid);
	
	t_lock_cpu();
	if (p_mpfcb->fblkcnt > 0) {
		get_mpf_block(p_mpfcb, p_blk);
		ercd = E_OK;
	}
	else {
		p_runtsk->tstat = (TS_WAITING | TS_WAIT_MPF);
 		wobj_make_wait((WOBJCB *) p_mpfcb, (WINFO_WOBJ *) &winfo_mpf);
 		dispatch();
		ercd = winfo_mpf.winfo.wercd;
		if (ercd == E_OK) {
			*p_blk = winfo_mpf.blk;
		}
	}
	t_unlock_cpu(); 
	error_exit:
	LOG_GET_MPF_LEAVE(ercd, *p_blk);
	return(ercd);
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.2. マクロを展開したAPIと呼び出す内部関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[A] get_mpf

00 : ER
01 : get_mpf(ID mpfid, void **p_blk)
02 : {
03 :     MPFCB      *p_mpfcb;
04 :     WINFO_MPF  winfo_mpf;
05 :     ER         ercd;
06 :
07 :     if (sense_context() || t_sense_lock() || !dspflg) {
08 :         ercd = E_CTX;
09 :         goto error_exit;
10 :     }
11 :     if (!(TMIN_MPFID <= (mpfid) && (mpfid) <= tmax_mpfid)){
12 :         ercd = E_ID;
13 :         goto error_exit;
14 :     }
15 :     p_mpfcb = (&(mpfcb_table[((uint_t)((mpfid) - TMIN_MPFID))]))
16 :                             
17 :     t_lock_cpu();
18 :     if (p_mpfcb->fblkcnt > 0) {
19 :         get_mpf_block(p_mpfcb, p_blk);
20 :         ercd = E_OK;
21 :     }
22 :     else {
23 :         p_runtsk->tstat = (TS_WAITING | TS_WAIT_MPF);
24 :         wobj_make_wait((WOBJCB *) p_mpfcb, (WINFO_WOBJ *) &winfo_mpf);
25 :         dispatch();
26 :         ercd = winfo_mpf.winfo.wercd;
27 :         if (ercd == E_OK) {
28 :             *p_blk = winfo_mpf.blk;
29 :         }
30 :     }
31 :     t_unlock_cpu();
32 :
33 :     error_exit:
34 :     return(ercd);
35 : }

[B] get_mpf_block

00 : void
01 : get_mpf_block(MPFCB *p_mpfcb, void **p_blk)
02 : {
03 : 	uint_t	blkidx;
04 : 
05 : 	if (p_mpfcb->freelist != INDEX_NULL) {
06 : 		blkidx = p_mpfcb->freelist;
07 : 		p_mpfcb->freelist = (p_mpfcb->p_mpfinib->p_mpfmb + blkidx)->next;
08 : 	}
09 : 	else {
10 : 		blkidx = p_mpfcb->unused;
11 : 		p_mpfcb->unused++;
12 : 	}
13 : 	*p_blk = (void *)((char *)(p_mpfcb->p_mpfinib->mpf)
14 : 								+ p_mpfcb->p_mpfinib->blksz * blkidx);
15 : 	p_mpfcb->fblkcnt--;
16 : 	(p_mpfcb->p_mpfinib->p_mpfmb + blkidx)->next = INDEX_ALLOC;
17 : }

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.3. 条件式
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(A1) 07 : sense_context()
(A2) 07 : t_sense_lock()
(A3) 07 : !dspflg
(A4) 11 : TMIN_TSKID <= (mpfid)
(A5) 11 : (mpfid) <= tmax_tskid
(A6) 18 : (p_mpfcb->fblkcnt) > 0
(A7) 27 : ercd == E_OK

(B1) 05 : p_mpfcb->freelist != INDEX_NULL

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.4. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

         (A1) (A2) (A3) (A4) (A5) (A6) (A7) (B1)
(a-1)     T   D/F  D/F   D    D    D    D    D
(a-2)     F    T   D/F   D    D    D    D    D
(a-3)     F    F    T    F    D    D    D    D
(a-4)     F    F    T    F    D    D    D    D
(b-1)     F    F    F    F   D/T   D    D    D
(b-2)     F    F    F    T    F    D    D    D
(c)       F    F    F    T    T    F    F    D
(d)       F    F    F    T    T    F    F    D
(e)       F    F    F    T    T    F    T    D
(f)       F    F    F    T    T    T    D    F
(g-1-1)   F    F    F    T    T    F    D    D
(g-1-2)   F    F    F    T    T    F    D    D
(g-1-3)   F    F    F    T    T    F    D    D
(g-1-4)   F    F    F    T    T    F    D    D
(g-2-1)   F    F    F    T    T    F    D    D
(g-2-2)   F    F    F    T    T    F    D    D
(g-2-3)   F    F    F    T    T    F    D    D
(g-2-4)   F    F    F    T    T    F    D    D
(h-1)     F    F    F    T    T    T    D    F
(h-2)     F    F    F    T    T    T    D    F
------------------------------------------------
網羅      O    O    O    O    O    O    O    X

【備考】
・(B1)の網羅をさせるために，
  以下にホワイトボックステストを実施する．

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

3. ホワイトボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
3.1. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

      (A1) (A2) (A3) (A4) (A5) (A6) (A7) (B1)
(W_a)  F    F    F    T    T    T    D    T
---------------------------------------------
網羅   O    O    O    O    O    O    O    O

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
3.2. テストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(W_a) 以下の条件が成り立つ時．

  ・2つのタスクが固定長メモリブロックを取得した後，先に取得したタスクが
    返却した状態で，get_mpfを発行する場合．



以上．
