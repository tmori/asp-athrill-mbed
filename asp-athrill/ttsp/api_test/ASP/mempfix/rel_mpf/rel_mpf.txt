
	rel_mpf テストシート

----------------------------------------------------------------------
 TTSP
     TOPPERS Test Suite Package

 Copyright (C) 2009-2011 by Center for Embedded Computing Systems
             Graduate School of Information Science, Nagoya Univ., JAPAN
 Copyright (C) 2009-2011 by Digital Craft Inc.
 Copyright (C) 2009-2011 by NEC Communication Systems, Ltd.
 Copyright (C) 2009-2011 by FUJISOFT INCORPORATED
 Copyright (C) 2009-2010 by Mitsuhiro Matsuura

 上記著作権者は，以下の (1)〜(3) の条件を満たす場合に限り，本ドキュメ
 ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
     および下記の無保証規定が，そのままの形でドキュメント中に含まれて
     いること．
 (2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
     を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
     ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
     りではない．
 (3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
     からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
     本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
     く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

 本ドキュメントは，無保証で提供されているものである．上記著作権者およ
 びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
 る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
 により直接的または間接的に生じたいかなる損害に関しても，その責任を負
 わない．

 $Id: rel_mpf.txt 2 2012-05-09 02:23:52Z nces-shigihara $
----------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

0. API仕様

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

rel_mpf 固定長メモリブロックの返却〔T〕

【C言語API】
    ER ercd = rel_mpf(ID mpfid, void *blk)

【パラメータ】
    ID          mpfid       対象固定長メモリプールのID番号
    void *      blk         返却する固定長メモリブロックの先頭番地

【リターンパラメータ】
    ER          ercd        正常終了(E_OK)またはエラーコード

【エラーコード】
    E_CTX        コンテキストエラー(非タスクコンテキストからの呼出し，
                 CPUロック状態からの呼出し)
    E_ID         不正ID番号(mpfidが不正)
    E_PAR        パラメータエラー(blkが不正)
    E_NOEXS〔D〕 オブジェクト未登録(対象固定長メモリプールが未登録)
    E_OACV〔P〕  オブジェクトアクセス違反(対象固定長メモリプールに対す
                 る通常操作2が許可されていない)

【機能】
mpfidで指定した固定長メモリプール(対象固定長メモリプール)に，blkで指
定した固定長メモリブロックを返却する．具体的な振舞いは以下の通り．

対象固定長メモリプールの待ち行列にタスクが存在する場合には，待ち行列の
先頭のタスクが，blkで指定した固定長メモリブロックを獲得し，待ち解除され
る．待ち解除されたタスクには，待ち状態となったサービスコールからE_OKが
返る．

待ち行列にタスクが存在しない場合には，blkで指定した固定長メモリブロック
は，対象固定長メモリプールのメモリプール領域に返却される．

blkが，対象固定長メモリプールから獲得した固定長メモリブロックの先頭番地
でない場合には，E_PARエラーとなる．

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

1. 仕様ベースのブラックボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.1. エラー条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(a) ディスパッチ保留状態で呼出す場合．

    (a-1) 非タスクコンテキストから呼び出して，E_CTXエラーが返ること．

    (a-2) CPUロック状態で呼び出して，E_CTXエラーが返ること．

(b) mpfidが不正の時にE_IDが返ること．

    (b-1) mpfidが許容される最小値-1(=0)の時にE_IDが返ること．

    (b-2) mpfidが許容される最大値+1(TNUM_MPFID+1)の時にE_IDが返ること．

(c) blkが，対象固定長メモリプールから獲得した固定長メモリブロックの
    先頭番地でない場合，E_PARエラーが返ること．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.2. 正常条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(d) 待ち行列にタスクが存在しない場合には，blkで指定した固定長メモリブ
    ロックは，対象固定長メモリプールのメモリプール領域に返却されること．

(e) 対象固定長メモリプールの待ち行列にタスクが1つ存在する場合，待ち行列
    の先頭のタスクが，blkで指定した固定長メモリブロックを獲得すること．
    (待ち行列のタスクを対象タスクとする)

    (e-1) 対象タスクの優先度が，実行状態のタスクより高い場合．

          (e-1-1) 実行状態になること．

          (e-1-2) ディスパッチ禁止状態の場合，
                  実行可能状態になること．

          (e-1-3) 割込み優先度マスクが全解除でない場合，
                  実行可能状態になること．

    (e-2) 対象タスクの優先度が，実行状態のタスクより低い場合，
          実行可能状態になり，同じ優先度のタスクの最後につながれること．

    (e-3) 対象タスクの優先度が，実行状態のタスクと同じ場合，
          実行可能状態となり，同じ優先度のタスクの最後につながれること．

    (e-4) 対象タスクが，二重待ち状態の場合，
          強制待ちとなること．

(f) 対象固定長メモリプールの待ち行列にタスクが2つ存在する場合，待ち行列
    の先頭のタスクが，blkで指定した固定長メモリブロックを獲得すること．
    (待ち行列の先頭タスクを対象タスクとする)

    (f-1) 対象タスクの優先度が，実行状態のタスクより高い場合．

          (f-1-1) 実行状態になること．

          (f-1-2) ディスパッチ禁止状態の場合，
                  実行可能状態になること．

          (f-1-3) 割込み優先度マスクが全解除でない場合，
                  実行可能状態になること．

    (f-2) 対象タスクの優先度が，実行状態のタスクより低い場合，
          実行可能状態になり，同じ優先度のタスクの最後につながれること．

    (f-3) 対象タスクの優先度が，実行状態のタスクと同じ場合，
          実行可能状態となり，同じ優先度のタスクの最後につながれること．

    (f-4) 対象タスクが，二重待ち状態の場合，
          強制待ちとなること．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

2. ソースコードの条件網羅確認

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.1. ソースコード
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ER
rel_mpf(ID mpfid, void *blk)
{
	MPFCB	*p_mpfcb;
	SIZE	blkoffset;
	uint_t	blkidx;
	TCB		*p_tcb;
	ER		ercd;
    
	LOG_REL_MPF_ENTER(mpfid, blk);
	CHECK_TSKCTX_UNL();
	CHECK_MPFID(mpfid);
	p_mpfcb = get_mpfcb(mpfid);
	CHECK_PAR(p_mpfcb->p_mpfinib->mpf <= blk);
	blkoffset = ((char *) blk) - (char *)(p_mpfcb->p_mpfinib->mpf);
	CHECK_PAR(blkoffset % p_mpfcb->p_mpfinib->blksz == 0U);
	CHECK_PAR(blkoffset / p_mpfcb->p_mpfinib->blksz < p_mpfcb->unused);
	blkidx = (uint_t)(blkoffset / p_mpfcb->p_mpfinib->blksz);
	CHECK_PAR((p_mpfcb->p_mpfinib->p_mpfmb + blkidx)->next == INDEX_ALLOC);

	t_lock_cpu();
	if (!queue_empty(&(p_mpfcb->wait_queue))) {
		p_tcb = (TCB *) queue_delete_next(&(p_mpfcb->wait_queue));
		((WINFO_MPF *)(p_tcb->p_winfo))->blk = blk;
		if (wait_complete(p_tcb)) {
			dispatch();
		}
		ercd = E_OK;
	}
	else {
		p_mpfcb->fblkcnt++;
		(p_mpfcb->p_mpfinib->p_mpfmb + blkidx)->next = p_mpfcb->freelist;
		p_mpfcb->freelist = blkidx;
		ercd = E_OK;
	}
	t_unlock_cpu();

  error_exit:
	LOG_REL_MPF_LEAVE(ercd);
	return(ercd);
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.2. マクロを展開したAPIと呼び出す内部関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[A] rel_mpf

00 :ER
01 :rel_mpf(ID mpfid, void *blk)
02 :{
03 :    MPFCB   *p_mpfcb;
04 :    SIZE    blkoffset;
05 :    uint_t  blkidx;
06 :    TCB     *p_tcb;
07 :    ER      ercd;
08 :
09 :    if (sense_context() || t_sense_lock()) {
10 :        ercd = E_CTX;
11 :        goto error_exit;
12 :    }
13 :    if (!(TMIN_MPFID <= (mpfid) && (mpfid) <= tmax_mpfid)) {   
14 :        ercd = E_ID; 
15 :        goto error_exit;
16 :    }                      
17 :    p_mpfcb = (&(mpfcb_table[INDEX_MPF(mpfid)]));
18 :    if (!(p_mpfcb->p_mpfinib->mpf <= blk)) {
19 :        ercd = E_PAR; 
20 :        goto error_exit;
21 :    }
22 :
23 :    blkoffset = ((char *) blk) - (char *)(p_mpfcb->p_mpfinib->mpf);
24 :    if (!(blkoffset % p_mpfcb->p_mpfinib->blksz == 0U)) {
25 :        ercd = E_PAR;
26 :        goto error_exit;
27 :    }
28 :
29 :    if (!(blkoffset / p_mpfcb->p_mpfinib->blksz < p_mpfcb->unused)) {
30 :        ercd = E_PAR;
31 :        goto error_exit;
32 :    }
33 :
34 :    blkidx = (uint_t)(blkoffset / p_mpfcb->p_mpfinib->blksz);
35 :    if (!(p_mpfcb->p_mpfinib->p_mpfmb + blkidx)->next == INDEX_ALLOC) {
36 :        ercd = E_PAR;
37 :        goto error_exit;
38 :    }
39 :
40 :    t_lock_cpu();
41 :    if (!queue_empty(&(p_mpfcb->wait_queue))) {
42 :        p_tcb = (TCB *) queue_delete_next(&(p_mpfcb->wait_queue));
43 :        ((WINFO_MPF *)(p_tcb->p_winfo))->blk = blk;
44 :        if (wait_complete(p_tcb)) {
45 :            dispatch();
46 :        }
47 :        ercd = E_OK;
48 :    }
49 :    else {
50 :        p_mpfcb->fblkcnt++;
51 :        (p_mpfcb->p_mpfinib->p_mpfmb + blkidx)->next = p_mpfcb->freelist;
52 :        p_mpfcb->freelist = blkidx;
53 :        ercd = E_OK;
54 :    }
55 :    t_unlock_cpu();
56 :
57 :  error_exit:
58 :        return(ercd);
59 :}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.3. 条件式
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(A1)  09 : sense_context()
(A2)  09 : t_sense_lock()
(A3)  13 : TMIN_TSKID <= (mpfid)
(A4)  13 : (mpfid) <= tmax_tskid
(A5)  18 : !(p_mpfcb->p_mpfinib->mpf <= blk)
(A6)  24 : !(blkoffset % p_mpfcb->p_mpfinib->blksz == 0U)
(A7)  29 : !(blkoffset / p_mpfcb->p_mpfinib->blksz < p_mpfcb->unused)
(A8)  35 : !(p_mpfcb->p_mpfinib->p_mpfmb + blkidx)->next == INDEX_ALLOC
(A9)  41 : !queue_empty(&(p_mpfcb->wait_queue))
(A10) 44 : wait_complete(p_tcb)

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.4. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

         (A1) (A2) (A3) (A4) (A5) (A6) (A7) (A8) (A9) (A10)
(a-1)     T   D/F   D    D    D    D    D    D    D    D
(a-2)     F    T    D    D    D    D    D    D    D    D
(b-1)     F    F    F   D/T   D    D    D    D    D    D
(b-2)     F    F    T    F    D    D    D    D    D    D
(c)       F    F    T    T    ?    D    D    D    D    D
(d)       F    F    T    T    F    F    F    F    F    D
(e-1-1)   F    F    T    T    F    F    F    F    T    T
(e-1-2)   F    F    T    T    F    F    F    F    T    F
(e-1-3)   F    F    T    T    F    F    F    F    T    F
(e-2)     F    F    T    T    F    F    F    F    T    F
(e-3)     F    F    T    T    F    F    F    F    T    F
(e-4)     F    F    T    T    F    F    F    F    T    F
(f-1-1)   F    F    T    T    F    F    F    F    T    T
(f-1-2)   F    F    T    T    F    F    F    F    T    F
(f-1-3)   F    F    T    T    F    F    F    F    T    F
(f-2)     F    F    T    T    F    F    F    F    T    F
(f-3)     F    F    T    T    F    F    F    F    T    F
(f-4)     F    F    T    T    F    F    F    F    T    F
-----------------------------------------------------------
網羅      O    O    O    O    X    X    X    X    O    O

【備考】
・(A5)，(A6)，(A7)，(A8)の網羅をさせるために，
  以下にホワイトボックステストを実施する．

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

3. ホワイトボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
3.1. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

         (A1) (A2) (A3) (A4) (A5) (A6) (A7) (A8) (A9) (A10)
(W_a)     F    F    T    T    T    D    D    D    D    D
(W_b)     F    F    T    T    F    T    D    D    D    D
(W_c)     F    F    T    T    F    F    T    D    D    D
(W_d)     F    F    T    T    F    F    F    T    D    D
-----------------------------------------------------------
網羅      O    O    O    O    O    O    O    O    O    O

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
3.2. テストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(W_a) 以下の条件が成り立つ時．

  ・固定長メモリプール領域の先頭番地より引数で与えたblkが小さい場合．

(W_b) 以下の条件が成り立つ時．

  ・固定長メモリプール領域の先頭番地より引数で与えたblkが大きい場合．
  ・引数で与えたblkと固定長メモリプール領域の先頭番地との差が，
    メモリブロックのサイズの倍数でない場合．

(W_c) 以下の条件が成り立つ時．

  ・固定長メモリプール領域の先頭番地より引数で与えたblkが大きい場合．
  ・引数で与えたblkと固定長メモリプール領域の先頭番地との差が，
    メモリブロックのサイズの倍数である場合．
  ・引数で与えたblkと固定長メモリプール領域の先頭番地との差を，
    メモリブロックのサイズで除した値が，未使用ブロックの先頭より
    小さい場合．

(W_d) 以下の条件が成り立つ時．

  ・固定長メモリプール領域の先頭番地より引数で与えたblkが大きい場合．
  ・引数で与えたblkと固定長メモリプール領域の先頭番地との差が，
    メモリブロックのサイズの倍数である場合．
  ・引数で与えたblkと固定長メモリプール領域の先頭番地との差を，
    メモリブロックのサイズで除した値が，未使用ブロックの先頭より
    大きい場合．
  ・引数で与えたblkの次の未割当てブロックが割当て済みのブロックでない
    場合．



以上．
