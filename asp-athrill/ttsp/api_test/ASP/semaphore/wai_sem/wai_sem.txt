
	wai_sem テストシート

----------------------------------------------------------------------
 TTSP
     TOPPERS Test Suite Package

 Copyright (C) 2009-2011 by Center for Embedded Computing Systems
             Graduate School of Information Science, Nagoya Univ., JAPAN
 Copyright (C) 2009-2011 by Digital Craft Inc.
 Copyright (C) 2009-2011 by NEC Communication Systems, Ltd.
 Copyright (C) 2009-2011 by FUJISOFT INCORPORATED
 Copyright (C) 2009-2010 by Mitsuhiro Matsuura

 上記著作権者は，以下の (1)〜(3) の条件を満たす場合に限り，本ドキュメ
 ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
     および下記の無保証規定が，そのままの形でドキュメント中に含まれて
     いること．
 (2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
     を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
     ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
     りではない．
 (3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
     からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
     本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
     く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

 本ドキュメントは，無保証で提供されているものである．上記著作権者およ
 びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
 る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
 により直接的または間接的に生じたいかなる損害に関しても，その責任を負
 わない．

 $Id: wai_sem.txt 2 2012-05-09 02:23:52Z nces-shigihara $
----------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

0. API仕様

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

wai_sem		セマフォの資源の獲得〔T〕
pol_sem		セマフォの資源の獲得（ポーリング）〔T〕
twai_sem	セマフォの資源の獲得（タイムアウト付き）〔T〕

【C言語API】
	ER ercd = wai_sem(ID semid)
	ER ercd = pol_sem(ID semid)
	ER ercd = twai_sem(ID semid, TMO tmout)

【パラメータ】
	ID			semid		対象セマフォのID番号
	TMO			tmout		タイムアウト時間（twai_semの場合）

【リターンパラメータ】
	ER			ercd		正常終了（E_OK）またはエラーコード

【エラーコード】
	E_CTX			コンテキストエラー（非タスクコンテキストからの呼出
					し，CPUロック状態からの呼出し，ディスパッチ保留状態
					からの呼出し：pol_semを除く）
	E_NOSPT			未サポート機能（制約タスクからの呼出し：pol_semを除
					く）
	E_ID			不正ID番号（semidが不正）
	E_PAR			パラメータエラー（tmoutが不正：twai_semの場合）
	E_NOEXS〔D〕	オブジェクト未登録（対象セマフォが未登録）
	E_OACV〔P〕		オブジェクトアクセス違反（対象セマフォに対する通常
					操作2が許可されていない）
	E_TMOUT			ポーリング失敗またはタイムアウト（wai_semを除く）
	E_RLWAI			待ち禁止状態または待ち状態の強制解除（pol_semを除く）
	E_DLT			待ちオブジェクトの削除または再初期化（pol_semを除く）

【機能】

semidで指定したセマフォ（対象セマフォ）から資源を獲得する．具体的な振舞
いは以下の通り．

対象セマフォの資源数が1以上の場合には，資源数から1が減ぜられる．資源数
が0の場合には，自タスクはセマフォの資源獲得待ち状態となり，対象セマフォ
の待ち行列につながれる．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

1. 仕様ベースのブラックボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.1. エラー条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(a) ディスパッチ保留状態で呼出す場合．

    (a-1) 非タスクコンテキストから呼び出して，E_CTXエラーが返ること．

    (a-2) CPUロック状態で呼び出して，E_CTXエラーが返ること．

    (a-3) 割込み優先度マスクが全解除でない状態で呼び出して，E_CTXエラー
          が返ること．

    (a-4) ディスパッチ禁止状態で呼び出して，E_CTXエラーが返ること．

(b) semidが不正の時にE_IDが返ること．

    (b-1) semidが許容される最小値-1(=0)の時にE_IDが返ること．

    (b-2) semidが許容される最大値+1(TNUM_SEMID+1)の時にE_IDが返ること．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.2. 正常条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(c) 待ち状態が強制解除された時にE_RLWAIが返ること．

(d) 待ちオブジェクトが再初期化された時にE_DLTが返ること．

(e) 待ち状態が解除された時にE_OKが返ること．

(f) 対象セマフォの資源数が1以上の場合には，資源数から1が減ぜられてE_OK
    が返ること．

(g) 対象セマフォの資源数が0の場合には，自タスクはセマフォの資源獲得待ち
    状態となり，対象セマフォの待ち行列につながれること．

    (g-1) 対象セマフォの属性がFIFOの場合，自タスクは待ち行列の最後につ
          ながれること．

          (g-1-1) 待ちタスクがない場合．

          (g-1-2) 優先度が中→低の順で待ちタスクがあり，
                  自タスクの優先度が高の場合．

          (g-1-3) 優先度が中→低の順で待ちタスクがあり，
                  自タスクの優先度が中の場合．

          (g-1-4) 優先度が高→中の順で待ちタスクがあり，
                  自タスクの優先度が低の場合．

    (g-2) 対象セマフォの属性が優先度順の場合，自タスクは優先度に合わせ
          待ち行列の位置につながれること．

          (g-2-1) 待ちタスクがない場合．

          (g-2-2) 優先度が中→低の順で待ちタスクがあり，
                  自タスクの優先度が高の場合．

          (g-2-3) 優先度が中→低の順で待ちタスクがあり，
                  自タスクの優先度が中の場合．

          (g-2-4) 優先度が高→中の順で待ちタスクがあり，
                  自タスクの優先度が低の場合．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

2. ソースコードの条件網羅確認

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.1. ソースコード
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ER
wai_sem(ID semid)
{
	SEMCB	*p_semcb;
	WINFO_SEM winfo_sem;
	ER		ercd;

	LOG_WAI_SEM_ENTER(semid);
	CHECK_DISPATCH();
	CHECK_SEMID(semid);
	p_semcb = get_semcb(semid);

	t_lock_cpu();
	if (p_semcb->semcnt >= 1) {
		p_semcb->semcnt -= 1;
		ercd = E_OK;
	}
	else {
		p_runtsk->tstat = (TS_WAITING | TS_WAIT_SEM);
		wobj_make_wait((WOBJCB *) p_semcb, (WINFO_WOBJ *) &winfo_sem);
		dispatch();
		ercd = winfo_sem.winfo.wercd;
	}
	t_unlock_cpu();

  error_exit:
	LOG_WAI_SEM_LEAVE(ercd);
	return(ercd);
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.2. マクロを展開したAPIと呼び出す内部関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[A] wai_sem

00 : ER
01 : wai_sem(ID semid)
02 : {
03 : 	SEMCB	*p_semcb;
04 : 	WINFO_SEM winfo_sem;
05 : 	ER		ercd;
06 : 
07 : 	if (sense_context() || t_sense_lock() || !dspflg) {
08 : 		ercd = E_CTX;
09 : 		goto error_exit;
10 : 	}
11 : 	if (!(TMIN_SEMID <= semid && semid <= tmax_semid)) {
12 : 		ercd = E_ID;
13 : 		goto error_exit;
14 : 	}
15 : 	p_semcb = &(semcb_table[(uint_t)(semid - TMIN_SEMID]);
16 : 
17 : 	t_lock_cpu();
18 : 	if (p_semcb->semcnt >= 1) {
19 : 		p_semcb->semcnt -= 1;
20 : 		ercd = E_OK;
21 : 	}
22 : 	else {
23 : 		p_runtsk->tstat = (TS_WAITING | TS_WAIT_SEM);
24 : 		wobj_make_wait((WOBJCB *) p_semcb, (WINFO_WOBJ *) &winfo_sem);
25 : 		dispatch();
26 : 		ercd = winfo_sem.winfo.wercd;
27 : 	}
28 : 	t_unlock_cpu();
29 : 
30 :   error_exit:
31 : 	return(ercd);
32 : }

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.3. 条件式
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(A1) 07 : sense_context()
(A2) 07 : t_sense_lock()
(A3) 07 : !dspflg
(A4) 11 : TMIN_SEMID <= semid
(A5) 11 : semid <= tmax_semid
(A6) 18 : p_semcb->semcnt >= 1

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.4. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

        (A1) (A2) (A3) (A4) (A5) (A6)
(a-1)    T   D/F  D/F   D    D    D
(a-2)    F    T   D/F   D    D    D
(a-3)    F    F    T    D    D    D
(a-4)    F    F    T    D    D    D
(b-1)    F    F    F    F   D/T   D
(b-2)    F    F    F    T    F    D
(c)      F    F    F    T    T    F
(d)      F    F    F    T    T    F
(e)      F    F    F    T    T    F
(f)      F    F    F    T    T    T
(g-1-1)  F    F    F    T    T    F
(g-1-2)  F    F    F    T    T    F
(g-1-3)  F    F    F    T    T    F
(g-1-4)  F    F    F    T    T    F
(g-2-1)  F    F    F    T    T    F
(g-2-2)  F    F    F    T    T    F
(g-2-3)  F    F    F    T    T    F
(g-2-4)  F    F    F    T    T    F
-------------------------------------
網羅     O    O    O    O    O    O


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

3. ホワイトボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
必要なし．



以上．
