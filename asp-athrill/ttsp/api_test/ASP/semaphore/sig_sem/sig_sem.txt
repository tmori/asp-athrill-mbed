
	sig_sem テストシート

----------------------------------------------------------------------
 TTSP
     TOPPERS Test Suite Package

 Copyright (C) 2009-2011 by Center for Embedded Computing Systems
             Graduate School of Information Science, Nagoya Univ., JAPAN
 Copyright (C) 2009-2011 by Digital Craft Inc.
 Copyright (C) 2009-2011 by NEC Communication Systems, Ltd.
 Copyright (C) 2009-2011 by FUJISOFT INCORPORATED
 Copyright (C) 2009-2010 by Mitsuhiro Matsuura

 上記著作権者は，以下の (1)〜(3) の条件を満たす場合に限り，本ドキュメ
 ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
     および下記の無保証規定が，そのままの形でドキュメント中に含まれて
     いること．
 (2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
     を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
     ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
     りではない．
 (3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
     からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
     本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
     く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

 本ドキュメントは，無保証で提供されているものである．上記著作権者およ
 びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
 る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
 により直接的または間接的に生じたいかなる損害に関しても，その責任を負
 わない．

 $Id: sig_sem.txt 2 2012-05-09 02:23:52Z nces-shigihara $
----------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

0. API仕様

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

sig_sem		セマフォの資源の返却〔T〕
isig_sem	セマフォの資源の返却〔I〕

【C言語API】
	ER ercd = sig_sem(ID semid)
	ER ercd = isig_sem(ID semid)

【パラメータ】
	ID			semid		対象セマフォのID番号

【リターンパラメータ】
	ER			ercd		正常終了(E_OK)またはエラーコード

【エラーコード】
	E_CTX			コンテキストエラー(非タスクコンテキストからの呼出
					し:sig_semの場合，タスクコンテキストからの呼出し:
					isig_semの場合，CPUロック状態からの呼出し)
	E_ID			不正ID番号(semidが不正)
	E_NOEXS〔D〕	オブジェクト未登録(対象セマフォが未登録)
	E_OACV〔P〕		オブジェクトアクセス違反(対象セマフォに対する通常
					操作1が許可されていない:sig_semの場合)
	E_QOVR			キューイングオーバフロー(資源数が最大資源数に一致)

【機能】

semidで指定したセマフォ(対象セマフォ)に資源を返却する．具体的な振舞い
は以下の通り．

対象セマフォの待ち行列にタスクが存在する場合には，待ち行列の先頭のタス
クが待ち解除される．この時，待ち解除されたタスクが資源を獲得したことに
なるため，対象セマフォの資源数は変化しない．待ち解除されたタスクには，
待ち状態となったサービスコールからE_OKが返る．

待ち行列にタスクが存在しない場合には，対象セマフォの資源数に1が加えられ
る．資源数に1を加えるとそのセマフォの最大資源数を越える場合には，E_QOVR
エラーとなる．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

１．仕様ベースのブラックボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.1. エラー条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(a) ディスパッチ保留状態で呼出す場合．

    (a-1) 非タスクコンテキストから呼び出して，E_CTXエラーが返ること．

    (a-2) CPUロック状態で呼び出して，E_CTXエラーが返ること．

(b) semidが不正の時にE_IDが返ること．

    (b-1) semidが許容される最小値-1(=0)の時にE_IDが返ること．

    (b-2) semidが許容される最大値+1(TNUM_SEMID+1)の時にE_IDが返ること．

(c) 対象セマフォの資源数が最大資源数に一致している時に呼ぶと，E_QOVRが
    返ること．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.2. 正常条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(d) 対象セマフォの待ち行列にタスクが存在しない場合，セマフォの資源数に
    1が加えられてE_OKが返ること．

(e) 対象セマフォの待ち行列にタスクが1つ存在する場合，セマフォの資源数は
    変化しないこと．
    (待ち行列のタスクを対象タスクとする)

    (e-1) 対象タスクの優先度が，実行状態のタスクより高い場合．

          (e-1-1) 実行状態になること．

          (e-1-2) ディスパッチ禁止状態の場合，
                  実行可能状態になること．

          (e-1-3) 割込み優先度マスクが全解除でない場合，
                  実行可能状態になること．

    (e-2) 対象タスクの優先度が，実行状態のタスクより低い場合，
          実行可能状態になり，同じ優先度のタスクの最後につながれること．

    (e-3) 対象タスクの優先度が，実行状態のタスクと同じ場合，
          実行可能状態となり，同じ優先度のタスクの最後につながれること．

    (e-4) 対象タスクが，二重待ち状態の場合，
          強制待ちとなること．

(f) 対象セマフォの待ち行列にタスクが2つ存在する場合，セマフォの資源数は
    変化しないこと．
    (待ち行列の先頭タスクを対象タスクとする)

    (f-1) 対象タスクの優先度が，実行状態のタスクより高い場合．

          (f-1-1) 実行状態になること．

          (f-1-2) ディスパッチ禁止状態の場合，
                  実行可能状態になること．

          (f-1-3) 割込み優先度マスクが全解除でない場合，
                  実行可能状態になること．

    (f-2) 対象タスクの優先度が，実行状態のタスクより低い場合，
          実行可能状態になり，同じ優先度のタスクの最後につながれること．

    (f-3) 対象タスクの優先度が，実行状態のタスクと同じ場合，
          実行可能状態となり，同じ優先度のタスクの最後につながれること．

    (f-4) 対象タスクが，二重待ち状態の場合，
          強制待ちとなること．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

2. ソースコードの条件網羅確認

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.1. ソースコード
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ER
sig_sem(ID semid)
{
	SEMCB	*p_semcb;
	TCB		*p_tcb;
	ER		ercd;
    
	LOG_SIG_SEM_ENTER(semid);
	CHECK_TSKCTX_UNL();
	CHECK_SEMID(semid);
	p_semcb = get_semcb(semid);

	t_lock_cpu();
	if (!queue_empty(&(p_semcb->wait_queue))) {
		p_tcb = (TCB *) queue_delete_next(&(p_semcb->wait_queue));
		if (wait_complete(p_tcb)) {
			dispatch();
		}
		ercd = E_OK;
	}
	else if (p_semcb->semcnt < p_semcb->p_seminib->maxsem) {
		p_semcb->semcnt += 1;
		ercd = E_OK;
	}
	else {
		ercd = E_QOVR;
	}
	t_unlock_cpu();

  error_exit:
	LOG_SIG_SEM_LEAVE(ercd);
	return(ercd);
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.2. マクロを展開したAPIと呼び出す内部関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[A] sig_sem

00 : ER
01 : sig_sem(ID semid)
02 : {
03 : 	SEMCB	*p_semcb;
04 : 	TCB		*p_tcb;
05 : 	ER		ercd;
06 :     
07 : 	if (sense_context() || t_sense_lock()) {
08 : 		ercd = E_CTX;
09 : 		goto error_exit;
10 : 	}
11 : 	if (!(TMIN_SEMID <= semid && semid <= tmax_semid)) {
12 : 		ercd = E_ID;
13 : 		goto error_exit;
14 : 	}
15 : 	p_semcb = &(semcb_table[(uint_t)(semid - TMIN_SEMID)]);
16 : 	
17 : 	t_lock_cpu();
18 : 	if (!queue_empty(&(p_semcb->wait_queue))) {
19 : 		p_tcb = (TCB *) queue_delete_next(&(p_semcb->wait_queue));
20 :		if (wait_complete(p_tcb)) {
21 :			dispatch();
22 :		}
23 : 		ercd = E_OK;
24 : 	}
25 : 	else if (p_semcb->semcnt < p_semcb->p_seminib->maxsem) {
26 : 		p_semcb->semcnt += 1;
27 : 		ercd = E_OK;
28 : 	}
29 : 	else {
30 : 		ercd = E_QOVR;
31 : 	}
32 : 	t_unlock_cpu();
33 : 
34 :  error_exit:
35 : 	return(ercd);
36 : }

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.3. 条件式
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(A1) 07 : sense_context()
(A2) 07 : t_sense_lock()
(A3) 11 : TMIN_SEMID <= semid
(A4) 11 : semid <= tmax_semid
(A5) 18 : !queue_empty(&(p_semcb->wait_queue))
(A6) 20 : wait_complete(p_tcb)
(A7) 25 : p_semcb->semcnt < p_semcb->p_seminib->maxsem

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.4. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

         (A1) (A2) (A3) (A4) (A5) (A6) (A7)
(a-1)     T   D/F   D    D    D    D    D
(a-2)     F    T    D    D    D    D    D
(b-1)     F    F    F   D/T   D    D    D
(b-2)     F    F    T    F    D    D    D
(c)       F    F    T    T    F    D    F
(d)       F    F    T    T    F    D    T
(e-1-1)   F    F    T    T    T    T    D
(e-1-2)   F    F    T    T    T    F    D
(e-1-3)   F    F    T    T    T    F    D
(e-2)     F    F    T    T    T    F    D
(e-3)     F    F    T    T    T    F    D
(e-4)     F    F    T    T    T    F    D
(f-1-1)   F    F    T    T    T    T    D
(f-1-2)   F    F    T    T    T    F    D
(f-1-3)   F    F    T    T    T    F    D
(f-2)     F    F    T    T    T    F    D
(f-3)     F    F    T    T    T    F    D
(f-4)     F    F    T    T    T    F    D
-----------------------------------------
網羅      O    O    O    O    O    O    O


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

3. ホワイトボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
必要なし．



以上．
