
	ini_sem テストシート

----------------------------------------------------------------------
 TTSP
     TOPPERS Test Suite Package

 Copyright (C) 2009-2011 by Center for Embedded Computing Systems
             Graduate School of Information Science, Nagoya Univ., JAPAN
 Copyright (C) 2009-2011 by Digital Craft Inc.
 Copyright (C) 2009-2011 by NEC Communication Systems, Ltd.
 Copyright (C) 2009-2011 by FUJISOFT INCORPORATED
 Copyright (C) 2009-2010 by Mitsuhiro Matsuura

 上記著作権者は，以下の (1)〜(3) の条件を満たす場合に限り，本ドキュメ
 ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
     および下記の無保証規定が，そのままの形でドキュメント中に含まれて
     いること．
 (2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
     を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
     ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
     りではない．
 (3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
     からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
     本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
     く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

 本ドキュメントは，無保証で提供されているものである．上記著作権者およ
 びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
 る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
 により直接的または間接的に生じたいかなる損害に関しても，その責任を負
 わない．

 $Id: ini_sem.txt 2 2012-05-09 02:23:52Z nces-shigihara $
----------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

0. API仕様

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

ini_sem		セマフォの再初期化〔T〕

【C言語API】
	ER ercd = ini_sem(ID semid)

【パラメータ】
	ID			semid		対象セマフォのID番号

【リターンパラメータ】
	ER			ercd		正常終了(E_OK)またはエラーコード

【エラーコード】
	E_CTX			コンテキストエラー(非タスクコンテキストからの呼出
					し，CPUロック状態からの呼出し)
	E_ID			不正ID番号(semidが不正)
	E_NOEXS〔D〕	オブジェクト未登録(対象セマフォが未登録)
	E_OACV〔P〕		オブジェクトアクセス違反(対象セマフォに対する管理
					操作が許可されていない)

【機能】

semidで指定したセマフォ(対象セマフォ)を再初期化する．具体的な振舞いは
以下の通り．

対象セマフォの資源数は，初期資源数に初期化される．また，対象セマフォの
待ち行列につながれたタスクは，待ち行列の先頭のタスクから順に待ち解除さ
れる．待ち解除されたタスクには，待ち状態となったサービスコールから
E_DLTエラーが返る．

【使用上の注意】

ini_semにより複数のタスクが待ち解除される場合，サービスコールの処理時間
およびカーネル内での割込み禁止時間が，待ち解除されるタスクの数に比例し
て長くなる．特に，多くのタスクが待ち解除される場合，カーネル内での割込
み禁止時間が長くなるため，注意が必要である．

セマフォを再初期化した場合に，アプリケーションとの整合性を保つのは，ア
プリケーションの責任である．

【μITRON4.0仕様との関係】

μITRON4.0仕様に定義されていないサービスコールである．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

1. 仕様ベースのブラックボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.1. エラー条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(a) ディスパッチ保留状態で呼出す場合．

    (a-1) 非タスクコンテキストから呼び出して，E_CTXエラーが返ること．

    (a-2) CPUロック状態で呼び出して，E_CTXエラーが返ること．

(b) semidが不正の時にE_IDが返ること．

    (b-1) semidが許容される最小値-1(=0)の時にE_IDが返ること．

    (b-2) semidが許容される最大値+1(TNUM_SEMID+1)の時にE_IDが返ること．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.2. 正常条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(c) 対象セマフォの待ち行列にタスクが存在する場合は，待ちが解除され，資
    源数が初期資源数に初期化されること．
    (待ち行列のタスクを対象タスクとする)

    (c-1) 待ちタスクが1つの場合．

          (c-1-1) 対象タスクの優先度が，実行状態のタスクより高い場合．

                  (c-1-1-1) 実行状態になること．

                  (c-1-1-2) ディスパッチ禁止状態の場合，
                            実行可能状態になること．

                  (c-1-1-3) 割込み優先度マスクが全解除でない場合，
                            実行可能状態になること．

          (c-1-2) 対象タスクの優先度が，実行状態のタスクより低い場合，
                  実行可能状態になり，同じ優先度のタスクの最後に
                  つながれること．

          (c-1-3) 対象タスクの優先度が，実行状態のタスクと同じ場合，
                  実行可能状態となり，同じ優先度のタスクの最後に
                  つながれること．

          (c-1-4) 対象タスクが，二重待ち状態の場合，強制待ちとなること．

    (c-2) 待ちタスクが3つの場合．

          (c-2-1) 全てのタスクの優先度が同じ場合，待ち行列の順に実行可
                  能状態となること．

          (c-2-2) 自タスクの優先度が低で，優先度が低→中→高の順で待
                  ちタスクがある場合，優先度が高のタスクが実行状態とな
                  り，他のタスクは，優先度の順に実行可能状態となること．

(d) 対象セマフォの待ち行列にタスクが存在しない場合は，資源数を初期資源
    数に初期化してE_OKが返ること．

    (d-1) 資源数が初期資源数の場合．

    (d-2) 資源数が0の場合．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

2. ソースコードの条件網羅確認

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.1. ソースコード
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ER
ini_sem(ID semid)
{
	SEMCB	*p_semcb;
	bool_t	dspreq;
	ER		ercd;
    
	LOG_INI_SEM_ENTER(semid);
	CHECK_TSKCTX_UNL();
	CHECK_SEMID(semid);
	p_semcb = get_semcb(semid);

	t_lock_cpu();
	dspreq = init_wait_queue(&(p_semcb->wait_queue));
	p_semcb->semcnt = p_semcb->p_seminib->isemcnt;
	if (dspreq) {
		dispatch();
	}
	ercd = E_OK;
	t_unlock_cpu();

  error_exit:
	LOG_INI_SEM_LEAVE(ercd);
	return(ercd);
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.2. マクロを展開したAPIと呼び出す内部関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[A] ini_sem

00 : ER
01 : ini_sem(ID semid)
02 : {
03 : 	SEMCB	*p_semcb;
04 : 	bool_t	dspreq;
05 : 	ER		ercd;
06 :     
07 : 	if (sense_context() || t_sense_lock()) {
08 : 		ercd = E_CTX;
09 : 		goto error_exit;
10 : 	}
11 : 	if (!(TMIN_SEMID <= semid && semid <= tmax_semid)) {
12 : 		ercd = E_ID;
13 : 		goto error_exit;
14 : 	}
15 : 	p_semcb = &(semcb_table[(uint_t)(semid - TMIN_SEMID)]);
16 : 
17 : 	t_lock_cpu();
18 : 	dspreq = init_wait_queue(&(p_semcb->wait_queue));
19 : 	p_semcb->semcnt = p_semcb->p_seminib->isemcnt;
20 : 	if (dspreq) {
21 : 		dispatch();
22 : 	}
23 : 	ercd = E_OK;
24 : 	t_unlock_cpu();
25 : 
26 :   error_exit:
27 : 	return(ercd);
28 : }

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.3. 条件式
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(A1) 07 : sense_context()
(A2) 07 : t_sense_lock()
(A3) 11 : TMIN_SEMID <= semid
(A4) 11 : semid <= tmax_semid
(A5) 20 : dspreq

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.4. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

           (A1) (A2) (A3) (A4) (A5)
(a-1)       T   D/F   D    D    D
(a-2)       F    T    D    D    D
(b-1)       F    F    F   D/T   D
(b-2)       F    F    T    F    D
(c-1-1-1)   F    F    T    T    T
(c-1-1-2)   F    F    T    T    F
(c-1-1-3)   F    F    T    T    F
(c-1-2)     F    F    T    T    F
(c-1-3)     F    F    T    T    F
(c-1-4)     F    F    T    T    F
(c-2-1)     F    F    T    T    F
(c-2-2)     F    F    T    T    T
(d-1)       F    F    T    T    F
(d-2)       F    F    T    T    F
-----------------------------------
網羅        O    O    O    O    O


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

3. ホワイトボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
必要なし．



以上．
