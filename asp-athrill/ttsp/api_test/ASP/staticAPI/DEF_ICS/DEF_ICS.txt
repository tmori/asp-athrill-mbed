
	DEF_ICS テストシート

----------------------------------------------------------------------
 TTSP
     TOPPERS Test Suite Package

 Copyright (C) 2009-2011 by Center for Embedded Computing Systems
             Graduate School of Information Science, Nagoya Univ., JAPAN
 Copyright (C) 2009-2011 by Digital Craft Inc.
 Copyright (C) 2009-2011 by NEC Communication Systems, Ltd.
 Copyright (C) 2009-2011 by FUJISOFT INCORPORATED
 Copyright (C) 2009-2010 by Mitsuhiro Matsuura

 上記著作権者は，以下の (1)〜(3) の条件を満たす場合に限り，本ドキュメ
 ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
     および下記の無保証規定が，そのままの形でドキュメント中に含まれて
     いること．
 (2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
     を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
     ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
     りではない．
 (3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
     からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
     本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
     く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

 本ドキュメントは，無保証で提供されているものである．上記著作権者およ
 びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
 る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
 により直接的または間接的に生じたいかなる損害に関しても，その責任を負
 わない．

 $Id: DEF_ICS.txt 2 2012-05-09 02:23:52Z nces-shigihara $
----------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

0. API仕様

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

DEF_ICS		非タスクコンテキスト用スタック領域の設定〔S〕

【静的API】
	DEF_ICS({ SIZE istksz, STK_T *istk })

【パラメータ】
　＊非タスクコンテキスト用スタック領域の設定情報
	SIZE		istksz		非タスクコンテキスト用スタック領域のサイズ
							（バイト数）
	STK_T		istk		非タスクコンテキスト用スタック領域の先頭番地

【エラーコード】
	E_RSATR			予約属性（属する保護ドメインかクラスが不正）
	E_PAR			パラメータエラー（istksz，istkが不正，その他の条件
					については機能の項を参照すること）
	E_NOMEM			メモリ不足（非タスクコンテキスト用スタック領域が確
					保できない）
	E_OBJ			オブジェクト状態エラー（非タスクコンテキスト用スタッ
					ク領域がすでに設定されている）

【機能】

各パラメータで指定した非タスクコンテキスト用スタック領域の設定情報に従っ
て，非タスクコンテキスト用スタック領域を設定する．

istkszは整数定数式パラメータ，istkは一般定数式パラメータである．コンフィ
ギュレータは，静的APIのメモリ不足（E_NOMEM）エラーを検出することができ
ない．

istkをNULLとした場合，istkszで指定したサイズのスタック領域を，コンフィ
ギュレータが確保する．istkszにターゲット定義の制約に合致しないサイズを
指定した時には，ターゲット定義の制約に合致するようにサイズを大きい方に
丸めて確保する．

スタック領域をアプリケーションで確保する場合には，istkszで指定したサイ
ズのスタック領域を確保し，istkにその先頭番地を指定する．スタック領域を
アプリケーションで確保するために用意しているデータ型とマクロについては，
CRE_TSKの機能の項を参照すること．

保護機能対応カーネルでは，istkとistkszで指定した非タスクコンテキスト用
のスタック領域がカーネル専用のメモリオブジェクトに含まれない場合，
E_PARエラーとなる．

DEF_ICSにより非タスクコンテキスト用スタック領域を設定しない場合，ターゲッ
ト定義のデフォルトのサイズのスタック領域を，コンフィギュレータが確保す
る．

マルチプロセッサ対応カーネルでは，非タスクコンテキスト用スタック領域は
プロセッサ毎に確保する必要がある．DEF_ICSにより設定する非タスクコンテキ
スト用スタック領域は，DEF_ICSの記述をその囲みの中に含むクラスの初期割付
けプロセッサが使用する．そのプロセッサに対してすでに非タスクコンテキス
ト用スタック領域が設定されている場合には，E_OBJエラーとなる．

保護機能対応カーネルにおいて，DEF_ICSは，カーネルドメインの囲みの中に記
述しなければならない．そうでない場合には，E_RSATRエラーとなる．

istkやistkszにターゲット定義の制約に合致しない先頭番地やサイズを指定し
た時には，E_PARエラーとなる．

【μITRON4.0仕様との関係】

μITRON4.0仕様に定義されていない静的APIである．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

1. 仕様ベースのブラックボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.1. エラー条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(a) istkszが不正の時にE_PARが返ること．

(b) istkが不正の時にE_PARが返ること．

(c) 静的API「DEF_ICS」が複数ある時にE_OBJが返ること．

【備考】
・E_NOMEMは返らないため，テストは必要ない．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.2. 正常条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(d) istkとistkszから非タスクコンテキストが用いるスタック領域が設定され
    る．

    (d-1) istkをNULLとした場合，istkszで指定したサイズのスタック領域が
          確保される．istkszがCHECK_STKSZ_ALIGNの倍数に一致していない時
          は大きい方に丸めたサイズで確保される．

    (d-2) istkがNULLでない場合，スタック領域は自動的に確保されない．

(e) DEF_ICSにより非タスクコンテキスト用スタック領域を設定しない場合，ター
    ゲット定義のデフォルトのサイズのスタック領域を，コンフィギュレータ
    が確保する．

【備考】
・DEF_ICSは，1つのcfgファイルに1つしか定義できないため，スクラッチプロ
  グラムとする．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

2. ソースコードの条件網羅確認

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.1. ソースコード
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[A] kernel.tf

00 : $ 
01 : $  非タスクコンテキスト用のスタック領域
02 : $ 
03 : /*$NL$
04 : $SPC$*  Stack Area for Non-task Context$NL$
05 : $SPC$*/$NL$
06 : $NL$
07 : 
08 : $IF !LENGTH(ICS.ORDER_LIST)$
09 : $	// DEF_ICSがない場合のデフォルト値の設定
10 : 	#ifdef DEFAULT_ISTK$NL$
11 : 	$NL$
12 : 	#define TOPPERS_ISTKSZ		DEFAULT_ISTKSZ$NL$
13 : 	#define TOPPERS_ISTK		DEFAULT_ISTK$NL$
14 : 	$NL$
15 : 	#else /* DEAULT_ISTK */$NL$
16 : 	$NL$
17 : 	static STK_T				_kernel_istack[COUNT_STK_T(DEFAULT_ISTKSZ)];$NL$
18 : 	#define TOPPERS_ISTKSZ		ROUND_STK_T(DEFAULT_ISTKSZ)$NL$
19 : 	#define TOPPERS_ISTK		_kernel_istack$NL$
20 : 	$NL$
21 : 	#endif /* DEAULT_ISTK */$NL$
22 : $ELSE$
23 : 
24 : $	// 静的API「DEF_ICS」が複数ある（E_OBJ）
25 : 	$IF LENGTH(ICS.ORDER_LIST) > 1$
26 : 		$ERROR$E_OBJ: $FORMAT(_("too many %1%"), "DEF_ICS")$$END$
27 : 	$END$
28 : 
29 : $ 	// istkszがスタック領域のサイズとして正しくない場合（E_PAR）
30 : 	$IF !EQ(ICS.ISTK[1], "NULL") && CHECK_STKSZ_ALIGN
31 : 							&& (ICS.ISTKSZ[1] & (CHECK_STKSZ_ALIGN - 1))$
32 : 		$ERROR ICS.TEXT_LINE[1]$E_PAR: $FORMAT(_("%1% `%2%\' in %3% is not aligned"), "istksz", ICS.ISTKSZ[1], "DEF_ICS")$$END$
33 : 	$END$
34 : 
35 : 	$IF EQ(ICS.ISTK[1], "NULL")$
36 : $		// スタック領域の自動割付け
37 : 		static STK_T				_kernel_istack[COUNT_STK_T($ICS.ISTKSZ[1]$)];$NL$
38 : 		#define TOPPERS_ISTKSZ		ROUND_STK_T($ICS.ISTKSZ[1]$)$NL$
39 : 		#define TOPPERS_ISTK		_kernel_istack$NL$
40 : 	$ELSE$
41 : 		#define TOPPERS_ISTKSZ		($ICS.ISTKSZ[1]$)$NL$
42 : 		#define TOPPERS_ISTK		($ICS.ISTK[1]$)$NL$
43 : 	$END$
44 : $END$
45 : $NL$


[B] kernel_check.tf

00 : $	// 非タスクコンテキスト用のスタック領域の先頭番地のチェック
01 : 	$istk = PEEK(SYMBOL("_kernel_istk"), sizeof_void_ptr)$
02 : 	$IF CHECK_STACK_ALIGN && (istk & (CHECK_STACK_ALIGN - 1)) != 0$
03 : 		$ERROR ICE.TEXT_LINE[1]$E_PAR: 
04 : 			$FORMAT(_("%1% `%2%\' in %3% is not aligned"),
05 : 			"istk", ICS.ISTK[1], "DEF_ICS")$$END$
06 : 	$END$
07 : 	$IF CHECK_STACK_NONNULL && istk == 0$
08 : 		$ERROR ICE.TEXT_LINE[1]$E_PAR: 
09 : 			$FORMAT(_("%1% `%2%\' in %3% is null"),
10 : 			"istk", ICS.ISTK[1], "DEF_ICS")$$END$
11 : 	$END$

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.2. マクロを展開したAPIと呼び出す内部関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
必要なし．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.3. 条件式
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(A1) 08 : !LENGTH(ICS.ORDER_LIST)
(A2) 25 : LENGTH(ICS.ORDER_LIST) > 1
(A3) 30 : !EQ(ICS.ISTK[1], "NULL")
(A4) 31 : ICS.ISTKSZ[1] & (CHECK_STKSZ_ALIGN - 1)
(A5) 35 : EQ(ICS.ISTK[1], "NULL")

(B1) 02 : (istk & (CHECK_STACK_ALIGN - 1)) != 0
(B2) 07 : istk == 0

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.4. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

       (A1) (A2) (A3) (A4) (A5) (B1) (B2)
(a)     F    F    T    T    F    D    D
(b)     F    F    T    F    F    T    F
(c)     F    T    D    D    D    D    D
(d-1)   F    F    F    D    T    F    F
(d-2)   F    F    T    F    F    F    F
(e)     T    D    D    D    D    F    F
---------------------------------------
網羅    O    O    O    O    O    O    X


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

3. ホワイトボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
3.1. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
       (A1) (A2) (A3) (A4) (A5) (B1) (B2)
(W_a)   F    F    T    F    F    F    T
---------------------------------------
網羅    O    O    O    O    O    O    O

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
3.2. テストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(W_a) istkが0のとき．



以上．
