
	mrot_rdq テストシート

----------------------------------------------------------------------
 TTSP
     TOPPERS Test Suite Package

 Copyright (C) 2009-2011 by Center for Embedded Computing Systems
             Graduate School of Information Science, Nagoya Univ., JAPAN
 Copyright (C) 2009-2011 by Digital Craft Inc.
 Copyright (C) 2009-2011 by NEC Communication Systems, Ltd.
 Copyright (C) 2009-2011 by FUJISOFT INCORPORATED
 Copyright (C) 2009-2010 by Mitsuhiro Matsuura

 上記著作権者は，以下の (1)〜(3) の条件を満たす場合に限り，本ドキュメ
 ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
     および下記の無保証規定が，そのままの形でドキュメント中に含まれて
     いること．
 (2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
     を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
     ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
     りではない．
 (3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
     からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
     本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
     く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

 本ドキュメントは，無保証で提供されているものである．上記著作権者およ
 びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
 る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
 により直接的または間接的に生じたいかなる損害に関しても，その責任を負
 わない．

 $Id: mrot_rdq.txt 2 2012-05-09 02:23:52Z nces-shigihara $
----------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

0. API仕様

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

mrot_rdq	プロセッサ指定でのタスクの優先順位の回転〔TM〕
imrot_rdq	プロセッサ指定でのタスクの優先順位の回転〔IM〕

【C言語API】
	ER ercd = mrot_rdq(PRI tskpri, ID prcid)
	ER ercd = imrot_rdq(PRI tskpri, ID prcid)

【パラメータ】
	PRI			tskpri		回転対象の優先度（対象優先度）
	ID			prcid		優先順位の回転対象とするプロセッサのID番号

【リターンパラメータ】
	ER			ercd		正常終了（E_OK）またはエラーコード

【エラーコード】
	E_CTX			コンテキストエラー（非タスクコンテキストからの呼出
					し：mrot_rdqの場合，タスクコンテキストからの呼出し
					：imrot_rdqの場合，CPUロック状態からの呼出し）
	E_NOSPT			未サポート機能（対象優先度の最も優先順位が高いタス
					クが制約タスク）
	E_ID			不正ID番号（prcidが不正）
	E_PAR			パラメータエラー（tskpriが不正）
	E_OACV〔P〕		オブジェクトアクセス違反（システム状態に対する通常
					操作1が許可されていない）

【機能】

prcidで指定したプロセッサに割り付けられており，tskpriで指定した優先度
（対象優先度）を持つ実行できる状態のタスクの中で，最も優先順位が高いタ
スクを，同じ優先度のタスクの中で最も優先順位が低い状態にする．対象優先
度を持つ実行できる状態のタスクが無いか1つのみの場合には，何も行われずに
正常終了する．

mrot_rdqにおいて，tskpriにTPRI_SELF（＝0）を指定すると，自タスクのベー
ス優先度が対象優先度となる．

prcidで指定したプロセッサに割り付けられており，対象優先度を持つ実行でき
る状態のタスクの中で，最も優先順位が高いタスクが制約タスクの場合には，
E_NOSPTエラーとなる．

tskpriは，TPRI_SELFであるか（mrot_rdqの場合のみ），TMIN_TPRI以上，
TMAX_TPRI以下でなければならない．

【TOPPERS/ASPカーネルにおける規定】

ASPカーネルでは，mrot_rdq，imrot_rdqをサポートしない．

【μITRON4.0仕様との関係】

μITRON4.0仕様に定義されていないサービスコールである．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

１．仕様ベースのブラックボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.1. エラー条件のテストケース(FMP)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.2. 正常条件のテストケース(FMP)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━



■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

2. ソースコードの条件網羅確認

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.1. ソースコード
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ER
mrot_rdq(PRI tskpri, ID prcid)
{
	uint_t	pri;
	ER		ercd;
	bool_t	dspreq = false;
	PCB		*p_pcb;
	
	LOG_MROT_RDQ_ENTER(tskpri, prcid);
	CHECK_TSKCTX_UNL();
	CHECK_TPRI_SELF(tskpri);
	CHECK_PRCID(prcid);

	t_lock_cpu();
	p_pcb = t_acquire_tsk_lock_prcid(prcid);
	pri = (tskpri == TPRI_SELF) ? (get_my_p_pcb())->p_runtsk->priority : INT_PRIORITY(tskpri);
	if (rotate_ready_queue(pri, p_pcb)) {
		dspreq = dispatch_request(p_pcb);
	}
	ercd = E_OK;
	release_tsk_lock(p_pcb);
	if (dspreq) {
		dispatch();
	}
	t_unlock_cpu();

  error_exit:
	LOG_MROT_RDQ_LEAVE(ercd);
	return(ercd);
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.2. マクロを展開したAPIと呼び出す内部関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[A] mrot_rdq

00 : ER
01 : mrot_rdq(PRI tskpri, ID prcid)
02 : {
03 : 	uint_t	pri;
04 : 	ER		ercd;
05 : 	bool_t	dspreq = false;
06 : 	PCB		*p_pcb;
07 : 	
08 : 	if (!sense_tskctx_unl()) {
09 : 		ercd = E_CTX;
10 : 		goto error_exit;
11 : 	}
12 : 	if (!((TMIN_TPRI <= (tskpri) && (tskpri) <= TMAX_TPRI) || (tskpri) == TPRI_SELF)) {
13 : 		ercd = E_PAR;
14 : 		goto error_exit;
15 : 	}
16 : 	if (!(TMIN_PRCID <= (prcid) && (prcid) <= TNUM_PRCID)) {
17 : 		ercd = E_ID;
18 : 		goto error_exit;
19 : 	}	
20 : 
21 : 	t_lock_cpu();
22 : 	p_pcb = t_acquire_tsk_lock_prcid(prcid);
23 : 	pri = (tskpri == TPRI_SELF) ? (get_my_p_pcb())->p_runtsk->priority : ((uint_t)((tskpri) - TMIN_TPRI));
24 : 	if (rotate_ready_queue(pri, p_pcb)) {
25 : 		dspreq = dispatch_request(p_pcb);
26 : 	}
27 : 	ercd = E_OK;
28 : 	release_tsk_lock(p_pcb);
29 : 	if (dspreq) {
30 : 		dispatch();
31 : 	}
32 : 	t_unlock_cpu();
33 : 
34 :   error_exit:
35 : 	return(ercd);
36 : }

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.3. 条件式
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(A1) 08 : !sense_tskctx_unl()
(A2) 12 : TMIN_TPRI <= (tskpri)
(A3) 12 : (tskpri) <= TMAX_TPRI
(A4) 12 : (tskpri) == TPRI_SELF
(A5) 16 : TMIN_PRCID <= (prcid)
(A6) 16 : (prcid) <= TNUM_PRCID
(A7) 23 : tskpri == TPRI_SELF
(A8) 24 : rotate_ready_queue(pri, p_pcb)
(A9) 29 : dspreq

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.4. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

             (A1) (A2) (A3) (A4) (A5) (A6) (A7) (A8) (A9)
(F-a-1-1)     T    D    D    D    D    D    D    D    D
(F-a-1-2)     T    D    D    D    D    D    D    D    D
(F-a-1-3)     T    D    D    D    D    D    D    D    D
(F-a-2-1)     T    D    D    D    D    D    D    D    D
(F-a-2-2)     T    D    D    D    D    D    D    D    D
(F-a-2-3)     T    D    D    D    D    D    D    D    D
(F-b-1)       F    T    T   D/F   F   D/T   D    D    D
(F-b-2)       F    T    T   D/F   T    F    D    D    D
(F-c-1-1)     F    F   D/T   F    D    D    D    D    D
(F-c-1-2)     F    T    F    F    D    D    D    D    D
(F-c-2-1)     F    F   D/T   F    D    D    D    D    D
(F-c-2-2)     F    T    F    F    D    D    D    D    D
(F-d-1-1-1)   F    F   D/T   T    T    T    T    T    T
(F-d-1-1-2)   F    F   D/T   T    T    T    T    F    F
(F-d-1-1-3)   F    F   D/T   T    T    T    T    F    F
(F-d-1-2)     F    T    T   D/F   T    T    F    F    F
(F-d-2-1-1)   F    F   D/T   T    T    T    T    T    T
(F-d-2-1-2)   F    F   D/T   T    T    T    T    F    F
(F-d-2-1-3)   F    F   D/T   T    T    T    T    F    F
(F-d-2-2)     F    T    T   D/F   T    T    F    F    F
(F-e-1-1-1)   F    T    T   D/F   T    T    F    T    F
(F-e-1-1-2)   F    T    T   D/F   T    T    F    F    F
(F-e-1-1-3)   F    T    T   D/F   T    T    F    F    F
(F-e-1-1-4)   F    T    T   D/F   T    T    F    T    F
(F-e-1-1-5)   F    T    T   D/F   T    T    F    T    F
(F-e-1-1-6)   F    T    T   D/F   T    T    F    T    F
(F-e-1-2)     F    T    T   D/F   T    T    F    F    F
(F-e-2-1-1)   F    T    T   D/F   T    T    F    T    F
(F-e-2-1-2)   F    T    T   D/F   T    T    F    F    F
(F-e-2-1-3)   F    T    T   D/F   T    T    F    F    F
(F-e-2-1-4)   F    T    T   D/F   T    T    F    T    F
(F-e-2-1-5)   F    T    T   D/F   T    T    F    T    F
(F-e-2-1-6)   F    T    T   D/F   T    T    F    T    F
(F-e-2-2)     F    T    T   D/F   T    T    F    F    F
(F-f-1)       F    T    T   D/F   T    T    F    F    F
(F-f-2)       F    T    T   D/F   T    T    F    F    F
---------------------------------------------------------
網羅          O    O    O    O    O    O    O    O    O

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

3. ホワイトボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
必要なし．



以上．
