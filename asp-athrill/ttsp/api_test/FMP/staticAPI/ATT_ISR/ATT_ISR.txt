
	ATT_ISR テストシート

----------------------------------------------------------------------
 TTSP
     TOPPERS Test Suite Package

 Copyright (C) 2009-2011 by Center for Embedded Computing Systems
             Graduate School of Information Science, Nagoya Univ., JAPAN
 Copyright (C) 2009-2011 by Digital Craft Inc.
 Copyright (C) 2009-2011 by NEC Communication Systems, Ltd.
 Copyright (C) 2009-2011 by FUJISOFT INCORPORATED
 Copyright (C) 2009-2010 by Mitsuhiro Matsuura

 上記著作権者は，以下の (1)〜(3) の条件を満たす場合に限り，本ドキュメ
 ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
     および下記の無保証規定が，そのままの形でドキュメント中に含まれて
     いること．
 (2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
     を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
     ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
     りではない．
 (3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
     からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
     本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
     く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

 本ドキュメントは，無保証で提供されているものである．上記著作権者およ
 びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
 る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
 により直接的または間接的に生じたいかなる損害に関しても，その責任を負
 わない．

 $Id: ATT_ISR.txt 2 2012-05-09 02:23:52Z nces-shigihara $
----------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

0. API仕様

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

CRE_ISR		割込みサービスルーチンの生成〔S〕
ATT_ISR		割込みサービスルーチンの追加〔S〕
acre_isr	割込みサービスルーチンの生成〔TD〕

【静的API】
	CRE_ISR(ID isrid, { ATR isratr, intptr_t exinf,
										INTNO intno, ISR isr, PRI isrpri })
	ATT_ISR({ ATR isratr, intptr_t exinf, INTNO intno, ISR isr, PRI isrpri })

【C言語API】
	ER_ID isrid = acre_isr(const T_CISR *pk_cisr)

【パラメータ】
	ID			isrid		対象割込みサービスルーチンのID番号（CRE_ISR
							の場合）
	T_CISR *	pk_cisr		割込みサービスルーチンの生成情報を入れたパ
							ケットへのポインタ（静的APIを除く）

　＊割込みサービスルーチンの生成情報（パケットの内容）
	ATR			isratr		割込みサービスルーチン属性
	intptr_t	exinf		割込みサービスルーチンの拡張情報
	INTNO		intno		割込みサービスルーチンを登録する割込み番号
	ISR			isr			割込みサービスルーチンの先頭番地
	PRI			isrpri		割込みサービスルーチン優先度

【リターンパラメータ】
	ER_ID		isrid		生成された割込みサービスルーチンのID番号（正
							の値）またはエラーコード

【エラーコード】
	E_CTX〔s〕		コンテキストエラー（非タスクコンテキストからの呼出
					し，CPUロック状態からの呼出し）
	E_RSATR			予約属性（isratrが不正または使用できない，属する保
					護ドメインかクラスが不正）
	E_PAR			パラメータエラー（intno，isr，isrpriが不正）
	E_OACV〔sP〕	オブジェクトアクセス違反（システム状態に対する管理
					操作が許可されていない）
	E_MACV〔sP〕	メモリアクセス違反（pk_cisrが指すメモリ領域への読出
					しアクセスが許可されていない）
	E_NOID〔sD〕	ID番号不足（割り付けられる割込みサービスルーチンID
					がない）
	E_OBJ			オブジェクト状態エラー（isridで指定した割込みサービ
					スルーチンが登録済み：CRE_ISRの場合，その他の条件に
					ついては機能の項を参照すること）

【機能】

各パラメータで指定した割込みサービスルーチン生成情報に従って，割込みサー
ビスルーチンを生成する．

ATT_ISRによって生成された割込みサービスルーチンは，ID番号を持たない．

intnoで指定した割込み要求ラインの属性が設定されていない場合には，E_OBJ
エラーとなる．また，intnoで指定した割込み番号に対応する割込みハンドラ番
号に対して，割込みハンドラを定義する機能（DEF_INH，def_inh）によって割
込みハンドラが定義されている場合にも，E_OBJエラーとなる．さらに，intno
でカーネル管理外の割込みを指定した場合にも，E_OBJエラーとなる．

静的APIにおいては，isridはオブジェクト識別名，isratr，intno，isrpriは整
数定数式パラメータ，exinfとisrは一般定数式パラメータである．

保護機能対応カーネルにおいて，CRE_ISRおよびATT_ISRは，カーネルドメイン
の囲みの中に記述しなければならない．そうでない場合には，E_RSATRエラーと
なる．また，acre_isrで，生成する割込みサービスルーチンが属する保護ドメ
インとしてカーネルドメイン以外を指定した場合には，E_RSATRエラーとなる．

マルチプロセッサ対応カーネルで，生成する割込みサービスルーチンの属する
クラスの割付け可能プロセッサが，intnoで指定した割込み要求ラインが接続さ
れたプロセッサの集合に含まれていない場合には，E_RSATRエラーとなる．また，
intnoで指定した割込み要求ラインに対して登録済みの割込みサービスルーチン
がある場合に，生成する割込みサービスルーチンがそれと異なるクラスに属す
る場合にも，E_RSATRエラーとなる．さらに，ターゲット定義で，割込みサービ
スルーチンが属することができるクラスに制限がある場合がある．生成する割
込みサービスルーチンの属するクラスが，ターゲット定義の制限に合致しない
場合にも，E_RSATRエラーとなる．

isrpriは，TMIN_ISRPRI以上，TMAX_ISRPRI以下でなければならない．

静的APIにおいて，isrが不正である場合にE_PARエラーが検出されるか否かは，
ターゲット定義である．

【TOPPERS/ASPカーネルにおける規定】

ASPカーネルでは，ATT_ISRのみをサポートする．ただし，動的生成機能拡張パッ
ケージでは，acre_isrもサポートする．

【TOPPERS/FMPカーネルにおける規定】

FMPカーネルでは，ATT_ISRのみをサポートする．

【μITRON4.0仕様との関係】

割込みサービスルーチンの生成情報に，isrpri（割込みサービスルーチンの割
込み優先度）を追加した．CRE_ISRは，μITRON4.0仕様に定義されていない静的
APIである．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

1. 仕様ベースのブラックボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.1. エラー条件のテストケース(FMP)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(F-a) 対象割込みサービスルーチンを属させるクラスの囲みの外に記述した場
      合，E_RSATRエラーが返ること．(ASP:a，EX_NEW_STATE)

(F-b) 生成する割込みサービスルーチンの属するクラスの割付け可能プロセッ
      サが，intnoで指定した割込み要求ラインが接続されたプロセッサの集
      合に含まれていない場合，E_RSATRとなること．(ASP:a，EX_NEW_STATE)

(F-c) intnoで指定した割込み要求ラインに対して登録済みの割込みサービス
      ルーチンがある場合に，生成する割込みサービスルーチンがそれと異な
      るクラスに属する場合，E_RSATRとなること．(ASP:a，EX_NEW_STATE)

【備考】
・isrの不正は必要に応じてターゲット依存部で検出するものなので，不正な
  isrが指定されたの場合のE_PARのテストは行わない．
  http://dev.toppers.jp/trac/asp/ticket/124
・(F-b)はローカルIRCのみ実施する．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.2. 正常条件のテストケース(FMP)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(F-d) ローカルIRCをサポートしている場合，スレーブプロセッサで各パラメー
      タの内容に従って割込みサービスルーチンが生成され，該当する割込み
      を受け付けたらサービスルーチンが動作すること．
      (ASP:d，EX_OTHER_PRC)

(F-e) グローバルIRCをサポートしている場合，各パラメータの内容に従って割
      込みサービスルーチンが生成され，該当する割込みを受け付けたらサー
      ビスルーチンが動作すること．(ASP:d，EX_NEW_STATE)

【備考】
・(F-e)のスクラッチは作成しない．以下のチケット対応待ち．
  ・https://www.nces.is.nagoya-u.ac.jp/trac/mprtos-conso/ticket/1013


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

2. ソースコードの条件網羅確認

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.1. ソースコード
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[A] kernel.tf

00 : $ 
01 : $ DEF_INH/CFG_INT/ATT_ISRがクラスの囲みに書かれているかのチェック
02 : $ 
03 : $FOREACH order ISR.ORDER_LIST$
04 : 	$IF !LENGTH(ISR.CLASS[order])$
05 : 		$ERROR ISR.TEXT_LINE[order]$E_RSATR: $FORMAT(_("illegal class id of `%1%\' in %2%"), ISR.INTNO[order], "ATT_ISR")$$END$
06 : 	$END$
07 : $END$


[B] kernel.tf

00 : $ 
01 : $ ATT_ISR : 属するクラスの割付け可能プロセッサが，intnoで指定した割込み要求
02 : $ ラインが接続されたプロセッサの集合に含まれているかチェックする
03 : $ 
04 : $FOREACH order ISR.ORDER_LIST$
05 : 	$IF ((ISR.INTNO[order] >> intno_cpu_shift) != 0) 
06 : 		&& (((1 << ((ISR.INTNO[order] >> intno_cpu_shift) - 1)) != CLASS_AFFINITY_MASK[ISR.CLASS[order]]))$
07 : 		$ERROR ISR.TEXT_LINE[order]$E_RSATR: $FORMAT(_("processor affinity of `0x%1$x\' in %2% is not match with class %3% processor affinity mask `0x%4$x\'."), +ISR.INTNO[order], "ATT_ISR", ISR.CLASS[order], +CLASS_AFFINITY_MASK[ISR.CLASS[order]])$$END$
08 : 	$END$
09 : 	$IF ISFUNCTION("TARGET_CHECK_ATT_ISR")$
10 : 		$TARGET_CHECK_ATT_ISR(order)$
11 : 	$END$
12 : $END$


[C] kernel.tf

00  : $ 割込みサービスルーチン（ISR）に関するエラーチェック
01  : $FOREACH order ISR.ORDER_LIST$
02  : $	// isratrが（TA_NULL）でない場合（E_RSATR）
03  : 	$IF (ISR.ISRATR[order] & ~TARGET_ISRATR) != 0$
04  : 		$ERROR ISR.TEXT_LINE[order]$E_RSATR: $FORMAT(_("illegal %1% `%2%\' of %3% `%4%\' in %5%"), "isratr", ISR.ISRATR[order], "isr", ISR.ISR[order], "ATT_ISR")$$END$
05  : 	$END$
06  : 
07  : $	// intnoがATT_ISRに対する割込み番号として正しくない場合（E_PAR）
08  : 	$IF !LENGTH(FIND(INTNO_ATTISR_VALID, (ISR.INTNO[order])))$
09  : 		$ERROR ISR.TEXT_LINE[order]$E_PAR: $FORMAT(_("illegal %1% `%2%\' in %3%"), "intno", ISR.INTNO[order], "ATT_ISR")$$END$
10  : 	$END$
11  : 
12  : $	// (TMIN_ISRPRI <= isrpri && isrpri <= TMAX_ISRPRI)でない場合（E_PAR）
13  : 	$IF !(TMIN_ISRPRI <= ISR.ISRPRI[order] && ISR.ISRPRI[order] <= TMAX_ISRPRI)$
14  : 		$ERROR ISR.TEXT_LINE[order]$E_PAR: $FORMAT(_("illegal %1% `%2%\' in %3%"), "isrpri", ISR.ISRPRI[order], "ATT_ISR")$$END$
15  : 	$END$
16  : $END$
17  : 
18  : $ 
19  : $ DEF_INHで定義された割込み要求ラインは初期割付けプロセッサでのみ実行される
20  : $  
21  : $FOREACH inhno INH.ORDER_LIST$
22  : 	$INH.AFFINITY_MASK[inhno]        = 1 << (CLASS_AFFINITY_INI[INH.CLASS[inhno]] - 1)$
23  : 	$INT.AFFINITY_MASK[INTNO[inhno]] = INH.AFFINITY_MASK[inhno]$
24  : $END$
25  : 
26  : $ 
27  : $ ATT_ISRで定義された割込み要求ラインは割り付け可能プロセッサのいずれかで実行される
28  : $  
29  : $FOREACH order ISR.ORDER_LIST$
30  : 	$INH.AFFINITY_MASK[INHNO[ISR.INTNO[order]]] = CLASS_AFFINITY_MASK[ISR.CLASS[order]]$
31  : 	$INT.AFFINITY_MASK[ISR.INTNO[order]] = INH.AFFINITY_MASK[INHNO[ISR.INTNO[order]]]$
32  : $END$
33  : 
34  : $ 割込みサービスルーチン（ISR）の割込みハンドラの生成
35  : $FOREACH intno INTNO_ATTISR_VALID$
36  : 	$inhno = INHNO[intno]$
37  : 
38  : $	// 割込み番号intnoに対して登録されたISRのリストの作成
39  : 	$isr_order_list = {}$
40  : 	$FOREACH order ISR.ORDER_LIST$
41  : 		$IF ISR.INTNO[order] == intno$
42  : 			$isr_order_list = APPEND(isr_order_list, order)$
43  : 			$order_for_error = order$
44  : 		$END$
45  : 	$END$
46  : 
47  : $	// 割込み番号intnoに対して登録されたISRが存在する場合
48  : 	$IF LENGTH(isr_order_list) > 0$
49  : $		// intnoに対応するinhnoに対してDEF_INHがある場合（E_OBJ）
50  : 		$IF LENGTH(INH.INHNO[inhno])$
51  : 			$ERROR ISR.TEXT_LINE[order_for_error]$E_OBJ: $FORMAT(_("%1% `%2%\' in %3% is duplicated with %4% `%5%\'"), "intno", ISR.INTNO[order_for_error], "ATT_ISR", "inhno", INH.INHNO[inhno])$$END$
52  : 		$END$
53  : 
54  : $		// intnoに対するCFG_INTがない場合（E_OBJ）
55  : 		$IF !LENGTH(INT.INTNO[intno])$
56  : 			$ERROR ISR.TEXT_LINE[order_for_error]$E_OBJ: $FORMAT(_("%1% `%2%\' is not configured with %3%"), "intno", ISR.INTNO[order_for_error], "CFG_INT")$$END$
57  : 		$ELSE$
58  : $			// intnoに対してCFG_INTで設定された割込み優先度がTMIN_INTPRI
59  : $			// よりも小さい場合（E_OBJ）
60  : 			$IF INT.INTPRI[intno] < TMIN_INTPRI$
61  : 				$ERROR INT.TEXT_LINE[intno]$E_OBJ: $FORMAT(_("%1% `%2%\' configured for %3% `%4%\' is higher than %5%"), "intpri", INT.INTPRI[intno], "intno", ISR.INTNO[order_for_error], "TMIN_INTPRI")$$END$
62  : 			$END$
63  : 		$END$
64  : 
65  : $		// CFG_INTが所属するクラスが異なる場合（E_RSATR）
66  : 		$class = ISR.CLASS[order_for_error]$
67  : 		$IF class != INT.CLASS[intno] $
68  : 			$ERROR ISR.TEXT_LINE[order_for_error]$E_RSATR: $FORMAT(_("%1% and %2% for %3% `%4%\' is not defined in same class."), "ATT_ISR", "CFG_INT", "intno", ISR.INTNO[order_for_error])$$END$
69  : 		$END$
70  : 
71  : $		// ISRが全て同じクラスに属しているかのチェック
72  : 		$FOREACH order isr_order_list$
73  : 			$IF class != ISR.CLASS[isr_order_list]$
74  : 				$ERROR ISR.TEXT_LINE[order_for_error]$E_RSATR: $FORMAT(_("%1% `%2%\' is not defined in same class"), "intno", ISR.INTNO[order_for_error])$$END$
75  : 			$END$
76  : 		$END$
77  : 
78  : $		// DEF_INH(inhno, { TA_NULL, _kernel_inthdr_<intno> } );
79  : 		$INH.INHNO[inhno] = inhno$
80  : 		$INH.INHATR[inhno] = VALUE("TA_NULL", 0)$
81  : 		$INH.INTHDR[inhno] = CONCAT("_kernel_inthdr_", intno)$
82  : 		$INH.CLASS[inhno] = class$
83  : 		$INH.ORDER_LIST = APPEND(INH.ORDER_LIST, inhno)$
84  : 
85  : $		// ISR用の割込みハンドラ
86  : 		void$NL$
87  : 		_kernel_inthdr_$intno$(void)$NL$
88  : 		{$NL$
89  : 		$IF LENGTH(isr_order_list) > 1$
90  : 			$TAB$PRI	saved_ipm;$NL$
91  : 			$NL$
92  : 			$TAB$i_begin_int($intno$);$NL$
93  : 			$TAB$saved_ipm = i_get_ipm();$NL$
94  : 		$ELSE$
95  : 			$TAB$i_begin_int($intno$);$NL$
96  : 		$END$
97  : $		// ISRを優先度順に呼び出す
98  : 		$JOINEACH order SORT(isr_order_list, "ISR.ISRPRI") "\tif (i_sense_lock()) {\n\t\ti_unlock_cpu();\n\t}\n\ti_set_ipm(saved_ipm);\n"$
99  : 			$TAB$LOG_ISR_ENTER($intno$);$NL$
100 :			$TAB$((ISR)($ISR.ISR[order]$))((intptr_t)($ISR.EXINF[order]$));$NL$ 
101 :			$TAB$LOG_ISR_LEAVE($intno$);$NL$
102 :		$END$
103 :		$TAB$i_end_int($intno$);$NL$
104 :		}$NL$
105 :	$END$
106 :$END$
107 :$NL$

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.2. マクロを展開したAPIと呼び出す内部関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
必要なし．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.3. 条件式
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

(A1)  05 : !LENGTH(ISR.CLASS[order]

(B1)  05 : (ISR.INTNO[order] >> intno_cpu_shift) != 0
(B2)  05 : (1 << ((ISR.INTNO[order] >> intno_cpu_shift) - 1)) != CLASS_AFFINITY_MASK[ISR.CLASS[order]]
(B3)  09 : ISFUNCTION("TARGET_CHECK_ATT_ISR")

(C1)  03 : (ISR.ISRATR[order] & ~TARGET_ISRATR) != 0
(C2)  08 : !LENGTH(FIND(INTNO_ATTISR_VALID, (ISR.INTNO[order])))
(C3)  13 : TMIN_ISRPRI <= ISR.ISRPRI[order]
(C4)  13 : ISR.ISRPRI[order] <= TMAX_ISRPRI
(C5)  41 : ISR.INTNO[order] == intno
(C6)  48 : LENGTH(isr_order_list) > 0
(C7)  50 : LENGTH(INH.INHNO[inhno])
(C8)  55 : !LENGTH(INT.INTNO[intno])
(C9)  60 : INT.INTPRI[intno] < TMIN_INTPRI
(C10) 67 : class != INT.CLASS[intno]
(C11) 73 : class != ISR.CLASS[isr_order_list]
(C12) 89 : LENGTH(isr_order_list) > 1

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.4. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

       (A1) (B1) (B2) (B3) (C1) (C2) (C3) (C4) (C5) (C6) (C7) (C8) (C9) (C10) (C11) (C12)
(a)     F    T    F    ?    T    D    D    D    D    D    D    D    D     D     D     D
(b-1)   F    T    F    ?    F    T    D    D    D    D    D    D    D     D     D     D
(b-2-1) F    T    F    ?    F    F    F   D/T   D    D    D    D    D     D     D     D
(b-2-2) F    T    F    ?    F    F    T    F    D    D    D    D    D     D     D     D
(c-1)   F    T    F    ?    F    F    T    T    ?    ?    F    T    D     D     D     D
(c-2)   F    T    F    ?    F    F    T    T    ?    ?    T    D    D     D     D     D
(c-3)   F    T    F    ?    F    F    T    T    ?    ?    F    F    T     D     D     D
(d)     F    T    F    ?    F    F    T    T    ?    ?    F    F    F     F     F     F
(W_a)   F    T    F    ?    F    F    T    T    ?    ?    F    F    F     F     F     T
(F-a)   T    D    D    D    D    D    D    D    ?    ?    D    D    D     D     D     D
(F-b)   F    T    T    ?    D    D    D    D    ?    ?    D    D    D     D     D     D
(F-c)   F    T    F    ?    F    F    T    T    ?    ?    F    F    F     F     T     D
(F-d)   F    T    F    ?    F    F    T    T    ?    ?    F    F    F     F     F     F
(F-e)   F    F   D/T   ?    F    F    T    T    ?    ?    F    F    F     F     F     F
-----------------------------------------------------------------------------------------
網羅    O    O    O    X    O    O    O    O    X    X    O    O    O     X     O     O

【備考】
・(B3)はターゲット依存のためホワイトボックステストを実施しない．
・(C5)(C6)は正常系のテストケースによってループ処理で網羅されるためホワイ
  トボックスでは実施しない．

・(C10)はCFG_INTの(E1)で網羅するため除外する．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

3. ホワイトボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
必要なし．



以上．
