
	CRE_DTQ テストシート

----------------------------------------------------------------------
 TTSP
     TOPPERS Test Suite Package

 Copyright (C) 2009-2011 by Center for Embedded Computing Systems
             Graduate School of Information Science, Nagoya Univ., JAPAN
 Copyright (C) 2009-2011 by Digital Craft Inc.
 Copyright (C) 2009-2011 by NEC Communication Systems, Ltd.
 Copyright (C) 2009-2011 by FUJISOFT INCORPORATED
 Copyright (C) 2009-2010 by Mitsuhiro Matsuura

 上記著作権者は，以下の (1)〜(3) の条件を満たす場合に限り，本ドキュメ
 ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
     および下記の無保証規定が，そのままの形でドキュメント中に含まれて
     いること．
 (2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
     を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
     ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
     りではない．
 (3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
     からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
     本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
     く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

 本ドキュメントは，無保証で提供されているものである．上記著作権者およ
 びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
 る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
 により直接的または間接的に生じたいかなる損害に関しても，その責任を負
 わない．

 $Id: CRE_DTQ.txt 2 2012-05-09 02:23:52Z nces-shigihara $
----------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

0. API仕様

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

CRE_DTQ		データキューの生成〔S〕
acre_dtq	データキューの生成〔TD〕

【静的API】
	CRE_DTQ(ID dtqid, { ATR dtqatr, uint_t dtqcnt, void *dtqmb })

【C言語API】
	ER_ID dtqid = acre_dtq(const T_CDTQ *pk_cdtq)

【パラメータ】
	ID			dtqid		生成するデータキューのID番号（CRE_DTQの場合）
	T_CDTQ *	pk_cdtq		データキューの生成情報を入れたパケットへの
							ポインタ（静的APIを除く）

　＊データキューの生成情報（パケットの内容）
	ATR			dtqatr		データキュー属性
	uint_t		dtqcnt		データキュー管理領域に格納できるデータ数
	void *		dtqmb		データキュー管理領域の先頭番地

【リターンパラメータ】
	ER_ID		dtqid		生成されたデータキューのID番号（正の値）ま
							たはエラーコード

【エラーコード】
	E_CTX〔s〕		コンテキストエラー（非タスクコンテキストからの呼出
					し，CPUロック状態からの呼出し）
	E_RSATR			予約属性（dtqatrが不正または使用できない，属する保
					護ドメインかクラスが不正）
	E_NOSPT			未サポート機能（dtqmbがサポートされていない値）
	E_PAR			パラメータエラー（dtqmbが不正）
	E_OACV〔sP〕	オブジェクトアクセス違反（システム状態に対する管理
					操作が許可されていない）
	E_MACV〔sP〕	メモリアクセス違反（pk_cdtqが指すメモリ領域への読出
					しアクセスが許可されていない）
	E_NOID〔sD〕	ID番号不足（割り付けられるデータキューIDがない）
	E_NOMEM			メモリ不足（データキュー管理領域が確保できない）
	E_OBJ			オブジェクト状態エラー（dtqidで指定したデータキュー
					が登録済み：CRE_DTQの場合）

【機能】

各パラメータで指定したデータキュー生成情報に従って，データキューを生成
する．dtqcntとdtqmbからデータキュー管理領域が設定され，格納されているデー
タがない状態に初期化される．また，送信待ち行列と受信待ち行列は，空の状
態に初期化される．

静的APIにおいては，dtqidはオブジェクト識別名，dtqcntは整数定数式パラメー
タ，dtqmbは一般定数式パラメータである．コンフィギュレータは，静的APIの
メモリ不足（E_NOMEM）エラーを検出することができない．

dtqmbをNULLとした場合，dtqcntで指定した数のデータを格納できるデータキュー
管理領域を，コンフィギュレータまたはカーネルが確保する．

〔dtqmbにNULL以外を指定した場合〕

データキュー管理領域をアプリケーションで確保する場合には，必要なサイズ
のデータキュー管理領域を確保し，dtqmbにその先頭番地を指定する．データ
キュー管理領域をアプリケーションで確保するために，次のマクロを用意して
いる．

	TSZ_DTQMB(dtqcnt)	dtqcntで指定した数のデータを格納できるデータ
						キュー管理領域のサイズ（バイト数）
	TCNT_DTQMB(dtqcnt)	dtqcntで指定した数のデータを格納できるデータ
						キュー管理領域を確保するために必要なMB_T型の配
						列の要素数

これらを用いてデータキュー管理領域を確保する方法は次の通り．

MB_T	<データキュー管理領域の変数名>[TCNT_DTQMB(dtqcnt)];

この時，dtqmbには<データキュー管理領域の変数名>を指定する．

この方法に従わず，dtqmbにターゲット定義の制約に合致しない先頭番地を指定
した時には，E_PARエラーとなる．また，保護機能対応カーネルにおいて，
dtqmbで指定したデータキュー管理領域がカーネル専用のメモリオブジェクトに
含まれない場合，E_PARエラーとなる．

【TOPPERS/ASPカーネルにおける規定】

ASPカーネルでは，CRE_DTQのみをサポートする．また，dtqmbにはNULLのみを指
定することができる．NULL以外を指定した場合には，E_NOSPTエラーとなる．た
だし，動的生成機能拡張パッケージでは，acre_dtqもサポートする．acre_dtq
に対しては，dtqmbにNULL以外を指定できないという制限はない．

【TOPPERS/FMPカーネルにおける規定】

FMPカーネルでは，CRE_DTQのみをサポートする．また，dtqmbにはNULLのみを指
定することができる．NULL以外を指定した場合には，E_NOSPTエラーとなる．

【μITRON4.0仕様との関係】

μITRON4.0/PX仕様にあわせて，データキュー生成情報の最後のパラメータを，
dtq（データキュー領域の先頭番地）から，dtqmb（データキュー管理領域の先
頭番地）に改名した．また，TSZ_DTQをTSZ_DTQMBに改名した．

TCNT_DTQMBを新設し，データキュー管理領域をアプリケーションで確保する方
法を規定した．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

1. 仕様ベースのブラックボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.1. エラー条件のテストケース(FMP)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(F-a) 対象データキューを属させるクラスの囲みの外に記述した場合，
      E_RSATRエラーが返ること．(ASP:a，EX_NEW_STATE)

【備考】
・E_NOMEMは返らないため，テストは必要ない．
・FMPカーネルでは，dtqmbにNULL以外を指定した場合には，E_NOSPTエラーとな
  るため，dtqmb不正によるE_PARが返ることを確認するテストは必要ない．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.2. 正常条件のテストケース(FMP)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
該当なし


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

2. ソースコードの条件網羅確認

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.1. ソースコード
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[A] kernel.tf

00 : $ 
01 : $  データキュー
02 : $ 
03 : /*$NL$
04 : $SPC$*  Dataqueue Functions$NL$
05 : $SPC$*/$NL$
06 : $NL$
07 : 
08 : $ クラスの囲みに入れられているかのチェック
09 : $FOREACH dtqid DTQ.ID_LIST$
10 : 	$IF !LENGTH(DTQ.CLASS[dtqid])$
11 : 		$ERROR DTQ.TEXT_LINE[dtqid]$E_RSATR: $FORMAT(_("illegal class id of `%1%\' in %2%"), dtqid, "CRE_DTQ")$$END$
12 : 	$END$
13 : $END$
14 : 
15 : $ データキューID番号の最大値
16 : const ID _kernel_tmax_dtqid = (TMIN_DTQID + TNUM_DTQID - 1);$NL$
17 : $NL$
18 : 
19 : $IF LENGTH(DTQ.ID_LIST)$
20 : 	$FOREACH dtqid DTQ.ID_LIST$
21 : $		// dtqatrが（［TA_TPRI］）でない場合（E_RSATR）
22 : 		$IF (DTQ.DTQATR[dtqid] & ~TA_TPRI) != 0$
23 : 			$ERROR DTQ.TEXT_LINE[dtqid]$E_RSATR: $FORMAT(_("illegal %1% `%2%\' of `%3%\' in %4%"), "dtqatr", DTQ.DTQATR[dtqid], dtqid, "CRE_DTQ")$$END$
24 : 		$END$
25 : 
26 : $		// dtqmbがNULLでない場合（E_NOSPT）
27 : 		$IF !EQ(DTQ.DTQMB[dtqid], "NULL")$
28 : 			$ERROR DTQ.TEXT_LINE[dtqid]$E_NOSPT: $FORMAT(_("illegal %1% `%2%\' of `%3%\' in %4%"), "dtqmb", DTQ.DTQMB[dtqid], dtqid, "CRE_DTQ")$$END$
29 : 		$END$
30 : 
31 : $		// データキュー管理領域
32 : 		$IF DTQ.DTQCNT[dtqid]$
33 : 			$IF ISFUNCTION("GENERATE_DTQMB")$
34 : 				$GENERATE_DTQMB(dtqid)$
35 : 			$ELSE$
36 : 				static DTQMB _kernel_dtqmb_$dtqid$[$DTQ.DTQCNT[dtqid]$];$NL$
37 : 			$END$
38 : 		$END$
39 : 	$END$
40 : $NL$
41 : $	// データキュー初期化ブロックの生成
42 : 	const DTQINIB _kernel_dtqinib_table[TNUM_DTQID] = {$NL$
43 : 	$JOINEACH dtqid DTQ.ID_LIST ",\n"$
44 : 		$IF EQ(+TTYPE_KLOCK, +P_KLOCK)$
45 : 			$TAB${ ($DTQ.DTQATR[dtqid]$), (&(_kernel_prc$CLASS_OBJ_LOCK[DTQ.CLASS[dtqid]]$_pcb.obj_lock)), ($DTQ.DTQCNT[dtqid]$), $IF DTQ.DTQCNT[dtqid]$(_kernel_dtqmb_$dtqid$)$ELSE$NULL$END$ }
46 : 		$ELSE$
47 : 			$TAB${ ($DTQ.DTQATR[dtqid]$), ($DTQ.DTQCNT[dtqid]$), $IF DTQ.DTQCNT[dtqid]$(_kernel_dtqmb_$dtqid$)$ELSE$NULL$END$ }
48 : 		$END$
49 : 	$END$$NL$
50 : 	};$NL$
51 : 	$NL$
52 : 
53 : $	// データキュー管理ブロック
54 : 	$FOREACH dtqid DTQ.ID_LIST$
55 : 		$IF ISFUNCTION("GENERATE_DTQCB")$
56 : 			$GENERATE_DTQCB(dtqid)$
57 : 		$ELSE$
58 : 			DTQCB _kernel_dtqcb_$dtqid$;$NL$
59 : 		$END$
60 : 	$END$$NL$
61 : 
62 : $	// データーキュー管理ブロックアクセステーブル
63 : 	DTQCB* const _kernel_p_dtqcb_table[TNUM_DTQID] = {$NL$
64 : 	$JOINEACH dtqid DTQ.ID_LIST ",\n"$
65 : 		$TAB$&_kernel_dtqcb_$dtqid$
66 : 	$END$$NL$
67 : 	};$NL$
68 : $ELSE$
69 : 	TOPPERS_EMPTY_LABEL(const DTQINIB, _kernel_dtqinib_table);$NL$
70 : 	TOPPERS_EMPTY_LABEL(DTQCB* const, _kernel_p_dtqcb_table);$NL$
71 : $END$
72 : $NL$

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.2. マクロを展開したAPIと呼び出す内部関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
必要なし．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.3. 条件式
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(A1) 10 : !LENGTH(DTQ.CLASS[dtqid])
(A2) 22 : (DTQ.DTQATR[dtqid] & ~TA_TPRI) != 0
(A3) 27 : !EQ(DTQ.DTQMB[dtqid], "NULL")
(A4) 32 : DTQ.DTQCNT[dtqid]
(A5) 33 : ISFUNCTION("GENERATE_DTQMB")
(A6) 44 : EQ(+TTYPE_KLOCK, +P_KLOCK)
(A7) 55 : ISFUNCTION("GENERATE_DTQCB")

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.4. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

       (A1) (A2) (A3) (A4) (A5) (A6) (A7)
(a-1)   F    T    D    D    D    D    D
(a-2)   F    T    D    D    D    D    D
(b)     F    F    T    D    D    D    D
(c)     F    F    T    T    ?   T|F   ?
(d)     F    F    T    T    ?   T|F   ?
(W_a)   F    F    F    F    ?   T|F   ?
(F-a)   T    D    D    D    D    D    D
-----------------------------------------
網羅    O    O    O    O    X    O    X

【備考】
・(A5)(A7)はターゲット依存のためホワイトボックステストを実施しない．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

3. ホワイトボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
必要なし．



以上．
