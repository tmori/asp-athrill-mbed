
	iact_tsk テストシート

----------------------------------------------------------------------
 TTSP
     TOPPERS Test Suite Package

 Copyright (C) 2009-2011 by Center for Embedded Computing Systems
             Graduate School of Information Science, Nagoya Univ., JAPAN
 Copyright (C) 2009-2011 by Digital Craft Inc.
 Copyright (C) 2009-2011 by NEC Communication Systems, Ltd.
 Copyright (C) 2009-2011 by FUJISOFT INCORPORATED
 Copyright (C) 2009-2010 by Mitsuhiro Matsuura

 上記著作権者は，以下の (1)〜(3) の条件を満たす場合に限り，本ドキュメ
 ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
     および下記の無保証規定が，そのままの形でドキュメント中に含まれて
     いること．
 (2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
     を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
     ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
     りではない．
 (3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
     からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
     本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
     く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

 本ドキュメントは，無保証で提供されているものである．上記著作権者およ
 びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
 る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
 により直接的または間接的に生じたいかなる損害に関しても，その責任を負
 わない．

 $Id: iact_tsk.txt 2 2012-05-09 02:23:52Z nces-shigihara $
----------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

0. API仕様

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

act_tsk		タスクの起動〔T〕
iact_tsk	タスクの起動〔I〕

【C言語API】
	ER ercd = act_tsk(ID tskid)
	ER ercd = iact_tsk(ID tskid)

【パラメータ】
	ID			tskid		対象タスクのID番号

【リターンパラメータ】
	ER			ercd		正常終了（E_OK）またはエラーコード

【エラーコード】
	E_CTX			コンテキストエラー（非タスクコンテキストからの呼出
					し：act_tskの場合，タスクコンテキストからの呼出し：
					iact_tskの場合，CPUロック状態からの呼出し）
	E_ID			不正ID番号（tskidが不正）
	E_NOEXS〔D〕	オブジェクト未登録（対象タスクが未登録）
	E_OACV〔P〕		オブジェクトアクセス違反（対象タスクに対する通常操
					作1が許可されていない：act_tskの場合）
	E_QOVR			キューイングオーバフロー（起動要求キューイング数が
					TMAX_ACTCNTに一致）

【機能】

tskidで指定したタスク（対象タスク）に対して起動要求を行う．具体的な振舞
いは以下の通り．

対象タスクが休止状態である場合には，対象タスクに対してタスク起動時に行
うべき初期化処理が行われ，対象タスクは実行できる状態になる．

対象タスクが休止状態でない場合には，対象タスクの起動要求キューイング数
に1が加えられる．起動要求キューイング数に1を加えるとTMAX_ACTCNTを超える
場合には，E_QOVRエラーとなる．

act_tskにおいてtskidにTSK_SELF（＝0）を指定すると，自タスクが対象タスク
となる．

【補足説明】

マルチプロセッサ対応カーネルでは，act_tsk／iact_tskは，対象タスクの次回
起動時の割付けプロセッサを変更しない．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

1. 仕様ベースのブラックボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.1. エラー条件のテストケース(FMP)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.2. 正常条件のテストケース(FMP)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

2. ソースコードの条件網羅確認

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.1. ソースコード
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ER
iact_tsk(ID tskid)
{
	TCB		*p_tcb;
	ER		ercd;
	PCB		*p_pcb;

	LOG_IACT_TSK_ENTER(tskid);
	CHECK_INTCTX_UNL();
	CHECK_TSKID(tskid);
	p_tcb = get_tcb(tskid);

	i_lock_cpu();
	p_pcb = i_acquire_tsk_lock(p_tcb);
	if (TSTAT_DORMANT(p_tcb->tstat)) {
		if (make_active(p_tcb)) {
			if (dispatch_request(p_pcb)) {
				p_pcb->reqflg = true;
			}
		}
		ercd = E_OK;
	}
	else if (!(p_tcb->actque)) {
		p_tcb->actque = true;
		ercd = E_OK;
	}
	else {
		ercd = E_QOVR;
	}
	release_tsk_lock(p_pcb);
	i_unlock_cpu();

  error_exit:
	LOG_IACT_TSK_LEAVE(ercd);
	return(ercd);
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.2. マクロを展開したAPIと呼び出す内部関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[A] iact_tsk

00 : ER
01 : iact_tsk(ID tskid)
02 : {
03 : 	TCB		*p_tcb;
04 : 	ER		ercd;
05 : 	PCB		*p_pcb;
06 : 
07 : 	if (!sense_intctx_unl()) {
08 : 		ercd = E_CTX;
09 : 		goto error_exit;
10 : 	}
11 : 	if (!(TMIN_TSKID <= (tskid) && (tskid) <= tmax_tskid)) {
12 : 		ercd = E_ID;
13 : 		goto error_exit;
14 : 	}
15 : 
16 : 	p_tcb = (p_tcb_table[((uint_t)((tskid) - TMIN_TSKID))]);
17 : 
18 : 	i_lock_cpu();
19 : 	p_pcb = i_acquire_tsk_lock(p_tcb);
20 : 	if ((p_tcb->tstat) == TS_DORMANT) {
21 : 		if (make_active(p_tcb)) {
22 : 			if (dispatch_request(p_pcb)) {
23 : 				p_pcb->reqflg = true;
24 : 			}
25 : 		}
26 : 		ercd = E_OK;
27 : 	}
28 : 	else if (!(p_tcb->actque)) {
29 : 		p_tcb->actque = true;
30 : 		ercd = E_OK;
31 : 	}
32 : 	else {
33 : 		ercd = E_QOVR;
34 : 	}
35 : 	release_tsk_lock(p_pcb);
36 : 	i_unlock_cpu();
37 : 
38 :   error_exit:
39 : 	return(ercd);
40 : }


[B] make_active

00 : bool_t
01 : make_active(TCB *p_tcb)
02 : {
03 : 	activate_context(p_tcb);
04 : 	p_tcb->tstat = TS_RUNNABLE;
05 : 	return(make_runnable(p_tcb));
06 : }


[C] make_runnable

00 : bool_t
01 : make_runnable(TCB *p_tcb)
02 : {
03 : 	uint_t	pri = p_tcb->priority;
04 : 	PCB		*p_pcb;
05 : 
06 : 	p_pcb = p_tcb->p_pcb;
07 : 	queue_insert_prev(&((p_pcb->ready_queue)[pri]), &(p_tcb->task_queue));
08 : 	primap_set(p_pcb, pri);
09 : 
10 : 	if (p_pcb->p_schedtsk == (TCB *) NULL
11 : 		|| pri < p_pcb->p_schedtsk->priority) {
12 : 		p_pcb->p_schedtsk = p_tcb;
13 : 		return(p_pcb->dspflg);
14 : 	}
15 : 	return(false);
16 : }

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.3. 条件式
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(A1) 07 : !sense_intctx_unl()
(A2) 11 : TMIN_TSKID <= tskid
(A3) 11 : tskid <= tmax_tskid
(A4) 20 : (p_tcb->tstat) == TS_DORMANT
(A5) 21 : make_active(p_tcb)
(A6) 22 : dispatch_request(p_pcb)
(A7) 28 : !(p_tcb->actque)

(B1) 06 : make_runnable(p_tcb)

(C1) 10 : p_pcb->p_schedtsk == (TCB *) NULL
(C2) 11 : pri < p_pcb->p_schedtsk->priority

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.4. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

           (A1) (A2) (A3) (A4) (A5) (A6) (B1) (C1) (C2) (A7)
(a-1)       T    D    D    D    D    D    D    D    D    D
(a-1)       T    D    D    D    D    D    D    D    D    D
(b-1)       F    F   D/T   D    D    D    D    D    D    D
(b-2)       F    T    F    D    D    D    D    D    D    D
(c)         F    T    T    F    D    D    D    D    D    F
(d-1-1)     F    T    T    T    T    T    T    F    T    D
(d-1-2)     F    T    T    T    F    D    F    F    T    D
(d-1-3)     F    T    T    T    F    D    F    F    T    D
(d-2)       F    T    T    T    F    D    F    F    F    D
(d-3)       F    T    T    T    F    D    F    F    F    D
(d-4)       F    T    T    T    T    T    T    T    D    D
(e-1)       F    T    T    F    D    D    D    D    D    T
(e-2-1)     F    T    T    F    D    D    D    D    D    T
(e-2-2)     F    T    T    F    D    D    D    D    D    T
(e-2-3)     F    T    T    F    D    D    D    D    D    T
(e-2-4)     F    T    T    F    D    D    D    D    D    T
(e-3)       F    T    T    F    D    D    D    D    D    T
(e-4-1)     F    T    T    F    D    D    D    D    D    T
(e-4-2)     F    T    T    F    D    D    D    D    D    T
(e-5)       F    T    T    F    D    D    D    D    D    T
(F-a-1)     T    D    D    D    D    D    D    D    D    D
(F-a-2)     T    D    D    D    D    D    D    D    D    D
(F-a-3)     T    D    D    D    D    D    D    D    D    D
(F-a-4)     T    D    D    D    D    D    D    D    D    D
(F-b-1)     F    T    T    F    D    D    D    D    D    F
(F-b-2)     F    T    T    F    D    D    D    D    D    F
(F-b-3)     F    T    T    F    D    D    D    D    D    F
(F-c-1-1)   F    T    T    T    T    F    T    F    T    D
(F-c-1-2)   F    T    T    T    F    D    F    F    T    D
(F-c-1-3)   F    T    T    T    F    D    F    F    T    D
(F-c-1-4)   F    T    T    T    T    F    T    F    T    D
(F-c-1-5)   F    T    T    T    T    F    T    F    T    D
(F-c-1-6)   F    T    T    T    T    F    T    F    T    D
(F-c-2)     F    T    T    T    F    D    F    F    F    D
(F-c-3)     F    T    T    T    F    D    F    F    F    D
(F-c-4)     F    T    T    T    T    F    T    T    D    D
(F-c-5)     F    T    T    T    T    F    T    T    D    D
(F-d-1)     F    T    T    F    D    D    D    D    D    T
(F-d-2-1)   F    T    T    F    D    D    D    D    D    T
(F-d-2-2)   F    T    T    F    D    D    D    D    D    T
(F-d-2-3)   F    T    T    F    D    D    D    D    D    T
(F-d-2-4)   F    T    T    F    D    D    D    D    D    T
(F-d-3)     F    T    T    F    D    D    D    D    D    T
(F-d-4-1)   F    T    T    F    D    D    D    D    D    T
(F-d-4-2)   F    T    T    F    D    D    D    D    D    T
(F-d-5)     F    T    T    F    D    D    D    D    D    T
(F-d-6-1)   F    T    T    F    D    D    D    D    D    T
(F-d-6-2)   F    T    T    F    D    D    D    D    D    T
(F-d-6-3)   F    T    T    F    D    D    D    D    D    T
(F-d-6-4)   F    T    T    F    D    D    D    D    D    T
(F-d-6-5)   F    T    T    F    D    D    D    D    D    T
------------------------------------------------------------
網羅        O    O    O    O    O    O    O    O    O    O

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

3. ホワイトボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
必要なし．



以上．
