
	ext_tsk テストシート

----------------------------------------------------------------------
 TTSP
     TOPPERS Test Suite Package

 Copyright (C) 2009-2011 by Center for Embedded Computing Systems
             Graduate School of Information Science, Nagoya Univ., JAPAN
 Copyright (C) 2009-2011 by Digital Craft Inc.
 Copyright (C) 2009-2011 by NEC Communication Systems, Ltd.
 Copyright (C) 2009-2011 by FUJISOFT INCORPORATED
 Copyright (C) 2009-2010 by Mitsuhiro Matsuura

 上記著作権者は，以下の (1)〜(3) の条件を満たす場合に限り，本ドキュメ
 ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
     および下記の無保証規定が，そのままの形でドキュメント中に含まれて
     いること．
 (2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
     を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
     ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
     りではない．
 (3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
     からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
     本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
     く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

 本ドキュメントは，無保証で提供されているものである．上記著作権者およ
 びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
 る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
 により直接的または間接的に生じたいかなる損害に関しても，その責任を負
 わない．

 $Id: ext_tsk.txt 2 2012-05-09 02:23:52Z nces-shigihara $
----------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

0. API仕様

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

ext_tsk		自タスクの終了〔T〕

【C言語API】
	ER ercd = ext_tsk()

【パラメータ】
	なし

【リターンパラメータ】
	ER			ercd		エラーコード

【エラーコード】
	E_SYS			システムエラー（カーネルの誤動作）
	E_CTX			コンテキストエラー（非タスクコンテキストからの呼出
					し）

【機能】

自タスクを終了させる．具体的な振舞いは以下の通り．

自タスクに対してタスク終了時に行うべき処理が行われ，自タスクは休止状態
になる．さらに，自タスクの起動要求キューイング数が0でない場合には，自タ
スクに対してタスク起動時に行うべき処理が行われ，自タスクは実行できる状
態になる．またこの時，起動要求キューイング数から1が減ぜられる．

ext_tskは，CPUロック解除状態，割込み優先度マスク全解除状態，ディスパッ
チ許可状態で呼び出すのが原則であるが，そうでない状態で呼び出された場合
には，CPUロック解除状態，割込み優先度マスク全解除状態，ディスパッチ許可
状態に遷移させた後，自タスクを終了させる．

ext_tskが正常に処理された場合，ext_tskからはリターンしない．

【μITRON4.0仕様との関係】

ext_tskを非タスクコンテキストから呼び出した場合に，E_CTXエラーが返るこ
ととした．μITRON4.0仕様においては，ext_tskからはリターンしないと規定さ
れている．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

1. 仕様ベースのブラックボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.1. エラー条件のテストケース(FMP)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.2. 正常条件のテストケース(FMP)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

2. ソースコードの条件網羅確認

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.1. ソースコード
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
#if TTYPE_KLOCK == G_KLOCK

ER
ext_tsk(void)
{
	ER		ercd;
	PCB		*my_p_pcb;
	TCB		*p_runtsk;

	LOG_EXT_TSK_ENTER();
	CHECK_TSKCTX();

	/*
	 *  CPUロック状態でext_tskが呼ばれた場合は，ロック取得時に割込みを許可
	 *  しない.
	 *  ロック取得時に割込みを許可しないのは， 過度状態の場合にロックを取得
	 *  できなかった場合に割込みを許可すると，割込みが入りサスペンド状態と
	 *  なってしまうためである．
	 *  ディスパッチ禁止や割込み優先度マスク全解除状態でない場合の過度状態の
	 *  場合は，割込みが入っても割込みの出口でディスパッチャに行かずに戻って
	 *  くるため問題ない．
	 */
	if (t_sense_lock()) {
		my_p_pcb = acquire_tsk_lock_without_preemption_self();
	}
	else {
		t_lock_cpu();
		my_p_pcb = t_acquire_tsk_lock_self_without_runnable_check();
	}

	p_runtsk = my_p_pcb->p_runtsk;
	if (my_p_pcb->disdsp) {
		/*
		 *  ディスパッチ禁止状態でext_tskが呼ばれた場合に対応して，ディスパッ
		 *  チ許可状態にしてからタスクを終了する．
		 */
		my_p_pcb->disdsp = false;
	}
	if (!my_p_pcb->ipmflg) {
	/*
	 *  割込み優先度マスク（IPM）がTIPM_ENAALL以外の状態でext_tskが呼ばれ
	 *  た場合に対応して，IPMをTIPM_ENAALLにしてからタスクを終了する．
	 */
		t_set_ipm(TIPM_ENAALL);
		my_p_pcb->ipmflg = true;
	}
	my_p_pcb->dspflg = true;
	/*
	 *  スピンロックを取得している場合は，スピンロックを解除する
	 */
	force_unlock_spin(my_p_pcb);

	/* 再起動時のマイグレーションなし */
	if ((p_runtsk->actprc == TPRC_NONE) || (p_runtsk->actprc == my_p_pcb->prcid)) {
		(void) make_non_runnable(p_runtsk);
		make_dormant(p_runtsk);
		if (p_runtsk->actque) {
			p_runtsk->actque = false;
			p_runtsk->actprc = TPRC_NONE;
			(void) make_active(p_runtsk);
		}
		release_tsk_lock(my_p_pcb);
		exit_and_dispatch();
		ercd = E_SYS;
	}
	else {
		/* 現在コンテキストを捨ててマイグレーション */
		exit_and_migrate(p_runtsk->actprc);
		ercd = E_SYS;
	}

  error_exit:
	LOG_EXT_TSK_LEAVE(ercd);
	return(ercd);
}

#else /* TTYPE_KLOCK != G_KLOCK */


ER
ext_tsk(void)
{
	ER		ercd;
	PCB		*t_p_pcb;
	PCB		*my_p_pcb;
	TCB		*p_runtsk;
	bool_t	locked;

	LOG_EXT_TSK_ENTER();
	CHECK_TSKCTX();

	/*
	 *  CPUロック状態でext_tskが呼ばれた場合は，ロック取得時に割込みを許可
	 *  しない.
	 *  ロック取得時に割込みを許可しないのは， 過度状態の場合にロックを取得
	 *  できなかった場合に割込みを許可すると，割込みが入りサスペンド状態と
	 *  なってしまうためである． 
	 */
	locked = t_sense_lock();
  retry:
	if (locked) {
		my_p_pcb = acquire_tsk_lock_without_preemption_self();
	}
	else {
		t_lock_cpu();
		my_p_pcb = t_acquire_tsk_lock_self_without_runnable_check();
	}

	p_runtsk = my_p_pcb->p_runtsk;

	/* 再起動時のマイグレーションなし */
	if ((p_runtsk->actprc == TPRC_NONE) || (p_runtsk->actprc == my_p_pcb->prcid)) {
		/*
		 *  ディスパッチ禁止状態でext_tskが呼ばれた場合に対応して，ディスパッ
		 *  チ許可状態にしてからタスクを終了する．
		 */
		my_p_pcb->disdsp = false;
		/*
		 *  割込み優先度マスク（IPM）がTIPM_ENAALL以外の状態でext_tskが呼ばれ
		 *  た場合に対応して，IPMをTIPM_ENAALLにしてからタスクを終了する．
		 */
		t_set_ipm(TIPM_ENAALL);
		my_p_pcb->ipmflg = true;
		my_p_pcb->dspflg = true;
		/*
		 *  スピンロックを取得している場合は，スピンロックを解除する
		 */
		force_unlock_spin(my_p_pcb);

		(void) make_non_runnable(p_runtsk);
		make_dormant(p_runtsk);
		if (p_runtsk->actque) {
			p_runtsk->actque = false;
			p_runtsk->actprc = TPRC_NONE;
			(void) make_active(p_runtsk);
		}
		release_tsk_lock(my_p_pcb);
		exit_and_dispatch();
		assert(0);
	}
	else {
		/* 移動先のプロセッサのPCBを取得 */
		t_p_pcb = get_mp_p_pcb(p_runtsk->actprc);
		/* 一旦タスクロックを離す */
		release_tsk_lock(my_p_pcb);

		/*
		 * 現在割り付けられているプロセッサと移動先のプロセッサのタスク
		 * ロックを取得
		 */
		if (locked) {
			acquire_dual_tsk_lock_without_preemption(p_runtsk, p_runtsk->actprc, &my_p_pcb, &t_p_pcb);
		}
		else {
			t_acquire_dual_tsk_lock(p_runtsk, p_runtsk->actprc, &my_p_pcb, &t_p_pcb);
		}
		/*
		 * マイグレーション先のプロセッサが変更された場合はリトライ
		 */
		if (p_runtsk->actprc != t_p_pcb->prcid) {
			release_dual_tsk_lock(p_runtsk->p_pcb, t_p_pcb);
			goto retry;
		}

		/*
		 *  ここで各カーネル状態を変更するのは，ディスパッチ禁止状態と割込
		 *  み優先度マスク全解除状態でない状態による過度状態の場合に，各カ
		 *  ーネル状態を変更してから，ロック取得関数で割込みを許可して割込
		 *  みが入ると，割込みからのリターン時にディスパッチャが呼ばれてし
		 *  まい，休止状態となるためである． 
		 */
		my_p_pcb->disdsp = false;
		t_set_ipm(TIPM_ENAALL);
		my_p_pcb->ipmflg = true;
		my_p_pcb->dspflg = true;
		force_unlock_spin(my_p_pcb);

		/* 現在コンテキストを捨ててマイグレーション */
		exit_and_migrate(p_runtsk->actprc);
		assert(0);
	}

  error_exit:
	LOG_EXT_TSK_LEAVE(ercd);
	return(ercd);
}

#endif /* TTYPE_KLOCK != G_KLOCK */

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.2. マクロを展開したAPIと呼び出す内部関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[A] ext_tsk(TTYPE_KLOCK == G_KLOCK)

00 : ER
01 : ext_tsk(void)
02 : {
03 : 	ER		ercd;
04 : 	PCB		*my_p_pcb;
05 : 	TCB		*p_runtsk;
06 : 
07 : 	if (sense_context()) {
08 : 		ercd = E_CTX;
09 : 		goto error_exit;
10 : 	}
11 : 
12 : 	/*
13 : 	 *  CPUロック状態でext_tskが呼ばれた場合は，ロック取得時に割込みを許可
14 : 	 *  しない.
15 : 	 *  ロック取得時に割込みを許可しないのは， 過度状態の場合にロックを取得
16 : 	 *  できなかった場合に割込みを許可すると，割込みが入りサスペンド状態と
17 : 	 *  なってしまうためである．
18 : 	 *  ディスパッチ禁止や割込み優先度マスク全解除状態でない場合の過度状態の
19 : 	 *  場合は，割込みが入っても割込みの出口でディスパッチャに行かずに戻って
20 : 	 *  くるため問題ない．
21 : 	 */
22 : 	if (t_sense_lock()) {
23 : 		my_p_pcb = acquire_tsk_lock_without_preemption_self();
24 : 	}
25 : 	else {
26 : 		t_lock_cpu();
27 : 		my_p_pcb = t_acquire_tsk_lock_self_without_runnable_check();
28 : 	}
29 : 
30 : 	p_runtsk = my_p_pcb->p_runtsk;
31 : 	if (my_p_pcb->disdsp) {
32 : 		/*
33 : 		 *  ディスパッチ禁止状態でext_tskが呼ばれた場合に対応して，ディスパッ
34 : 		 *  チ許可状態にしてからタスクを終了する．
35 : 		 */
36 : 		my_p_pcb->disdsp = false;
37 : 	}
38 : 	if (!my_p_pcb->ipmflg) {
39 : 	/*
40 : 	 *  割込み優先度マスク（IPM）がTIPM_ENAALL以外の状態でext_tskが呼ばれ
41 : 	 *  た場合に対応して，IPMをTIPM_ENAALLにしてからタスクを終了する．
42 : 	 */
43 : 		t_set_ipm(TIPM_ENAALL);
44 : 		my_p_pcb->ipmflg = true;
45 : 	}
46 : 	my_p_pcb->dspflg = true;
47 : 	/*
48 : 	 *  スピンロックを取得している場合は，スピンロックを解除する
49 : 	 */
50 : 	force_unlock_spin(my_p_pcb);
51 : 
52 : 	/* 再起動時のマイグレーションなし */
53 : 	if ((p_runtsk->actprc == TPRC_NONE) || (p_runtsk->actprc == my_p_pcb->prcid)) {
54 : 		(void) make_non_runnable(p_runtsk);
55 : 		make_dormant(p_runtsk);
56 : 		if (p_runtsk->actque) {
57 : 			p_runtsk->actque = false;
58 : 			p_runtsk->actprc = TPRC_NONE;
59 : 			(void) make_active(p_runtsk);
60 : 		}
61 : 		release_tsk_lock(my_p_pcb);
62 : 		exit_and_dispatch();
63 : 		ercd = E_SYS;
64 : 	}
65 : 	else {
66 : 		/* 現在コンテキストを捨ててマイグレーション */
67 : 		exit_and_migrate(p_runtsk->actprc);
68 : 		ercd = E_SYS;
69 : 	}
70 : 
71 :   error_exit:
72 : 	return(ercd);
73 : }


[B] ext_tsk(TTYPE_KLOCK != G_KLOCK)

00  : ER
01  : ext_tsk(void)
02  : {
03  : 	ER		ercd;
04  : 	PCB		*t_p_pcb;
05  : 	PCB		*my_p_pcb;
06  : 	TCB		*p_runtsk;
07  : 	bool_t	locked;
08  : 
09  : 	if (sense_context()) {
10  : 		ercd = E_CTX;
11  : 		goto error_exit;
12  : 	}
13  : 
14  : 	/*
15  : 	 *  CPUロック状態でext_tskが呼ばれた場合は，ロック取得時に割込みを許可
16  : 	 *  しない.
17  : 	 *  ロック取得時に割込みを許可しないのは， 過度状態の場合にロックを取得
18  : 	 *  できなかった場合に割込みを許可すると，割込みが入りサスペンド状態と
19  : 	 *  なってしまうためである． 
20  : 	 */
21  : 	locked = t_sense_lock();
22  :   retry:
23  : 	if (locked) {
24  : 		my_p_pcb = acquire_tsk_lock_without_preemption_self();
25  : 	}
26  : 	else {
27  : 		t_lock_cpu();
28  : 		my_p_pcb = t_acquire_tsk_lock_self_without_runnable_check();
29  : 	}
30  : 
31  : 	p_runtsk = my_p_pcb->p_runtsk;
32  : 
33  : 	/* 再起動時のマイグレーションなし */
34  : 	if ((p_runtsk->actprc == TPRC_NONE) || (p_runtsk->actprc == my_p_pcb->prcid)) {
35  : 		/*
36  : 		 *  ディスパッチ禁止状態でext_tskが呼ばれた場合に対応して，ディスパッ
37  : 		 *  チ許可状態にしてからタスクを終了する．
38  : 		 */
39  : 		my_p_pcb->disdsp = false;
40  : 		/*
41  : 		 *  割込み優先度マスク（IPM）がTIPM_ENAALL以外の状態でext_tskが呼ばれ
42  : 		 *  た場合に対応して，IPMをTIPM_ENAALLにしてからタスクを終了する．
43  : 		 */
44  : 		t_set_ipm(TIPM_ENAALL);
45  : 		my_p_pcb->ipmflg = true;
46  : 		my_p_pcb->dspflg = true;
47  : 		/*
48  : 		 *  スピンロックを取得している場合は，スピンロックを解除する
49  : 		 */
50  : 		force_unlock_spin(my_p_pcb);
51  : 
52  : 		(void) make_non_runnable(p_runtsk);
53  : 		make_dormant(p_runtsk);
54  : 		if (p_runtsk->actque) {
55  : 			p_runtsk->actque = false;
56  : 			p_runtsk->actprc = TPRC_NONE;
57  : 			(void) make_active(p_runtsk);
58  : 		}
59  : 		release_tsk_lock(my_p_pcb);
60  : 		exit_and_dispatch();
61  : 		assert(0);
62  : 	}
63  : 	else {
64  : 		/* 移動先のプロセッサのPCBを取得 */
65  : 		t_p_pcb = get_mp_p_pcb(p_runtsk->actprc);
66  : 		/* 一旦タスクロックを離す */
67  : 		release_tsk_lock(my_p_pcb);
68  : 
69  : 		/*
70  : 		 * 現在割り付けられているプロセッサと移動先のプロセッサのタスク
71  : 		 * ロックを取得
72  : 		 */
73  : 		if (locked) {
74  : 			acquire_dual_tsk_lock_without_preemption(p_runtsk, p_runtsk->actprc, &my_p_pcb, &t_p_pcb);
75  : 		}
76  : 		else {
77  : 			t_acquire_dual_tsk_lock(p_runtsk, p_runtsk->actprc, &my_p_pcb, &t_p_pcb);
78  : 		}
79  : 		/*
80  : 		 * マイグレーション先のプロセッサが変更された場合はリトライ
81  : 		 */
82  : 		if (p_runtsk->actprc != t_p_pcb->prcid) {
83  : 			release_dual_tsk_lock(p_runtsk->p_pcb, t_p_pcb);
84  : 			goto retry;
85  : 		}
86  : 
87  : 		/*
88  : 		 *  ここで各カーネル状態を変更するのは，ディスパッチ禁止状態と割込
89  : 		 *  み優先度マスク全解除状態でない状態による過度状態の場合に，各カ
90  : 		 *  ーネル状態を変更してから，ロック取得関数で割込みを許可して割込
91  : 		 *  みが入ると，割込みからのリターン時にディスパッチャが呼ばれてし
92  : 		 *  まい，休止状態となるためである． 
93  : 		 */
94  : 		my_p_pcb->disdsp = false;
95  : 		t_set_ipm(TIPM_ENAALL);
96  : 		my_p_pcb->ipmflg = true;
97  : 		my_p_pcb->dspflg = true;
98  : 		force_unlock_spin(my_p_pcb);
99  : 
100 : 		/* 現在コンテキストを捨ててマイグレーション */
101 : 		exit_and_migrate(p_runtsk->actprc);
102 : 		assert(0);
103 : 	}
104 : 
105 :   error_exit:
106 : 	return(ercd);
107 : }

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.3. 条件式
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(A1) 07 : sense_context()
(A2) 22 : t_sense_lock()
(A3) 31 : my_p_pcb->disdsp
(A4) 38 : !my_p_pcb->ipmflg
(A5) 53 : p_runtsk->actprc == TPRC_NONE
(A6) 53 : p_runtsk->actprc == my_p_pcb->prcid
(A7) 56 : p_runtsk->actque

(B1) 09 : sense_context()
(B2) 23 : locked
(B3) 34 : p_runtsk->actprc == TPRC_NONE
(B4) 34 : p_runtsk->actprc == my_p_pcb->prcid
(B5) 54 : p_runtsk->actque
(B6) 73 : locked
(B7) 82 : p_runtsk->actprc != t_p_pcb->prcid

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.4. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[TTYPE_KLOCK == G_KLOCK]

            (A1) (A2) (A3) (A4) (A5) (A6) (A7)
(a)          T    D    D    D    D    D    D
(b-1-1)      F    F    F    F    T   D/F   T
(b-1-2)      F    T    F    F    T   D/F   T
(b-1-3)      F    F    F    T    T   D/F   T
(b-1-4)      F    F    T    F    T   D/F   T
(b-2-1)      F    F    F    F    T   D/F   T
(b-2-2)      F    T    F    F    T   D/F   T
(b-2-3)      F    F    F    T    T   D/F   T
(b-2-4)      F    F    T    F    T   D/F   T
(c-1)        F    F    F    F    T   D/F   F
(c-2)        F    T    F    F    T   D/F   F
(c-3)        F    F    F    T    T   D/F   F
(c-4)        F    F    T    F    T   D/F   F
(F-a-1-1-1)  F    F    F    F    F    F    D
(F-a-1-1-2)  F    F    F    F    F    F    D
(F-a-1-1-3)  F    F    F    F    F    F    D
(F-a-1-1-4)  F    F    F    F    F    F    D
(F-a-1-1-5)  F    F    F    F    F    F    D
(F-a-1-1-6)  F    F    F    F    F    F    D
(F-a-1-2)    F    F    F    F    F    F    D
(F-a-1-3)    F    F    F    F    F    F    D
(F-a-1-4)    F    F    F    F    F    F    D
(F-a-1-5)    F    F    F    F    F    F    D
(F-a-2-1)    F    F    T    F    F    F    D
(F-a-2-2)    F    F    F    T    F    F    D
(F-a-2-3)    F    T    F    F    F    F    D
(F-a-2-4)    F    T    F    F    F    F    D
(F-b-1)      F    F    T    F    T   D/F   F
(F-b-2)      F    F    F    T    T   D/F   F
(F-b-3)      F    T    F    F    T   D/F   F
(F-b-4)      F    T    F    F    T   D/F   F
----------------------------------------------
網羅         O    O    O    O    O    X    O


[TTYPE_KLOCK != G_KLOCK]

            (B1) (B2) (B3) (B4) (B5) (B6) (B7)
(a)          T    D    D    D    D    D    D
(b-1-1)      F    F    T   D/F   T    D    D
(b-1-2)      F    T    T   D/F   T    D    D
(b-1-3)      F    F    T   D/F   T    D    D
(b-1-4)      F    F    T   D/F   T    D    D
(b-2-1)      F    F    T   D/F   T    D    D
(b-2-2)      F    T    T   D/F   T    D    D
(b-2-3)      F    F    T   D/F   T    D    D
(b-2-4)      F    F    T   D/F   T    D    D
(c-1)        F    F    T   D/F   F    D    D
(c-2)        F    T    T   D/F   F    D    D
(c-3)        F    F    T   D/F   F    D    D
(c-4)        F    F    T   D/F   F    D    D
(F-a-1-1-1)  F    F    F    F    D    F    F
(F-a-1-1-2)  F    F    F    F    D    F    F
(F-a-1-1-3)  F    F    F    F    D    F    F
(F-a-1-1-4)  F    F    F    F    D    F    F
(F-a-1-1-5)  F    F    F    F    D    F    F
(F-a-1-1-6)  F    F    F    F    D    F    F
(F-a-1-2)    F    F    F    F    D    F    F
(F-a-1-3)    F    F    F    F    D    F    F
(F-a-1-4)    F    F    F    F    D    F    F
(F-a-1-5)    F    F    F    F    D    F    F
(F-a-2-1)    F    F    F    F    D    F    F
(F-a-2-2)    F    F    F    F    D    F    F
(F-a-2-3)    F    T    F    F    D    T    F
(F-a-2-4)    F    T    F    F    D    T    F
(F-b-1)      F    F    T   D/F   F    D    D
(F-b-2)      F    F    T   D/F   F    D    D
(F-b-3)      F    T    T   D/F   F    D    D
(F-b-4)      F    T    T   D/F   F    D    D
----------------------------------------------
網羅         O    O    O    X    O    O    X

【備考】
・(A6)(B4)の網羅をさせるために，以下にホワイトボックスを実施する．
・(B7)はタイミング依存のため、ホワイトボックステストは実施しない．

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

3. ホワイトボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
3.1. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[TTYPE_KLOCK == G_KLOCK]

            (A1) (A2) (A3) (A4) (A5) (A6) (A7)
(W_F-a)      F    F    F    F    F    T    T
----------------------------------------------
網羅         O    O    O    O    O    O    O


[TTYPE_KLOCK != G_KLOCK]

            (B1) (B2) (B3) (B4) (B5) (B6) (B7)
(W_F-a)      F    F    F    T    T    D    D
----------------------------------------------
網羅         O    O    O    O    O    O    X

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
3.2. テストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━



以上．
