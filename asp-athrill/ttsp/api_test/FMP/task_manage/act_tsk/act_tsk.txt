
	act_tsk テストシート

----------------------------------------------------------------------
 TTSP
     TOPPERS Test Suite Package

 Copyright (C) 2009-2011 by Center for Embedded Computing Systems
             Graduate School of Information Science, Nagoya Univ., JAPAN
 Copyright (C) 2009-2011 by Digital Craft Inc.
 Copyright (C) 2009-2011 by NEC Communication Systems, Ltd.
 Copyright (C) 2009-2011 by FUJISOFT INCORPORATED
 Copyright (C) 2009-2010 by Mitsuhiro Matsuura

 上記著作権者は，以下の (1)〜(3) の条件を満たす場合に限り，本ドキュメ
 ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
     および下記の無保証規定が，そのままの形でドキュメント中に含まれて
     いること．
 (2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
     を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
     ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
     りではない．
 (3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
     からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
     本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
     く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

 本ドキュメントは，無保証で提供されているものである．上記著作権者およ
 びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
 る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
 により直接的または間接的に生じたいかなる損害に関しても，その責任を負
 わない．

 $Id: act_tsk.txt 2 2012-05-09 02:23:52Z nces-shigihara $
----------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

0. API仕様

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

act_tsk		タスクの起動〔T〕
iact_tsk	タスクの起動〔I〕

【C言語API】
	ER ercd = act_tsk(ID tskid)
	ER ercd = iact_tsk(ID tskid)

【パラメータ】
	ID			tskid		対象タスクのID番号

【リターンパラメータ】
	ER			ercd		正常終了（E_OK）またはエラーコード

【エラーコード】
	E_CTX			コンテキストエラー（非タスクコンテキストからの呼出
					し：act_tskの場合，タスクコンテキストからの呼出し：
					iact_tskの場合，CPUロック状態からの呼出し）
	E_ID			不正ID番号（tskidが不正）
	E_NOEXS〔D〕	オブジェクト未登録（対象タスクが未登録）
	E_OACV〔P〕		オブジェクトアクセス違反（対象タスクに対する通常操
					作1が許可されていない：act_tskの場合）
	E_QOVR			キューイングオーバフロー（起動要求キューイング数が
					TMAX_ACTCNTに一致）

【機能】

tskidで指定したタスク（対象タスク）に対して起動要求を行う．具体的な振舞
いは以下の通り．

対象タスクが休止状態である場合には，対象タスクに対してタスク起動時に行
うべき初期化処理が行われ，対象タスクは実行できる状態になる．

対象タスクが休止状態でない場合には，対象タスクの起動要求キューイング数
に1が加えられる．起動要求キューイング数に1を加えるとTMAX_ACTCNTを超える
場合には，E_QOVRエラーとなる．

act_tskにおいてtskidにTSK_SELF（＝0）を指定すると，自タスクが対象タスク
となる．

【補足説明】

マルチプロセッサ対応カーネルでは，act_tsk／iact_tskは，対象タスクの次回
起動時の割付けプロセッサを変更しない．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

1. 仕様ベースのブラックボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.1. エラー条件のテストケース(FMP)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.2. 正常条件のテストケース(FMP)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━



■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

2. ソースコードの条件網羅確認

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.1. ソースコード
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ER
act_tsk(ID tskid)
{
	TCB		*p_tcb;
	ER		ercd;
	bool_t	dspreq = false;
	PCB		*p_pcb;

	LOG_ACT_TSK_ENTER(tskid);
	CHECK_TSKCTX_UNL();
	CHECK_TSKID_SELF(tskid);

	t_lock_cpu();
	p_tcb = get_tcb_self(tskid, get_my_p_pcb());
	p_pcb = t_acquire_tsk_lock(p_tcb);
	if (TSTAT_DORMANT(p_tcb->tstat)) {
		if (make_active(p_tcb)) {
			dspreq = dispatch_request(p_pcb);
		}
		ercd = E_OK;
	}
	else if (!(p_tcb->actque)) {
		p_tcb->actque = true;
		ercd = E_OK;
	}
	else {
		ercd = E_QOVR;
	}
	release_tsk_lock(p_pcb);
	if (dspreq) {
		dispatch();
	}
	t_unlock_cpu();

  error_exit:
	LOG_ACT_TSK_LEAVE(ercd);
	return(ercd);
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.2. マクロを展開したAPIと呼び出す内部関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[A] act_tsk

00 : ER
01 : act_tsk(ID tskid)
02 : {
03 : 	TCB		*p_tcb;
04 : 	ER		ercd;
05 : 	bool_t	dspreq = false;
06 : 	PCB		*p_pcb;
07 : 
08 : 	if (!sense_tskctx_unl()) {
09 : 		ercd = E_CTX;
10 : 		goto error_exit;
11 : 	}
12 : 	if (!((TMIN_TSKID <= (tskid) && (tskid) <= tmax_tskid) || (tskid) == TSK_SELF)) {
13 : 		ercd = E_ID;
14 : 		goto error_exit;
15 : 	}
16 : 
17 : 	t_lock_cpu();
18 : 	p_tcb = ((tskid) == TSK_SELF ? (get_my_p_pcb())->p_runtsk : (p_tcb_table[((uint_t)((tskid) - TMIN_TSKID))]));
19 : 	p_pcb = t_acquire_tsk_lock(p_tcb);
20 : 	if ((p_tcb->tstat) == TS_DORMANT) {
21 : 		if (make_active(p_tcb)) {
22 : 			dspreq = dispatch_request(p_pcb);
23 : 		}
24 : 		ercd = E_OK;
25 : 	}
26 : 	else if (!(p_tcb->actque)) {
27 : 		p_tcb->actque = true;
28 : 		ercd = E_OK;
29 : 	}
30 : 	else {
31 : 		ercd = E_QOVR;
32 : 	}
33 : 	release_tsk_lock(p_pcb);
34 : 	if (dspreq) {
35 : 		dispatch();
36 : 	}
37 : 	t_unlock_cpu();
38 : 
39 :   error_exit:
40 : 	return(ercd);
41 : }

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.3. 条件式
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(A1) 08 : !sense_tskctx_unl()
(A2) 12 : TMIN_TSKID <= tskid
(A3) 12 : tskid <= tmax_tskid
(A4) 12 : (tskid) == TSK_SELF
(A5) 18 : (tskid) == TSK_SELF
(A6) 20 : p_tcb->tstat == TS_DORMANT
(A7) 21 : make_active(p_tcb)
(A8) 26 : !(p_tcb->actque)
(A9) 34 : dspreq

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.4. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

             (A1) (A2) (A3) (A4) (A5) (A6) (A7) (A8) (A9)
(a-1)         T    D    D    D    D    D    D    D    D
(a-2)         T    D    D    D    D    D    D    D    D
(b-1)         F    F   D/T   F    D    D    D    D    D
(b-2)         F    T    F    F    D    D    D    D    D
(c-1)         F    T    T   D/F   F    F    D    F    F
(c-2)         F    F   D/T   T    T    F    D    F    F
(d-1-1)       F    T    T   D/F   F    T    T    D    T
(d-1-2)       F    T    T   D/F   F    T    F    D    F
(d-1-3)       F    T    T   D/F   F    T    F    D    F
(d-2)         F    T    T   D/F   F    T    F    D    F
(d-3)         F    T    T   D/F   F    T    F    D    F
(e-1-1)       F    T    T   D/F   F    F    D    T    F
(e-1-2-1)     F    T    T   D/F   F    F    D    T    F
(e-1-2-2)     F    T    T   D/F   F    F    D    T    F
(e-1-2-3)     F    T    T   D/F   F    F    D    T    F
(e-1-2-4)     F    T    T   D/F   F    F    D    T    F
(e-1-3)       F    T    T   D/F   F    F    D    T    F
(e-1-4-1)     F    T    T   D/F   F    F    D    T    F
(e-1-4-2)     F    T    T   D/F   F    F    D    T    F
(e-2)         F    F   D/T   T    T    F    D    T    F
(F-a-1)       T    D    D    D    D    D    D    D    D
(F-a-2)       T    D    D    D    D    D    D    D    D
(F-a-3)       T    D    D    D    D    D    D    D    D
(F-a-4)       T    D    D    D    D    D    D    D    D
(F-b-1)       F    T    T   D/F   F    F    D    F    F
(F-b-2)       F    T    T   D/F   F    F    D    F    F
(F-b-3)       F    F   D/T   T    T    F    D    F    F
(F-c-1-1)     F    T    T   D/F   F    T    T    D    F
(F-c-1-2)     F    T    T   D/F   F    T    F    D    F
(F-c-1-3)     F    T    T   D/F   F    T    F    D    F
(F-c-1-4)     F    T    T   D/F   F    T    T    D    F
(F-c-1-5)     F    T    T   D/F   F    T    T    D    F
(F-c-1-6)     F    T    T   D/F   F    T    T    D    F
(F-c-2)       F    T    T   D/F   F    T    F    D    F
(F-c-3)       F    T    T   D/F   F    T    F    D    F
(F-c-4)       F    T    T   D/F   F    T    T    D    F
(F-c-5)       F    T    T   D/F   F    T    T    D    F
(F-d-1)       F    T    T   D/F   F    F    D    T    F
(F-d-2-1)     F    T    T   D/F   F    F    D    T    F
(F-d-2-2)     F    T    T   D/F   F    F    D    T    F
(F-d-2-3)     F    T    T   D/F   F    F    D    T    F
(F-d-2-4)     F    T    T   D/F   F    F    D    T    F
(F-d-3)       F    T    T   D/F   F    F    D    T    F
(F-d-4-1)     F    T    T   D/F   F    F    D    T    F
(F-d-4-2)     F    T    T   D/F   F    F    D    T    F
(F-d-5)       F    T    T   D/F   F    F    D    T    F
(F-d-6-1)     F    T    T   D/F   F    F    D    T    F
(F-d-6-2)     F    T    T   D/F   F    F    D    T    F
(F-d-6-3)     F    T    T   D/F   F    F    D    T    F
(F-d-6-4)     F    T    T   D/F   F    F    D    T    F
(F-d-6-5)     F    T    T   D/F   F    F    D    T    F
(F-e-1)       F    F   D/T   T    F    F    D    T    F
(F-e-2)       F    F   D/T   T    F    F    D    T    F
--------------------------------------------------------
網羅          O    O    O    O    O    O    O    O    O


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

3. ホワイトボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
必要なし．



以上．
