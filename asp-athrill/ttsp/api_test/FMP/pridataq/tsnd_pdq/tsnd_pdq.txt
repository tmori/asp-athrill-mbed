
	tsnd_pdq テストシート

----------------------------------------------------------------------
 TTSP
     TOPPERS Test Suite Package

 Copyright (C) 2009-2011 by Center for Embedded Computing Systems
             Graduate School of Information Science, Nagoya Univ., JAPAN
 Copyright (C) 2009-2011 by Digital Craft Inc.
 Copyright (C) 2009-2011 by NEC Communication Systems, Ltd.
 Copyright (C) 2009-2011 by FUJISOFT INCORPORATED
 Copyright (C) 2009-2010 by Mitsuhiro Matsuura

 上記著作権者は，以下の (1)〜(3) の条件を満たす場合に限り，本ドキュメ
 ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
     および下記の無保証規定が，そのままの形でドキュメント中に含まれて
     いること．
 (2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
     を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
     ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
     りではない．
 (3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
     からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
     本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
     く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

 本ドキュメントは，無保証で提供されているものである．上記著作権者およ
 びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
 る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
 により直接的または間接的に生じたいかなる損害に関しても，その責任を負
 わない．

 $Id: tsnd_pdq.txt 2 2012-05-09 02:23:52Z nces-shigihara $
----------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

0. API仕様

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

snd_pdq		優先度データキューへの送信〔T〕
psnd_pdq	優先度データキューへの送信（ポーリング）〔T〕
ipsnd_pdq	優先度データキューへの送信（ポーリング）〔I〕
tsnd_pdq	優先度データキューへの送信（タイムアウト付き）〔T〕

【C言語API】
	ER ercd = snd_pdq(ID pdqid, intptr_t data, PRI datapri)
	ER ercd = psnd_pdq(ID pdqid, intptr_t data, PRI datapri)
	ER ercd = ipsnd_pdq(ID pdqid, intptr_t data, PRI datapri)
	ER ercd = tsnd_pdq(ID pdqid, intptr_t data, PRI datapri, TMO tmout)

【パラメータ】
	ID			pdqid		対象優先度データキューのID番号
	intptr_t	data		送信データ
	PRI			datapri		送信データの優先度
	TMO			tmout		タイムアウト時間（tsnd_pdqの場合）

【リターンパラメータ】
	ER			ercd		正常終了（E_OK）またはエラーコード

【エラーコード】
	E_CTX			コンテキストエラー（非タスクコンテキストからの呼出
					し：ipsnd_pdqを除く，タスクコンテキストからの呼出し：
					ipsnd_pdqの場合，CPUロック状態からの呼出し，ディス
					パッチ保留状態からの呼出し：snd_pdqとtsnd_pdqの場合）
	E_NOSPT			未サポート機能（制約タスクからの呼出し：snd_pdqと
					tsnd_pdqの場合）
	E_ID			不正ID番号（pdqidが不正）
	E_PAR			パラメータエラー（datapriが不正，tmoutが不正：
					tsnd_pdqのみ）
	E_NOEXS〔D〕	オブジェクト未登録（対象優先度データキューが未登録）
	E_OACV〔P〕		オブジェクトアクセス違反（対象優先度データキューに
					対する通常操作1が許可されていない：ipsnd_pdqを除く）
	E_TMOUT			ポーリング失敗またはタイムアウト（snd_pdqを除く）
	E_RLWAI			待ち禁止状態または待ち状態の強制解除（snd_pdqと
					tsnd_pdqの場合）
	E_DLT			待ちオブジェクトの削除または再初期化（snd_pdqと
					tsnd_pdqの場合）

【機能】

pdqidで指定した優先度データキュー（対象優先度データキュー）に，dataで指
定したデータを，datapriで指定した優先度で送信する．具体的な振舞いは以下
の通り．

対象優先度データキューの受信待ち行列にタスクが存在する場合には，受信待
ち行列の先頭のタスクが，dataで指定したデータを受信し，待ち解除される．
待ち解除されたタスクには，待ち状態となったサービスコールからE_OKが返る．

対象優先度データキューの受信待ち行列にタスクが存在せず，優先度データ
キュー管理領域にデータを格納するスペースがある場合には，dataで指定した
データが，datapriで指定したデータの優先度順で優先度データキュー管理領域
に格納される．

対象優先度データキューの受信待ち行列にタスクが存在せず，優先度データ
キュー管理領域にデータを格納するスペースがない場合には，自タスクは優先
度データキューへの送信待ち状態となり，対象優先度データキューの送信待ち
行列につながれる．

datapriは，TMIN_DPRI以上で，対象データキューに送信できるデータ優先度の
最大値以下でなければならない．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

1. 仕様ベースのブラックボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.1. エラー条件のテストケース(FMP)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.2. 正常条件のテストケース(FMP)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

2. ソースコードの条件網羅確認

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.1. ソースコード
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

ER
tsnd_pdq(ID pdqid, intptr_t data, PRI datapri, TMO tmout)
{
	PDQCB	*p_pdqcb;
	bool_t	dspreq = false;
	ER		ercd;
	TCB		*p_tcb;
	PCB		*my_p_pcb;
	PCB		*p_pcb;
	TCB		*p_runtsk;

	LOG_TSND_PDQ_ENTER(pdqid, data, datapri, tmout);
	CHECK_TSKCTX_UNL();
	CHECK_PDQID(pdqid);
	CHECK_TMOUT(tmout);
	p_pdqcb = get_pdqcb(pdqid);
	CHECK_PAR(TMIN_DPRI <= datapri && datapri <= p_pdqcb->p_pdqinib->maxdpri);

	t_lock_cpu();
	my_p_pcb = get_my_p_pcb();
	T_CHECK_DISPATCH(my_p_pcb);

  retry:
	t_acquire_obj_lock(&GET_OBJLOCK(p_pdqcb));
	if (!queue_empty(&(p_pdqcb->rwait_queue))) {
		p_tcb = (TCB *)(p_pdqcb->rwait_queue.p_next);
		if ((p_pcb = t_acquire_nested_tsk_lock(p_tcb, &GET_OBJLOCK(p_pdqcb))) == NULL){
			goto retry;
		}
		queue_delete((QUEUE *) p_tcb);
		p_tcb->winfo_obj.pdq.data = data;
		p_tcb->winfo_obj.pdq.datapri = datapri;
		if (wait_complete(p_tcb)) {
			dspreq = dispatch_request(p_pcb);
		}
		release_nested_tsk_lock(p_pcb);
		release_obj_lock(&GET_OBJLOCK(p_pdqcb));
		if (dspreq) {
			dispatch();
		}
		ercd = E_OK;
	}
	else if (p_pdqcb->count < p_pdqcb->p_pdqinib->pdqcnt) {
		enqueue_pridata(p_pdqcb, data, datapri);
		release_obj_lock(&GET_OBJLOCK(p_pdqcb));
		ercd = E_OK;
	}   /* バッファがフルかつ受信待ちタスクなし */
	else if (tmout == TMO_POL) {
		release_obj_lock(&GET_OBJLOCK(p_pdqcb));
		ercd = E_TMOUT;
	}
	else {
		if ((my_p_pcb = t_acquire_nested_tsk_lock_self(&GET_OBJLOCK(p_pdqcb))) == NULL) {
			goto retry;
		}
		p_runtsk = my_p_pcb->p_runtsk;
		p_runtsk->winfo_obj.pdq.data = data;
		p_runtsk->winfo_obj.pdq.datapri = datapri;
		p_runtsk->tstat = (TS_WAITING | TS_WAIT_SPDQ);
		wobj_make_wait_tmout((WOBJCB *) p_pdqcb, tmout, p_runtsk);
		release_nested_tsk_lock(my_p_pcb);
		release_obj_lock(&GET_OBJLOCK(p_pdqcb));
		dispatch();
		ercd = p_runtsk->wercd;
	}
	t_unlock_cpu();

  error_exit:
	LOG_TSND_PDQ_LEAVE(ercd);
	return(ercd);
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.2. マクロを展開したAPIと呼び出す内部関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[A] tsnd_pdq
00 : ER
01 : tsnd_pdq(ID pdqid, intptr_t data, PRI datapri, TMO tmout)
02 : {
03 : 	PDQCB	*p_pdqcb;
04 : 	bool_t	dspreq = false;
05 : 	ER		ercd;
06 : 	TCB		*p_tcb;
07 : 	PCB		*my_p_pcb;
08 : 	PCB		*p_pcb;
09 : 	TCB		*p_runtsk;
10 : 
11 : 	if (!sense_tskctx_unl()) {
12 : 		ercd = E_CTX;
13 : 		goto error_exit;
14 : 	}
15 : 	if (!(TMIN_PDQID <= (pdqid) && (pdqid) <= tmax_pdqid)) {
16:			ercd = E_ID;
17 : 		goto error_exit;
18 : 	}
19 : 	if (!(TMO_FEVR <= (tmout))) {
20 : 		ercd = E_PAR;
21 : 		goto error_exit;
22 : 	}
23 : 	p_pdqcb = p_pdqcb_table[(uint_t)((pdqid) - TMIN_PDQID)];
24 : 	if (!(TMIN_DPRI <= datapri && datapri <= p_pdqcb->p_pdqinib->maxdpri)) {
25 : 		ercd = E_PAR;
26 : 		goto error_exit;
27 : 	}
28 : 
29 : 	t_lock_cpu();
30 : 	my_p_pcb = get_my_p_pcb();
31 : 	if (!(p_pcb->dspflg)) {
32 : 		ercd = E_CTX;
33 : 		t_unlock_cpu();
34 : 		goto error_exit;
35 : 	}
36 :   retry:
37 : 	t_acquire_obj_lock(&GET_OBJLOCK(p_pdqcb));
38 : 	if (!queue_empty(&(p_pdqcb->rwait_queue))) {
39 : 		p_tcb = (TCB *)(p_pdqcb->rwait_queue.p_next);
40 : 		if ((p_pcb = t_acquire_nested_tsk_lock(p_tcb, &GET_OBJLOCK(p_pdqcb))) == NULL){
41 : 			goto retry;
42 : 		}
43 : 		queue_delete((QUEUE *) p_tcb);
44 : 		p_tcb->winfo_obj.pdq.data = data;
45 : 		p_tcb->winfo_obj.pdq.datapri = datapri;
46 : 		if (wait_complete(p_tcb)) {
47 : 			dspreq = dispatch_request(p_pcb);
48 : 		}
49 : 		release_nested_tsk_lock(p_pcb);
50 : 		release_obj_lock(&GET_OBJLOCK(p_pdqcb));
51 : 		if (dspreq) {
52 : 			dispatch();
53 : 		}
54 : 		ercd = E_OK;
55 : 	}
56 : 	else if (p_pdqcb->count < p_pdqcb->p_pdqinib->pdqcnt) {
57 : 		enqueue_pridata(p_pdqcb, data, datapri);
58 : 		release_obj_lock(&GET_OBJLOCK(p_pdqcb));
59 : 		ercd = E_OK;
60 : 	}
61 : 	else if (tmout == TMO_POL) {
62 : 		release_obj_lock(&GET_OBJLOCK(p_pdqcb));
63 : 		ercd = E_TMOUT;
64 : 	}
65 : 	else {
66 : 		if ((my_p_pcb = t_acquire_nested_tsk_lock_self(&GET_OBJLOCK(p_pdqcb))) == NULL) {
67 : 			goto retry;
68 : 		}
69 : 		p_runtsk = my_p_pcb->p_runtsk;
70 : 		p_runtsk->winfo_obj.pdq.data = data;
71 : 		p_runtsk->winfo_obj.pdq.datapri = datapri;
72 : 		p_runtsk->tstat = (TS_WAITING | TS_WAIT_SPDQ);
73 : 		wobj_make_wait_tmout((WOBJCB *) p_pdqcb, tmout, p_runtsk);
74 : 		release_nested_tsk_lock(my_p_pcb);
75 : 		release_obj_lock(&GET_OBJLOCK(p_pdqcb));
76 : 		dispatch();
77 : 		ercd = p_runtsk->wercd;
78 : 	}
79 : 	t_unlock_cpu();
80 : 
81 :   error_exit:
82 : 	LOG_TSND_PDQ_LEAVE(ercd);
83 : 	return(ercd);
84 : }


[B] wobj_make_wait_tmout

00 : void
01 : wobj_make_wait_tmout(WOBJCB *p_wobjcb, TMO tmout, TCB *p_runtsk)
02 : {
03 : 	make_wait_tmout(tmout, p_runtsk->p_pcb);
04 : 	wobj_queue_insert(p_wobjcb, p_runtsk);
05 : 	p_runtsk->p_wobjcb = p_wobjcb;
06 : }


[C] make_wait_tmout

00 : void
01 : make_wait_tmout(TMO tmout, PCB *p_pcb)
02 : {
03 : 	TCB *p_runtsk = p_pcb->p_runtsk;
04 : 
05 : 	(void) make_non_runnable(p_runtsk);
06 : 	if (tmout > 0) {
07 : 		tmevtb_enqueue(p_pcb->p_tevtcb, &(p_runtsk->tmevtb), (RELTIM) tmout,
08 : 						(CBACK) wait_tmout, (void *) p_runtsk);
09 : 	}
10 : 	else {
11 : 		assert(tmout == TMO_FEVR);
12 : 		(p_runtsk->tmevtb).callback = NULL;
13 : 	}
14 : }


[D] wait_tmout

00 : void
01 : wait_tmout(TCB *p_tcb)
02 : {
03 : 	PCB		*my_p_pcb;
04 : 
05 : #if TTYPE_KLOCK == G_KLOCK
06 : 	/*
07 : 	 *  ジャイアントロックの場合は単にwaitキューから削除するだけ
08 : 	 */
09 : 	wait_dequeue_wobj(p_tcb);
10 : #else /* TTYPE_KLOCK != G_KLOCK */
11 : 	/*
12 : 	 *  その他のロック方式
13 : 	 *
14 : 	 *  オブジェクロックを取得する場合は，デッドロック回避を行う
15 : 	 */
16 : 	if (((p_tcb->tstat) & TS_WAIT_MASK) >= TS_WAIT_RDTQ) {
17 : 		/* オブジェクト待ちの場合 */
18 : 		WOBJCB* volatile p_wobjcb = p_tcb->p_wobjcb;
19 : 		p_tcb->pend_relwai = true;
20 : 		release_tsk_lock(p_tcb->p_pcb);
21 : 
22 : 		/*
23 : 		 * あらためて
24 : 		 * オブジェクトロック -> タスクロックの順でロックを取得
25 : 		 */
26 : 	  retry:
27 : 		i_acquire_obj_lock(&GET_OBJLOCK(p_wobjcb));
28 : 		if (i_acquire_nested_tsk_lock(p_tcb, &GET_OBJLOCK(p_wobjcb)) == NULL){
29 : 			goto retry;
30 : 		}
31 : 
32 : 		/* タスクの状態が変化していないかチェック */
33 : 		if (!(p_tcb->pend_relwai)) {
34 : 			/* 既に他の箇所で待ち解除処理がなされた */
35 : 			release_obj_lock(&GET_OBJLOCK(p_wobjcb));
36 : 			return;
37 : 		}
38 : 		p_tcb->pend_relwai = false;
39 : 		wait_dequeue_wobj(p_tcb);
40 : 		release_obj_lock(&GET_OBJLOCK(p_wobjcb));
41 : 	}
42 : #endif /* TTYPE_KLOCK != G_KLOCK */
43 : 
44 : 	p_tcb->wercd = E_TMOUT;
45 : 	if (make_non_wait(p_tcb)) {
46 : 		if (dispatch_request(p_tcb->p_pcb)) {
47 : 			p_tcb->p_pcb->reqflg = true;
48 : 		}
49 : 	}
50 : 
51 : 	/*
52 : 	 *  ここで優先度の高い割込みを受け付ける．
53 : 	 */
54 : 	my_p_pcb = get_my_p_pcb();
55 : 	release_tsk_lock(my_p_pcb);
56 : 	i_unlock_cpu();
57 : 	i_lock_cpu();
58 : 	i_acquire_tsk_lock_self();
59 : }


[E] wait_dequeue_wobj

00 : Inline void
01 : wait_dequeue_wobj(TCB *p_tcb)
02 : {
03 : 	if (((p_tcb->tstat) & TS_WAIT_MASK) >= TS_WAIT_RDTQ) {
04 : 		queue_delete(&(p_tcb->task_queue));
05 : 	}
06 : }

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.3. 条件式
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(A1)  11 : !sense_tskctx_unl()
(A2)  15 : TMIN_PDQID <= (pdqid)
(A3)  15 : (pdqid) <= tmax_pdqid
(A4)  19 : !(TMO_FEVR <= (tmout))
(A5)  24 : TMIN_DPRI <= datapri
(A6)  24 : datapri <= p_pdqcb->p_pdqinib->maxdpri
(A7)  31 : !(p_pcb->dspflg)
(A8)  38 : !queue_empty(&(p_pdqcb->rwait_queue))
(A9)  46 : wait_complete(p_tcb)
(A10) 51 : dspreq
(A11) 56 : p_pdqcb->count < p_pdqcb->p_pdqinib->pdqcnt
(A12) 61 : tmout == TMO_POL

(C1)  05 : tmout > 0

(D1)  16 : ((p_tcb->tstat) & TS_WAIT_MASK) >= TS_WAIT_RDTQ
(D2)  33 : !(p_tcb->pend_relwai)
(D3)  45 : make_non_wait(p_tcb)
(D4)  46 : dispatch_request(p_tcb->p_pcb)

(E1)  03 : ((p_tcb->tstat) & TS_WAIT_MASK) >= TS_WAIT_RDTQ

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.4. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

           (A1) (A2) (A3) (A4) (A5) (A6) (A7) (A8) (A9) (A10) (A11) (A12) (C1) (D1) (D2) (D3) (D4) (E1)
(a-1)       T    D    D    D    D    D    D    D    D    D     D     D     D    D    D    D    D    D
(a-2)       T    D    D    D    D    D    D    D    D    D     D     D     D    D    D    D    D    D
(a-3)       F    T    T    F    T    T    T    D    D    D     D     D     D    D    D    D    D    D
(a-4)       F    T    T    F    T    T    T    D    D    D     D     D     D    D    D    D    D    D
(b-1)       F    F   D/T   D    D    D    D    D    D    D     D     D     D    D    D    D    D    D
(b-2)       F    T    F    D    D    D    D    D    D    D     D     D     D    D    D    D    D    D
(c-1)       F    T    T    F    F   D/T   D    D    D    D     D     D     D    D    D    D    D    D
(c-2)       F    T    T    F    T    F    D    D    D    D     D     D     D    D    D    D    D    D
(d)         F    T    T    T    D    D    D    D    D    D     D     D     D    D    D    D    D    D
(e)         F    T    T    F    T    T    F    F    D    D     F     F     T    D    D    D    D    D
(f)         F    T    T    F    T    T    F    F    D    D     F     F     T    D    D    D    D    D
(g)         F    T    T    F    T    T    F    F    D    D     F     F     T    D    D    D    D    D
(h-1)       F    T    T    F    T    T    F    F    D    D     T     D     D    D    D    D    D    D
(h-2)       F    T    T    F    T    T    F    F    D    D     F     T     D    D    D    D    D    D
(i-1)       F    T    T    F    T    T    F    F    D    D     T     D     D    D    D    D    D    D
(i-2)       F    T    T    F    T    T    F    F    D    D     F     F     F    D    D    D    D    D
(j-1-1-1)   F    T    T    F    T    T    F    T    T    T     D     D     D    D    D    D    D    D
(j-1-1-2)   F    T    T    F    T    T    F    T    F    F     D     D     D    D    D    D    D    D
(j-1-1-3)   F    T    T    F    T    T    F    T    F    F     D     D     D    D    D    D    D    D
(j-1-1-4)   F    T    T    F    T    T    F    T    F    F     D     D     D    D    D    D    D    D
(j-1-2-1)   F    T    T    F    T    T    F    T    T    T     D     D     D    D    D    D    D    D
(j-1-2-2)   F    T    T    F    T    T    F    T    F    F     D     D     D    D    D    D    D    D
(j-1-2-3)   F    T    T    F    T    T    F    T    F    F     D     D     D    D    D    D    D    D
(j-1-2-4)   F    T    T    F    T    T    F    T    F    F     D     D     D    D    D    D    D    D
(j-2-1-1-1) F    T    T    F    T    T    F    F    D    D     F     F     T    D    D    D    D    D
(j-2-1-1-2) F    T    T    F    T    T    F    F    D    D     F     F     T    D    D    D    D    D
(j-2-1-1-3) F    T    T    F    T    T    F    F    D    D     F     F     T    D    D    D    D    D
(j-2-1-1-4) F    T    T    F    T    T    F    F    D    D     F     F     T    D    D    D    D    D
(j-2-1-2-1) F    T    T    F    T    T    F    F    D    D     F     F     T    D    D    D    D    D
(j-2-1-2-2) F    T    T    F    T    T    F    F    D    D     F     F     T    D    D    D    D    D
(j-2-1-2-3) F    T    T    F    T    T    F    F    D    D     F     F     T    D    D    D    D    D
(j-2-1-2-4) F    T    T    F    T    T    F    F    D    D     F     F     T    D    D    D    D    D
(j-2-2-1)   F    T    T    F    T    T    F    F    D    D     T     D     D    D    D    D    D    D
(j-2-2-2)   F    T    T    F    T    T    F    F    D    D     T     D     D    D    D    D    D    D
(j-2-2-3)   F    T    T    F    T    T    F    F    D    D     T     D     D    D    D    D    D    D
(j-2-2-4)   F    T    T    F    T    T    F    F    D    D     T     D     D    D    D    D    D    D
(j-3)       F    T    T    F    T    T    F    F    D    D     F     F     T    T    F    T    T    T
(W_a)       F    T    T    F    T    T    F    F    D    D     F     F     T    T    F    F    D    T
(F-a)       T    D    D    D    D    D    D    D    D    D     D     D     D    D    D    D    D    D
(F-b)       F    T    T    F    T    T    F    F    D    D     F     F     T    D    D    D    D    D
(F-c)       F    T    T    F    T    T    F    F    D    D     F     F     T    D    D    D    D    D
(F-d)       F    T    T    F    T    T    F    F    D    D     F     F     T    D    D    D    D    D
(F-e-1-1-1) F    T    T    F    T    T    F    T    T    F     D     D     D    D    D    D    D    D
(F-e-1-1-2) F    T    T    F    T    T    F    T    F    F     D     D     D    D    D    D    D    D
(F-e-1-1-3) F    T    T    F    T    T    F    T    F    F     D     D     D    D    D    D    D    D
(F-e-1-1-4) F    T    T    F    T    T    F    T    T    F     D     D     D    D    D    D    D    D
(F-e-1-1-5) F    T    T    F    T    T    F    T    T    F     D     D     D    D    D    D    D    D
(F-e-1-1-6) F    T    T    F    T    T    F    T    T    F     D     D     D    D    D    D    D    D
(F-e-1-2)   F    T    T    F    T    T    F    T    F    F     D     D     D    D    D    D    D    D
(F-e-1-3)   F    T    T    F    T    T    F    T    F    F     D     D     D    D    D    D    D    D
(F-e-1-4)   F    T    T    F    T    T    F    T    F    F     D     D     D    D    D    D    D    D
(F-e-1-5-1) F    T    T    F    T    T    F    T    T    F     D     D     D    D    D    D    D    D
(F-e-1-5-2) F    T    T    F    T    T    F    T    T    F     D     D     D    D    D    D    D    D
(F-e-1-5-3) F    T    T    F    T    T    F    T    F    F     D     D     D    D    D    D    D    D
(F-e-2-1-1) F    T    T    F    T    T    F    T    T    F     D     D     D    D    D    D    D    D
(F-e-2-1-2) F    T    T    F    T    T    F    T    F    F     D     D     D    D    D    D    D    D
(F-e-2-1-3) F    T    T    F    T    T    F    T    F    F     D     D     D    D    D    D    D    D
(F-e-2-1-4) F    T    T    F    T    T    F    T    T    F     D     D     D    D    D    D    D    D
(F-e-2-1-5) F    T    T    F    T    T    F    T    T    F     D     D     D    D    D    D    D    D
(F-e-2-1-6) F    T    T    F    T    T    F    T    T    F     D     D     D    D    D    D    D    D
(F-e-2-2)   F    T    T    F    T    T    F    T    F    F     D     D     D    D    D    D    D    D
(F-e-2-3)   F    T    T    F    T    T    F    T    F    F     D     D     D    D    D    D    D    D
(F-e-2-4)   F    T    T    F    T    T    F    T    F    F     D     D     D    D    D    D    D    D
(F-e-2-5-1) F    T    T    F    T    T    F    T    T    F     D     D     D    D    D    D    D    D
(F-e-2-5-2) F    T    T    F    T    T    F    T    T    F     D     D     D    D    D    D    D    D
(F-e-2-5-3) F    T    T    F    T    T    F    T    F    F     D     D     D    D    D    D    D    D
(F-f-1-1)   F    T    T    F    T    T    F    F    D    D     F     F     T    D    D    D    D    D
(F-f-1-2)   F    T    T    F    T    T    F    F    D    D     F     F     T    D    D    D    D    D
(F-f-1-3)   F    T    T    F    T    T    F    F    D    D     F     F     T    D    D    D    D    D
(F-f-2-1)   F    T    T    F    T    T    F    F    D    D     F     F     T    D    D    D    D    D
(F-f-2-2)   F    T    T    F    T    T    F    F    D    D     F     F     T    D    D    D    D    D
(F-f-2-3)   F    T    T    F    T    T    F    F    D    D     F     F     T    D    D    D    D    D
-------------------------------------------------------------------------------------------------------
網羅        O    O    O    O    O    O    O    O    O    O     O     O     O    X    X    O    X    X

【備考】
・(D1)，(D2)はジャイアントロック方式ではない場合に実行されるので，ジャイ
  アントロック方式ではない場合の条件を記述した．
  ・(D1)は，本来tslp_tsk()側でホワイトボックステストを実施するべきだが，
    条件網羅表の管理を容易にするために，こちらで実施する．
  ・(D2)を網羅させるためにはタイミングに依存するテストをする必要がある
    ため網羅できない．
・ロック方式の違いによる(E1)の条件判別の差異はないため，まとめて記載す
  る．
・(D1)(D4)(E1)の網羅をさせるために，以下にホワイトボックステストを実施
  する．

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

3. ホワイトボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
3.1. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

(TTYPE_KLOCK == G_KLOCK)
           (A1) (A2) (A3) (A4) (A5) (A6) (A7) (A8) (A9) (A10) (A11) (A12) (C1) (D1) (D2) (D3) (D4) (E1)
(W_F-a)     D    D    D    D    D    D    D    D    D    D     D     D     D    D    D    T    T    F
(W_F-b)     F    T    T    F    T    T    F    F    D    D     F     F     T    D    D    T    F    T
-------------------------------------------------------------------------------------------------------
網羅        O    O    O    O    O    O    O    O    O    O     O     O     O    X    X    O    O    O

(TTYPE_KLOCK != G_KLOCK)
           (A1) (A2) (A3) (A4) (A5) (A6) (A7) (A8) (A9) (A10) (A11) (A12) (C1) (D1) (D2) (D3) (D4) (E1)
(W_F-a)     D    D    D    D    D    D    D    D    D    D     D     D     D    F    D    T    T    D
-------------------------------------------------------------------------------------------------------
網羅        O    O    O    O    O    O    O    O    O    O     O     O     O    O    X    O    O    O

【備考】
・(W_F-b)の(D4)がFになるのは，グローバルタイマ方式であり，かつ，システ
  ム時刻管理プロセッサとタイムアウトを起こすタスクの割付けプロセッサが
  異なる場合である．


以上．

