
	ref_pdq テストシート

----------------------------------------------------------------------
 TTSP
     TOPPERS Test Suite Package

 Copyright (C) 2009-2011 by Center for Embedded Computing Systems
             Graduate School of Information Science, Nagoya Univ., JAPAN
 Copyright (C) 2009-2011 by Digital Craft Inc.
 Copyright (C) 2009-2011 by NEC Communication Systems, Ltd.
 Copyright (C) 2009-2011 by FUJISOFT INCORPORATED
 Copyright (C) 2009-2010 by Mitsuhiro Matsuura

 上記著作権者は，以下の (1)〜(3) の条件を満たす場合に限り，本ドキュメ
 ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
     および下記の無保証規定が，そのままの形でドキュメント中に含まれて
     いること．
 (2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
     を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
     ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
     りではない．
 (3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
     からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
     本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
     く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

 本ドキュメントは，無保証で提供されているものである．上記著作権者およ
 びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
 る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
 により直接的または間接的に生じたいかなる損害に関しても，その責任を負
 わない．

 $Id: ref_pdq.txt 2 2012-05-09 02:23:52Z nces-shigihara $
----------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

0. API仕様

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

ref_pdq		優先度データキューの状態参照〔T〕

【C言語API】
	ER ercd = ref_pdq(ID pdqid, T_RPDQ *pk_rpdq)

【パラメータ】
	ID			pdqid		対象優先度データキューのID番号
	T_RPDQ *	pk_rpdq		優先度データキューの現在状態を入れるパケッ
							トへのポインタ

【リターンパラメータ】
	ER			ercd		正常終了（E_OK）またはエラーコード

　＊優先度データキューの現在状態（パケットの内容）
	ID			stskid		優先度データキューの送信待ち行列の先頭のタ
							スクのID番号
	ID			rtskid		優先度データキューの受信待ち行列の先頭のタ
							スクのID番号
	uint_t		spdqcnt		優先度データキュー管理領域に格納されている
							データの数

【エラーコード】
	E_CTX			コンテキストエラー（非タスクコンテキストからの呼出
					し，CPUロック状態からの呼出し）
	E_ID			不正ID番号（pdqidが不正）
	E_NOEXS〔D〕	オブジェクト未登録（対象優先度データキューが未登録）
	E_OACV〔P〕		オブジェクトアクセス違反（対象優先度データキューに
					対する参照操作が許可されていない）
	E_MACV〔P〕		メモリアクセス違反（pk_rpdqが指すメモリ領域への書込
					みアクセスが許可されていない）

【機能】

pdqidで指定した優先度データキュー（対象優先度データキュー）の現在状態を
参照する．参照した現在状態は，pk_rpdqで指定したパケットに返される．

対象優先度データキューの送信待ち行列にタスクが存在しない場合，stskidに
はTSK_NONE（＝0）が返る．また，受信待ち行列にタスクが存在しない場合，
rtskidにはTSK_NONE（＝0）が返る．

【使用上の注意】

ref_pdqはデバッグ時向けの機能であり，その他の目的に使用することは推奨し
ない．これは，ref_pdqを呼び出し，対象優先度データキューの現在状態を参照
した直後に割込みが発生した場合，ref_pdqから戻ってきた時には対象優先度デー
タキューの状態が変化している可能性があるためである．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

１．仕様ベースのブラックボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.1. エラー条件のテストケース(FMP)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(F-a) ディスパッチ保留状態のスピンロック取得中から呼び出して，E_CTX
      エラーが返ること．(ASP:a，EX_NEW_STATE)

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.2. 正常条件のテストケース(FMP)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(F-b) 対象優先度データキューの現在状態がpk_rpdqで指定したパケットに格
      納されE_OKが返る．

      (F-b-1) 対象優先度データキューの送信待ち行列に他プロセッサに割り
              つけられたタスクが存在する場合，stskidにデータキューの送
              信待ち行列の先頭のタスクのID番号が返る．
              rtskidにはTSK_NONE(=0)が返る．(ASP:c-1，EX_OTHER_PRC)

      (F-b-2) 対象優先度データキューの受信待ち行列に他プロセッサに割り
              つけられたタスクが存在する場合，rtskidにデータキューの受
              信待ち行列の先頭のタスクのID番号が返る．
              stskidにはTSK_NONE(=0)が返る．(ASP:c-2，EX_OTHER_PRC)



■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

2. ソースコードの条件網羅確認

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.1. ソースコード
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

ER
ref_pdq(ID pdqid, T_RPDQ *pk_rpdq)
{
	PDQCB	*p_pdqcb;
	ER		ercd;

	LOG_REF_PDQ_ENTER(pdqid, pk_rpdq);
	CHECK_TSKCTX_UNL();
	CHECK_PDQID(pdqid);
	p_pdqcb = get_pdqcb(pdqid);

	t_lock_cpu();
	t_acquire_obj_lock(&GET_OBJLOCK(p_pdqcb));
	pk_rpdq->stskid = wait_tskid(&(p_pdqcb->swait_queue));
	pk_rpdq->rtskid = wait_tskid(&(p_pdqcb->rwait_queue));
	pk_rpdq->spdqcnt = p_pdqcb->count;
	ercd = E_OK;
	release_obj_lock(&GET_OBJLOCK(p_pdqcb));
	t_unlock_cpu();

  error_exit:
	LOG_REF_PDQ_LEAVE(ercd, pk_rpdq);
	return(ercd);
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.2. マクロを展開したAPIと呼び出す内部関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[A] ref_pdq

00 : ER
01 : ref_pdq(ID pdqid, T_RPDQ *pk_rpdq)
02 : {
03 : 	PDQCB	*p_pdqcb;
04 : 	ER		ercd;
05 : 
06 : 	if (!sense_tskctx_unl()) {
07 : 		ercd = E_CTX;
08 : 		goto error_exit;
09 : 	}
10 : 	if (!(TMIN_PDQID <= (pdqid) && (pdqid) <= tmax_pdqid)) {
11 :			ercd = E_ID;
12 : 		goto error_exit;
13 : 	}
14 : 	p_pdqcb = p_pdqcb_table[(uint_t)((pdqid) - TMIN_PDQID)];
15 : 
16 : 	t_lock_cpu();
17 : 	t_acquire_obj_lock(&GET_OBJLOCK(p_pdqcb));
18 : 	pk_rpdq->stskid = wait_tskid(&(p_pdqcb->swait_queue));
19 : 	pk_rpdq->rtskid = wait_tskid(&(p_pdqcb->rwait_queue));
20 : 	pk_rpdq->spdqcnt = p_pdqcb->count;
21 : 	ercd = E_OK;
22 : 	release_obj_lock(&GET_OBJLOCK(p_pdqcb));
23 : 	t_unlock_cpu();
24 : 
25 :   error_exit:
26 : 	return(ercd);
27 : }

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.3. 条件式
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(A1) 06 : !sense_tskctx_unl()
(A2) 10 : TMIN_PDQID <= (pdqid)
(A3) 10 : (pdqid) <= tmax_pdqid

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.4. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

         (A1) (A2) (A3)
(a-1)     T    D    D
(a-2)     T    D    D
(b-1)     F    F   D/T
(b-2)     F    T    F
(c-1)     F    T    T
(c-2)     F    T    T
(F-a)     T    D    D
(F-b-1)   F    T    T
(F-b-2)   F    T    T
-----------------------
網羅      O    O    O


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

3. ホワイトボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
必要なし．


以上．

