
	snd_pdq テストシート

----------------------------------------------------------------------
 TTSP
     TOPPERS Test Suite Package

 Copyright (C) 2009-2011 by Center for Embedded Computing Systems
             Graduate School of Information Science, Nagoya Univ., JAPAN
 Copyright (C) 2009-2011 by Digital Craft Inc.
 Copyright (C) 2009-2011 by NEC Communication Systems, Ltd.
 Copyright (C) 2009-2011 by FUJISOFT INCORPORATED
 Copyright (C) 2009-2010 by Mitsuhiro Matsuura

 上記著作権者は，以下の (1)〜(3) の条件を満たす場合に限り，本ドキュメ
 ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
     および下記の無保証規定が，そのままの形でドキュメント中に含まれて
     いること．
 (2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
     を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
     ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
     りではない．
 (3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
     からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
     本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
     く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

 本ドキュメントは，無保証で提供されているものである．上記著作権者およ
 びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
 る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
 により直接的または間接的に生じたいかなる損害に関しても，その責任を負
 わない．

 $Id: snd_pdq.txt 2 2012-05-09 02:23:52Z nces-shigihara $
----------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

0. API仕様

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

snd_pdq		優先度データキューへの送信〔T〕
psnd_pdq	優先度データキューへの送信（ポーリング）〔T〕
ipsnd_pdq	優先度データキューへの送信（ポーリング）〔I〕
tsnd_pdq	優先度データキューへの送信（タイムアウト付き）〔T〕

【C言語API】
	ER ercd = snd_pdq(ID pdqid, intptr_t data, PRI datapri)
	ER ercd = psnd_pdq(ID pdqid, intptr_t data, PRI datapri)
	ER ercd = ipsnd_pdq(ID pdqid, intptr_t data, PRI datapri)
	ER ercd = tsnd_pdq(ID pdqid, intptr_t data, PRI datapri, TMO tmout)

【パラメータ】
	ID			pdqid		対象優先度データキューのID番号
	intptr_t	data		送信データ
	PRI			datapri		送信データの優先度
	TMO			tmout		タイムアウト時間（tsnd_pdqの場合）

【リターンパラメータ】
	ER			ercd		正常終了（E_OK）またはエラーコード

【エラーコード】
	E_CTX			コンテキストエラー（非タスクコンテキストからの呼出
					し：ipsnd_pdqを除く，タスクコンテキストからの呼出し：
					ipsnd_pdqの場合，CPUロック状態からの呼出し，ディス
					パッチ保留状態からの呼出し：snd_pdqとtsnd_pdqの場合）
	E_NOSPT			未サポート機能（制約タスクからの呼出し：snd_pdqと
					tsnd_pdqの場合）
	E_ID			不正ID番号（pdqidが不正）
	E_PAR			パラメータエラー（datapriが不正，tmoutが不正：
					tsnd_pdqのみ）
	E_NOEXS〔D〕	オブジェクト未登録（対象優先度データキューが未登録）
	E_OACV〔P〕		オブジェクトアクセス違反（対象優先度データキューに
					対する通常操作1が許可されていない：ipsnd_pdqを除く）
	E_TMOUT			ポーリング失敗またはタイムアウト（snd_pdqを除く）
	E_RLWAI			待ち禁止状態または待ち状態の強制解除（snd_pdqと
					tsnd_pdqの場合）
	E_DLT			待ちオブジェクトの削除または再初期化（snd_pdqと
					tsnd_pdqの場合）

【機能】

pdqidで指定した優先度データキュー（対象優先度データキュー）に，dataで指
定したデータを，datapriで指定した優先度で送信する．具体的な振舞いは以下
の通り．

対象優先度データキューの受信待ち行列にタスクが存在する場合には，受信待
ち行列の先頭のタスクが，dataで指定したデータを受信し，待ち解除される．
待ち解除されたタスクには，待ち状態となったサービスコールからE_OKが返る．

対象優先度データキューの受信待ち行列にタスクが存在せず，優先度データ
キュー管理領域にデータを格納するスペースがある場合には，dataで指定した
データが，datapriで指定したデータの優先度順で優先度データキュー管理領域
に格納される．

対象優先度データキューの受信待ち行列にタスクが存在せず，優先度データ
キュー管理領域にデータを格納するスペースがない場合には，自タスクは優先
度データキューへの送信待ち状態となり，対象優先度データキューの送信待ち
行列につながれる．

datapriは，TMIN_DPRI以上で，対象データキューに送信できるデータ優先度の
最大値以下でなければならない．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

1. 仕様ベースのブラックボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.1. エラー条件のテストケース(FMP)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.2. 正常条件のテストケース(FMP)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

2. ソースコードの条件網羅確認

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.1. ソースコード
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ER
snd_pdq(ID pdqid, intptr_t data, PRI datapri)
{
	PDQCB	*p_pdqcb;
	bool_t	dspreq = false;
	ER		ercd;
	TCB		*p_tcb;
	PCB		*my_p_pcb;
	PCB		*p_pcb;
	TCB		*p_runtsk;

	LOG_SND_PDQ_ENTER(pdqid, data, datapri);
	CHECK_TSKCTX_UNL();
	CHECK_PDQID(pdqid);
	p_pdqcb = get_pdqcb(pdqid);
	CHECK_PAR(TMIN_DPRI <= datapri && datapri <= p_pdqcb->p_pdqinib->maxdpri);

	t_lock_cpu();
	my_p_pcb = get_my_p_pcb();
	T_CHECK_DISPATCH(my_p_pcb);

  retry:
	t_acquire_obj_lock(&GET_OBJLOCK(p_pdqcb));
	if (!queue_empty(&(p_pdqcb->rwait_queue))) {
		p_tcb = (TCB *)(p_pdqcb->rwait_queue.p_next);
		if ((p_pcb = t_acquire_nested_tsk_lock(p_tcb, &GET_OBJLOCK(p_pdqcb))) == NULL){
			goto retry;
		}
		queue_delete((QUEUE *) p_tcb);
		p_tcb->winfo_obj.pdq.data = data;
		p_tcb->winfo_obj.pdq.datapri = datapri;
		if (wait_complete(p_tcb)) {
			dspreq = dispatch_request(p_pcb);
		}
		release_nested_tsk_lock(p_pcb);
		release_obj_lock(&GET_OBJLOCK(p_pdqcb));
		if (dspreq) {
			dispatch();
		}
		ercd = E_OK;
	}
	else if (p_pdqcb->count < p_pdqcb->p_pdqinib->pdqcnt) {
		enqueue_pridata(p_pdqcb, data, datapri);
		release_obj_lock(&GET_OBJLOCK(p_pdqcb));
		ercd = E_OK;
	}
	else {
		if ((my_p_pcb = t_acquire_nested_tsk_lock_self(&GET_OBJLOCK(p_pdqcb))) == NULL) {
			goto retry;
		}
		p_runtsk = my_p_pcb->p_runtsk;
		p_runtsk->winfo_obj.pdq.data = data;
		p_runtsk->winfo_obj.pdq.datapri = datapri;
		p_runtsk->tstat = (TS_WAITING | TS_WAIT_SPDQ);
		wobj_make_wait((WOBJCB *) p_pdqcb, p_runtsk);
		release_nested_tsk_lock(my_p_pcb);
		release_obj_lock(&GET_OBJLOCK(p_pdqcb));
		dispatch();
		ercd = p_runtsk->wercd;
	}
	t_unlock_cpu();

  error_exit:
	LOG_SND_PDQ_LEAVE(ercd);
	return(ercd);
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.2. マクロを展開したAPIと呼び出す内部関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[A] snd_pdq

00 : ER
01 : snd_pdq(ID pdqid, intptr_t data, PRI datapri)
02 : {
03 : 	PDQCB	*p_pdqcb;
04 : 	bool_t	dspreq = false;
05 : 	ER		ercd;
06 : 	TCB		*p_tcb;
07 : 	PCB		*my_p_pcb;
08 : 	PCB		*p_pcb;
09 : 	TCB		*p_runtsk;
10 : 
11 : 	if (!sense_tskctx_unl()) {
12 : 		ercd = E_CTX;
13 : 		goto error_exit;
14 : 	}
15 : 	if (!(TMIN_PDQID <= (pdqid) && (pdqid) <= tmax_pdqid)) {
16 :			ercd = E_ID;
17 : 		goto error_exit;
18 : 	}
19 : 	p_pdqcb = p_pdqcb_table[(uint_t)((pdqid) - TMIN_PDQID)];
20 : 	if (!(TMIN_DPRI <= datapri && datapri <= p_pdqcb->p_pdqinib->maxdpri)) {
21 : 		ercd = E_PAR;
22 : 		goto error_exit;
23 : 	}
24 : 
25 : 	t_lock_cpu();
26 : 	my_p_pcb = get_my_p_pcb();
27 : 	if (!(p_pcb->dspflg)) {
28 : 		ercd = E_CTX;
29 : 		t_unlock_cpu();
30 : 		goto error_exit;
31 : 	}
32 :   retry:
33 : 	t_acquire_obj_lock(&GET_OBJLOCK(p_pdqcb));
34 : 	if (!queue_empty(&(p_pdqcb->rwait_queue))) {
35 : 		p_tcb = (TCB *)(p_pdqcb->rwait_queue.p_next);
36 : 		if ((p_pcb = t_acquire_nested_tsk_lock(p_tcb, &GET_OBJLOCK(p_pdqcb))) == NULL){
37 : 			goto retry;
38 : 		}
39 : 		queue_delete((QUEUE *) p_tcb);
40 : 		p_tcb->winfo_obj.pdq.data = data;
41 : 		p_tcb->winfo_obj.pdq.datapri = datapri;
42 : 		if (wait_complete(p_tcb)) {
43 : 			dspreq = dispatch_request(p_pcb);
44 : 		}
45 : 		release_nested_tsk_lock(p_pcb);
46 : 		release_obj_lock(&GET_OBJLOCK(p_pdqcb));
47 : 		if (dspreq) {
48 : 			dispatch();
49 : 		}
50 : 		ercd = E_OK;
51 : 	}
52 : 	else if (p_pdqcb->count < p_pdqcb->p_pdqinib->pdqcnt) {
53 : 		enqueue_pridata(p_pdqcb, data, datapri);
54 : 		release_obj_lock(&GET_OBJLOCK(p_pdqcb));
55 : 		ercd = E_OK;
56 : 	}
57 : 	else {
58 : 		if ((my_p_pcb = t_acquire_nested_tsk_lock_self(&GET_OBJLOCK(p_pdqcb))) == NULL) {
59 : 			goto retry;
60 : 		}
61 : 		p_runtsk = my_p_pcb->p_runtsk;
62 : 		p_runtsk->winfo_obj.pdq.data = data;
63 : 		p_runtsk->winfo_obj.pdq.datapri = datapri;
64 : 		p_runtsk->tstat = (TS_WAITING | TS_WAIT_SPDQ);
65 : 		wobj_make_wait((WOBJCB *) p_pdqcb, p_runtsk);
66 : 		release_nested_tsk_lock(my_p_pcb);
67 : 		release_obj_lock(&GET_OBJLOCK(p_pdqcb));
68 : 		dispatch();
69 : 		ercd = p_runtsk->wercd;
70 : 	}
71 : 	t_unlock_cpu();
72 : 
73 :   error_exit:
74 : 	return(ercd);
75 : }


[B] wait_complete

00 : bool_t
01 : wait_complete(TCB *p_tcb)
02 : {
03 : 	wait_dequeue_tmevtb(p_tcb);
04 : 	p_tcb->p_winfo->wercd = E_OK;
05 : 	return(make_non_wait(p_tcb));
06 : }


[C] make_non_wait

00 : Inline bool_t
01 : make_non_wait(TCB *p_tcb)
02 : {
03 : 	assert(((p_tcb->tstat) & TS_WAITING) != 0U);
04 : 
05 : #if TTYPE_KLOCK != G_KLOCK
06 : 	/* 優先度変更フラグチェック */
07 : 	if (p_tcb->pend_chgpri) {
08 : 		p_tcb->priority = p_tcb->pend_newpri;
09 : 		/* 優先度変更フラグのクリア */
10 : 		p_tcb->pend_chgpri = false;
11 : 	}
12 : 
13 : 	/* タスク強制待ち解除保留クリア */
14 : 	p_tcb->pend_relwai = false;
15 : #endif /* TTYPE_KLOCK != G_KLOCK */
16 : 
17 : 	if (!((p_tcb->tstat) & TS_SUSPENDED) != 0U) {
18 : 		/*
19 : 		 *  待ち状態から実行できる状態への遷移
20 : 		 */
21 : 		p_tcb->tstat = TS_RUNNABLE;
22 : 		return(make_runnable(p_tcb));
23 : 	}
24 : 	else {
25 : 		/*
26 : 		 *  二重待ち状態から強制待ち状態への遷移
27 : 		 */
28 : 		p_tcb->tstat = TS_SUSPENDED;
29 : 		return(false);
30 : 	}
31 : }


[D] enqueue_pridata

00 : void
01 : enqueue_pridata(PDQCB *p_pdqcb, intptr_t data, PRI datapri)
02 : {
03 : 	PDQMB	*p_pdqmb;
04 : 	PDQMB	**pp_prev_next, *p_next;
05 : 
06 : 	if (p_pdqcb->p_freelist != NULL) {
07 : 		p_pdqmb = p_pdqcb->p_freelist;
08 : 		p_pdqcb->p_freelist = p_pdqmb->p_next;
09 : 	}
10 : 	else {
11 : 		p_pdqmb = p_pdqcb->p_pdqinib->p_pdqmb + p_pdqcb->unused;
12 : 		p_pdqcb->unused++;
13 : 	}
14 : 
15 : 	p_pdqmb->data = data;
16 : 	p_pdqmb->datapri = datapri;
17 : 
18 : 	pp_prev_next = &(p_pdqcb->p_head);
19 : 	while ((p_next = *pp_prev_next) != NULL) {
20 : 		if (p_next->datapri > datapri) {
21 : 			break;
22 : 		}
23 : 		pp_prev_next = &(p_next->p_next);
24 : 	}
25 : 	p_pdqmb->p_next = p_next;
26 : 	*pp_prev_next = p_pdqmb;
27 : 	p_pdqcb->count++;
28 : }


[E] wobj_make_wait

00 : void
01 : wobj_make_wait(WOBJCB *p_wobjcb, TCB *p_runtsk)
02 : {
03 : 	make_wait(p_runtsk);
04 : 	wobj_queue_insert(p_wobjcb, p_runtsk);
05 : 	p_winfo_wobj->p_wobjcb = p_wobjcb;
06 : }


[F] wobj_queue_insert

00 : Inline void
01 : wobj_queue_insert(WOBJCB *p_wobjcb, TCB *p_runtsk)
02 : {
03 :    if ((p_wobjcb->p_wobjinib->wobjatr & TA_TPRI) != 0U) {
04 :        queue_insert_tpri(&(p_wobjcb->wait_queue), p_runtsk);
05 :    }
06 :    else {
07 :        queue_insert_prev(&(p_wobjcb->wait_queue), &(p_runtsk->task_queue));
08 :    }
09 : }


[G] queue_insert_tpri

00 : Inline void
01 : queue_insert_tpri(QUEUE *p_queue, TCB *p_tcb)
02 : {
03 :    QUEUE   *p_entry;
04 :    uint_t  priority = p_tcb->priority;
05 : 
06 :    for (p_entry = p_queue->p_next; p_entry != p_queue;
07 :                                         p_entry = p_entry->p_next) {
08 :        if (priority < ((TCB *) p_entry)->priority) {
09 :           break;
10 :        }
11 :    }
12 :    queue_insert_prev(p_entry, &(p_tcb->task_queue));
13 : }

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.3. 条件式
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(A1) 11 : !sense_tskctx_unl()
(A2) 15 : TMIN_PDQID <= (pdqid)
(A3) 15 : (pdqid) <= tmax_pdqid
(A4) 20 : TMIN_DPRI <= datapri
(A5) 20 : datapri <= p_pdqcb->p_pdqinib->maxdpri
(A6) 27 : !(p_pcb->dspflg)
(A7) 34 : !queue_empty(&(p_pdqcb->rwait_queue))
(A8) 42 : wait_complete(p_tcb)
(A9) 47 : dspreq
(A10)52 : p_pdqcb->count < p_pdqcb->p_pdqinib->pdqcnt

(C1) 07 : p_tcb->pend_chgpri
(C2) 17 : !((p_tcb->tstat) & TS_SUSPENDED) != 0U

(D1) 06 : p_pdqcb->p_freelist != NULL
(D2) 19 : while ((p_next = *pp_prev_next) != NULL)
(D3) 20 : p_next->datapri > datapri

(F1) 03 : (p_wobjcb->p_wobjinib->wobjatr & TA_TPRI) != 0U

(G1) 06 : p_entry != p_queue;
(G2) 08 : priority < ((TCB *) p_entry)->priority

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.4. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

           (A1) (A2) (A3) (A4) (A5) (A6) (A7) (A8) (C1) (C2) (A9) (A10) (D1) (D2) (D3) (F1) (G1) (G2)
(a-1)       T    D    D    D    D    D    D    D    D    D    D    D     D    D    D    D    D    D
(a-2)       T    D    D    D    D    D    D    D    D    D    D    D     D    D    D    D    D    D
(a-3)       F    T    T    T    T    T    D    D    D    D    D    D     D    D    D    D    D    D
(a-4)       F    T    T    T    T    T    D    D    D    D    D    D     D    D    D    D    D    D
(b-1)       F    F   D/T   D    D    D    D    D    D    D    D    D     D    D    D    D    D    D
(b-2)       F    T    F    D    D    D    D    D    D    D    D    D     D    D    D    D    D    D
(c-1)       F    T    T    F   D/T   D    D    D    D    D    D    D     D    D    D    D    D    D
(c-2)       F    T    T    T    F    D    D    D    D    D    D    D     D    D    D    D    D    D
(d)         F    T    T    T    T    F    F    D    D    D    D    F     D    D    D    F    D    D
(e)         F    T    T    T    T    F    F    D    D    D    D    F     D    D    D    F    D    D
(f)         F    T    T    T    T    F    F    D    D    D    D    F     D    D    D    F    D    D
(g-1-1)     F    T    T    T    T    F    T    T    F    T    T    D     D    D    D    D    D    D
(g-1-2)     F    T    T    T    T    F    T    F    F    T    F    D     D    D    D    D    D    D
(g-1-3)     F    T    T    T    T    F    T    F    F    T    F    D     D    D    D    D    D    D
(g-1-4)     F    T    T    T    T    F    T    F    F    F    F    D     D    D    D    D    D    D
(g-2-1)     F    T    T    T    T    F    T    T    F    T    T    D     D    D    D    D    D    D
(g-2-2)     F    T    T    T    T    F    T    F    F    T    F    D     D    D    D    D    D    D
(g-2-3)     F    T    T    T    T    F    T    F    F    T    F    D     D    D    D    D    D    D
(g-2-4)     F    T    T    T    T    F    T    F    F    F    F    D     D    D    D    D    D    D
(h-1-1-1)   F    T    T    T    T    F    F    D    D    D    D    F     D    D    D    F    D    D
(h-1-1-2)   F    T    T    T    T    F    F    D    D    D    D    F     D    D    D    F    D    D
(h-1-1-3)   F    T    T    T    T    F    F    D    D    D    D    F     D    D    D    F    D    D
(h-1-1-4)   F    T    T    T    T    F    F    D    D    D    D    F     D    D    D    F    D    D
(h-1-2-1)   F    T    T    T    T    F    F    D    D    D    D    F     D    D    D    T    F    D
(h-1-2-2)   F    T    T    T    T    F    F    D    D    D    D    F     D    D    D    T    T    T
(h-1-2-3)   F    T    T    T    T    F    F    D    D    D    D    F     D    D    D    T    TT   FT
(h-1-2-4)   F    T    T    T    T    F    F    D    D    D    D    F     D    D    D    T    TTF  FF
(h-2-1)     F    T    T    T    T    F    F    D    D    D    D    T     F    F    D    D    D    D
(h-2-2)     F    T    T    T    T    F    F    D    D    D    D    T     F    T    T    D    D    D
(h-2-3)     F    T    T    T    T    F    F    D    D    D    D    T     F    TT   FT   D    D    D
(h-2-4)     F    T    T    T    T    F    F    D    D    D    D    T     F    TTF  FF   D    D    D
(W_a)       F    T    T    T    T    F    F    D    D    D    D    T     T    T    T    D    D    D
(W_b)       F    T    T    T    T    F    F    D    D    D    D    T     F    TTTF FFF  D    D    D
(W_c)       F    T    T    T    T    F    F    D    D    D    D    F     D    D    D    T    TTTF FFF
(F-a)       T    D    D    D    D    D    D    D    D    D    D    D     D    D    D    D    D    D
(F-b)       F    T    T    T    T    F    F    D    D    D    D    F     D    D    D    F    D    D
(F-c)       F    T    T    T    T    F    F    D    D    D    D    F     D    D    D    F    D    D
(F-d)       F    T    T    T    T    F    F    D    D    D    D    F     D    D    D    F    D    D
(F-e-1-1-1) F    T    T    T    T    F    T    T    F    T    F    D     D    D    D    D    D    D
(F-e-1-1-2) F    T    T    T    T    F    T    F    F    T    F    D     D    D    D    D    D    D
(F-e-1-1-3) F    T    T    T    T    F    T    F    F    T    F    D     D    D    D    D    D    D
(F-e-1-1-4) F    T    T    T    T    F    T    T    F    T    F    D     D    D    D    D    D    D
(F-e-1-1-5) F    T    T    T    T    F    T    T    F    T    F    D     D    D    D    D    D    D
(F-e-1-1-6) F    T    T    T    T    F    T    T    F    T    F    D     D    D    D    D    D    D
(F-e-1-2)   F    T    T    T    T    F    T    F    F    T    F    D     D    D    D    D    D    D
(F-e-1-3)   F    T    T    T    T    F    T    F    F    T    F    D     D    D    D    D    D    D
(F-e-1-4)   F    T    T    T    T    F    T    F    F    F    F    D     D    D    D    D    D    D
(F-e-1-5-1) F    T    T    T    T    F    T    T    F    T    F    D     D    D    D    D    D    D
(F-e-1-5-2) F    T    T    T    T    F    T    T    F    T    F    D     D    D    D    D    D    D
(F-e-1-5-3) F    T    T    T    T    F    T    F    F    F    F    D     D    D    D    D    D    D
(F-e-2-1-1) F    T    T    T    T    F    T    T    F    T    F    D     D    D    D    D    D    D
(F-e-2-1-2) F    T    T    T    T    F    T    F    F    T    F    D     D    D    D    D    D    D
(F-e-2-1-3) F    T    T    T    T    F    T    F    F    T    F    D     D    D    D    D    D    D
(F-e-2-1-4) F    T    T    T    T    F    T    T    F    T    F    D     D    D    D    D    D    D
(F-e-2-1-5) F    T    T    T    T    F    T    T    F    T    F    D     D    D    D    D    D    D
(F-e-2-1-6) F    T    T    T    T    F    T    T    F    T    F    D     D    D    D    D    D    D
(F-e-2-2)   F    T    T    T    T    F    T    F    F    T    F    D     D    D    D    D    D    D
(F-e-2-3)   F    T    T    T    T    F    T    F    F    T    F    D     D    D    D    D    D    D
(F-e-2-4)   F    T    T    T    T    F    T    F    F    F    F    D     D    D    D    D    D    D
(F-e-2-5-1) F    T    T    T    T    F    T    T    F    T    F    D     D    D    D    D    D    D
(F-e-2-5-2) F    T    T    T    T    F    T    T    F    T    F    D     D    D    D    D    D    D
(F-e-2-5-3) F    T    T    T    T    F    T    F    F    F    F    D     D    D    D    D    D    D
(F-f-1-1)   F    T    T    T    T    F    F    D    D    D    D    F     D    D    D    F    D    D
(F-f-1-2)   F    T    T    T    T    F    F    D    D    D    D    F     D    D    D    F    D    D
(F-f-1-3)   F    T    T    T    T    F    F    D    D    D    D    F     D    D    D    F    D    D
(F-f-2-1)   F    T    T    T    T    F    F    D    D    D    D    F     D    D    D    T    T    T
(F-f-2-2)   F    T    T    T    T    F    F    D    D    D    D    F     D    D    D    T    TT   FT
(F-f-2-3)   F    T    T    T    T    F    F    D    D    D    D    F     D    D    D    T    TTF  FF
-----------------------------------------------------------------------------------------------------
網羅        O    O    O    O    O    O    O    O    X    O    O    O     O    O    O    O    O    O

【備考】
・(C1)はジャイアントロック方式ではない場合に実行されるので，ジャイアン
  トロック方式ではない場合の条件を記述した．しかし，(C1)を網羅させるた
  めにはタイミングに依存するテストをする必要があるため網羅できない．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

3. ホワイトボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
必要なし．


以上．
