
	prcv_pdq テストシート

----------------------------------------------------------------------
 TTSP
     TOPPERS Test Suite Package

 Copyright (C) 2009-2011 by Center for Embedded Computing Systems
             Graduate School of Information Science, Nagoya Univ., JAPAN
 Copyright (C) 2009-2011 by Digital Craft Inc.
 Copyright (C) 2009-2011 by NEC Communication Systems, Ltd.
 Copyright (C) 2009-2011 by FUJISOFT INCORPORATED
 Copyright (C) 2009-2010 by Mitsuhiro Matsuura

 上記著作権者は，以下の (1)〜(3) の条件を満たす場合に限り，本ドキュメ
 ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
     および下記の無保証規定が，そのままの形でドキュメント中に含まれて
     いること．
 (2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
     を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
     ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
     りではない．
 (3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
     からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
     本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
     く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

 本ドキュメントは，無保証で提供されているものである．上記著作権者およ
 びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
 る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
 により直接的または間接的に生じたいかなる損害に関しても，その責任を負
 わない．

 $Id: prcv_pdq.txt 2 2012-05-09 02:23:52Z nces-shigihara $
----------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

0. API仕様

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

rcv_pdq		優先度データキューからの受信〔T〕
prcv_pdq	優先度データキューからの受信（ポーリング）〔T〕
trcv_pdq	優先度データキューからの受信（タイムアウト付き）〔T〕

【C言語API】
	ER ercd = rcv_pdq(ID pdqid, intptr_t *p_data, PRI *p_datapri)
	ER ercd = prcv_pdq(ID pdqid, intptr_t *p_data, PRI *p_datapri)
	ER ercd = trcv_pdq(ID pdqid, intptr_t *p_data, PRI *p_datapri, TMO tmout)

【パラメータ】
	ID			pdqid		対象優先度データキューのID番号
	intptr_t *	p_data		受信データを入れるメモリ領域へのポインタ
	PRI *		p_datapri	受信データの優先度を入れるメモリ領域へのポ
							インタ
	TMO			tmout		タイムアウト時間（trcv_pdqの場合）

【リターンパラメータ】
	ER			ercd		正常終了（E_OK）またはエラーコード
	intptr_t	data		受信データ
	PRI			datapri		受信データの優先度

【エラーコード】
	E_CTX			コンテキストエラー（非タスクコンテキストからの呼出
					し，CPUロック状態からの呼出し，ディスパッチ保留状態
					からの呼出し：prcv_pdqを除く）
	E_NOSPT			未サポート機能（制約タスクからの呼出し：prcv_pdqを除
					く）
	E_ID			不正ID番号（pdqidが不正）
	E_PAR			パラメータエラー（tmoutが不正：trcv_pdqの場合）
	E_NOEXS〔D〕	オブジェクト未登録（対象優先度データキューが未登録）
	E_OACV〔P〕		オブジェクトアクセス違反（対象優先度データキューに
					対する通常操作2が許可されていない）
	E_MACV〔P〕		メモリアクセス違反（p_dataまたはp_datapriが指すメモ
					リ領域への書込みアクセスが許可されていない）
	E_TMOUT			ポーリング失敗またはタイムアウト（rcv_pdqを除く）
	E_RLWAI			待ち禁止状態または待ち状態の強制解除（prcv_pdqを除く）
	E_DLT			待ちオブジェクトの削除または再初期化（prcv_pdqを除く）

【機能】

pdqidで指定した優先度データキュー（対象優先度データキュー）からデータを
受信する．受信したデータはp_dataで指定したメモリ領域に，その優先度は
p_datapriで指定したメモリ領域に返される．具体的な振舞いは以下の通り．

対象優先度データキューの優先度データキュー管理領域にデータが格納されて
いる場合には，優先度データキュー管理領域の先頭に格納されたデータが取り
出され，p_dataで指定したメモリ領域に返される．また，その優先度が
p_datapriで指定したメモリ領域に返される．さらに，送信待ち行列にタスクが
存在する場合には，送信待ち行列の先頭のタスクの送信データが，データの優
先度順で優先度データキュー管理領域に格納され，そのタスクは待ち解除され
る．待ち解除されたタスクには，待ち状態となったサービスコールからE_OKが
返る．

対象優先度データキューの優先度データキュー管理領域にデータが格納されて
おらず，送信待ち行列にタスクが存在する場合には，送信待ち行列の先頭のタ
スクの送信データが，p_dataで指定したメモリ領域に返される．また，その優
先度がp_datapriで指定したメモリ領域に返される．送信待ち行列の先頭のタス
クは，待ち解除される．待ち解除されたタスクには，待ち状態となったサービ
スコールからE_OKが返る．

対象優先度データキューの優先度データキュー管理領域にデータが格納されて
おらず，送信待ち行列にタスクが存在しない場合には，自タスクは優先度デー
タキューからの受信待ち状態となり，対象優先度データキューの受信待ち行列
につながれる．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

1. 仕様ベースのブラックボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.1. エラー条件のテストケース(FMP)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.2. 正常条件のテストケース(FMP)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

2. ソースコードの条件網羅確認

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.1. ソースコード
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ER
prcv_pdq(ID pdqid, intptr_t *p_data, PRI *p_datapri)
{
	PDQCB	*p_pdqcb;
	bool_t	dspreq = false;
	ER		ercd;
	TCB		*p_tcb;
	PCB		*p_pcb;

	LOG_PRCV_PDQ_ENTER(pdqid, p_data, p_datapri);
	CHECK_TSKCTX_UNL();
	CHECK_PDQID(pdqid);
	p_pdqcb = get_pdqcb(pdqid);

	t_lock_cpu();
  retry:
	t_acquire_obj_lock(&GET_OBJLOCK(p_pdqcb));	
	/* この間は繰り返し実行されるため，非破壊コードでなければならない */
	if (!queue_empty(&(p_pdqcb->swait_queue))) {
		/* 送信待ちタスクあり */
		p_tcb = (TCB *)(p_pdqcb->swait_queue.p_next);
		if ((p_pcb = t_acquire_nested_tsk_lock(p_tcb, &GET_OBJLOCK(p_pdqcb))) == NULL) {
			goto retry;
		}
		queue_delete((QUEUE *) p_tcb);
		if (p_pdqcb->count > 0U) {
			dequeue_pridata(p_pdqcb, p_data, p_datapri);
			enqueue_pridata(p_pdqcb, p_tcb->winfo_obj.pdq.data, p_tcb->winfo_obj.pdq.datapri);
		}
		else {
			*p_data = p_tcb->winfo_obj.pdq.data;
			*p_datapri = p_tcb->winfo_obj.pdq.datapri;
		}
		if (wait_complete(p_tcb)) {
			dspreq = dispatch_request(p_pcb);
		}
		release_nested_tsk_lock(p_pcb);
		ercd = E_OK;
	}
	else if (p_pdqcb->count > 0U) {
		/* バッファにデータがあり，送信待ちタスクなし */
		dequeue_pridata(p_pdqcb, p_data, p_datapri);
		ercd = E_OK;
	}
	else {
		ercd = E_TMOUT;
	}
	release_obj_lock(&GET_OBJLOCK(p_pdqcb));
	if (dspreq) {
		dispatch();
	}
	t_unlock_cpu();

  error_exit:
	LOG_PRCV_PDQ_LEAVE(ercd, *p_data, *p_datapri);
	return(ercd);
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.2. マクロを展開したAPIと呼び出す内部関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[A] prcv_pdq

00 : ER
01 : prcv_pdq(ID pdqid, intptr_t *p_data, PRI *p_datapri)
02 : {
03 : 	PDQCB	*p_pdqcb;
04 : 	bool_t	dspreq = false;
05 : 	ER		ercd;
06 : 	TCB		*p_tcb;
07 : 	PCB		*p_pcb;
08 : 
09 : 	if (!sense_tskctx_unl()) {
10 : 		ercd = E_CTX;
11 : 		goto error_exit;
12 : 	}
13 : 	if (!(TMIN_PDQID <= (pdqid) && (pdqid) <= tmax_pdqid)) {
14:			ercd = E_ID;
15 : 		goto error_exit;
16 : 	}
17 : 	p_pdqcb = p_pdqcb_table[(uint_t)((pdqid) - TMIN_PDQID)];
18 : 
19 : 	t_lock_cpu();
20 :   retry:
21 : 	t_acquire_obj_lock(&GET_OBJLOCK(p_pdqcb));	
22 : 	/* この間は繰り返し実行されるため，非破壊コードでなければならない */
23 : 	if (!queue_empty(&(p_pdqcb->swait_queue))) {
24 : 		/* 送信待ちタスクあり */
25 : 		p_tcb = (TCB *)(p_pdqcb->swait_queue.p_next);
26 : 		if ((p_pcb = t_acquire_nested_tsk_lock(p_tcb, &GET_OBJLOCK(p_pdqcb))) == NULL) {
27 : 			goto retry;
28 : 		}
29 : 		queue_delete((QUEUE *) p_tcb);
30 : 		if (p_pdqcb->count > 0U) {
31 : 			dequeue_pridata(p_pdqcb, p_data, p_datapri);
32 : 			enqueue_pridata(p_pdqcb, p_tcb->winfo_obj.pdq.data, p_tcb->winfo_obj.pdq.datapri);
33 : 		}
34 : 		else {
35 : 			*p_data = p_tcb->winfo_obj.pdq.data;
36 : 			*p_datapri = p_tcb->winfo_obj.pdq.datapri;
37 : 		}
38 : 		if (wait_complete(p_tcb)) {
39 : 			dspreq = dispatch_request(p_pcb);
40 : 		}
41 : 		release_nested_tsk_lock(p_pcb);
42 : 		ercd = E_OK;
43 : 	}
44 : 	else if (p_pdqcb->count > 0U) {
45 : 		/* バッファにデータがあり，送信待ちタスクなし */
46 : 		dequeue_pridata(p_pdqcb, p_data, p_datapri);
47 : 		ercd = E_OK;
48 : 	}
49 : 	else {
50 : 		ercd = E_TMOUT;
51 : 	}
52 : 	release_obj_lock(&GET_OBJLOCK(p_pdqcb));
53 : 	if (dspreq) {
54 : 		dispatch();
55 : 	}
56 : 	t_unlock_cpu();
57 : 
58 :   error_exit:
59 : 	return(ercd);
60 : }

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.3. 条件式
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(A1) 09 : !sense_tskctx_unl()
(A2) 13 : TMIN_PDQID <= (pdqid)
(A3) 13 : (pdqid) <= tmax_pdqid
(A4) 23 : !queue_empty(&(p_pdqcb->swait_queue))
(A5) 30 : p_pdqcb->count > 0U
(A6) 38 : wait_complete(p_tcb)
(A7) 44 : p_pdqcb->count > 0U
(A8) 53 : dspreq

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.4. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

             (A1) (A2) (A3) (A4) (A5) (A6) (A7) (A8)
(a-1)         T    D    D    D    D    D    D    D
(a-2)         T    D    D    D    D    D    D    D
(b-1)         F    F   D/T   D    D    D    D    D
(b-2)         F    T    F    D    D    D    D    D
(c)           F    T    T    F    D    D    F    F
(d-1-1)       F    T    T    F    D    D    T    F
(d-1-2)       F    T    T    F    D    D    T    F
(d-2-1-1-1)   F    T    T    T    T    T    D    T
(d-2-1-1-2)   F    T    T    T    T    F    D    F
(d-2-1-1-3)   F    T    T    T    T    F    D    F
(d-2-1-2)     F    T    T    T    T    F    D    F
(d-2-1-3)     F    T    T    T    T    F    D    F
(d-2-1-4)     F    T    T    T    T    F    D    F
(d-2-2-1-1)   F    T    T    T    T    T    D    T
(d-2-2-1-2)   F    T    T    T    T    F    D    F
(d-2-2-1-3)   F    T    T    T    T    F    D    F
(d-2-2-2)     F    T    T    T    T    F    D    F
(d-2-2-3)     F    T    T    T    T    F    D    F
(d-2-2-4)     F    T    T    T    T    F    D    F
(e-1-1-1)     F    T    T    T    F    T    D    T
(e-1-1-2)     F    T    T    T    F    F    D    F
(e-1-1-3)     F    T    T    T    F    F    D    F
(e-1-2)       F    T    T    T    F    F    D    F
(e-1-3)       F    T    T    T    F    F    D    F
(e-1-4)       F    T    T    T    F    F    D    F
(e-2-1-1)     F    T    T    T    F    T    D    T
(e-2-1-2)     F    T    T    T    F    F    D    F
(e-2-1-3)     F    T    T    T    F    F    D    F
(e-2-2)       F    T    T    T    F    F    D    F
(e-2-3)       F    T    T    T    F    F    D    F
(e-2-4)       F    T    T    T    F    F    D    F
(F-a)         T    D    D    D    D    D    D    D
(F-b-1-1-1)   F    T    T    T    T    T    D    F
(F-b-1-1-2)   F    T    T    T    T    F    D    F
(F-b-1-1-3)   F    T    T    T    T    F    D    F
(F-b-1-1-4)   F    T    T    T    T    T    D    F
(F-b-1-1-5)   F    T    T    T    T    T    D    F
(F-b-1-1-6)   F    T    T    T    T    T    D    F
(F-b-1-2)     F    T    T    T    T    F    D    F
(F-b-1-3)     F    T    T    T    T    F    D    F
(F-b-1-4)     F    T    T    T    T    F    D    F
(F-b-1-5-1)   F    T    T    T    T    T    D    F
(F-b-1-5-2)   F    T    T    T    T    T    D    F
(F-b-1-5-3)   F    T    T    T    T    F    D    F
(F-b-2-1-1)   F    T    T    T    T    T    D    F
(F-b-2-1-2)   F    T    T    T    T    F    D    F
(F-b-2-1-3)   F    T    T    T    T    F    D    F
(F-b-2-1-4)   F    T    T    T    T    T    D    F
(F-b-2-1-5)   F    T    T    T    T    T    D    F
(F-b-2-1-6)   F    T    T    T    T    T    D    F
(F-b-2-2)     F    T    T    T    T    F    D    F
(F-b-2-3)     F    T    T    T    T    F    D    F
(F-b-2-4)     F    T    T    T    T    F    D    F
(F-b-2-5-1)   F    T    T    T    T    T    D    F
(F-b-2-5-2)   F    T    T    T    T    T    D    F
(F-b-2-5-3)   F    T    T    T    T    F    D    F
(F-c-1-1-1)   F    T    T    T    F    T    D    F
(F-c-1-1-2)   F    T    T    T    F    F    D    F
(F-c-1-1-3)   F    T    T    T    F    F    D    F
(F-c-1-1-4)   F    T    T    T    F    T    D    F
(F-c-1-1-5)   F    T    T    T    F    T    D    F
(F-c-1-1-6)   F    T    T    T    F    T    D    F
(F-c-1-2)     F    T    T    T    F    F    D    F
(F-c-1-3)     F    T    T    T    F    F    D    F
(F-c-1-4)     F    T    T    T    F    F    D    F
(F-c-1-5-1)   F    T    T    T    F    T    D    F
(F-c-1-5-2)   F    T    T    T    F    T    D    F
(F-c-1-5-3)   F    T    T    T    F    F    D    F
(F-c-2-1-1)   F    T    T    T    F    T    D    F
(F-c-2-1-2)   F    T    T    T    F    F    D    F
(F-c-2-1-3)   F    T    T    T    F    F    D    F
(F-c-2-1-4)   F    T    T    T    F    T    D    F
(F-c-2-1-5)   F    T    T    T    F    T    D    F
(F-c-2-1-6)   F    T    T    T    F    T    D    F
(F-c-2-2)     F    T    T    T    F    F    D    F
(F-c-2-3)     F    T    T    T    F    F    D    F
(F-c-2-4)     F    T    T    T    F    F    D    F
(F-c-2-5-1)   F    T    T    T    F    T    D    F
(F-c-2-5-2)   F    T    T    T    F    T    D    F
(F-c-2-5-3)   F    T    T    T    F    F    D    F
----------------------------------------------------
網羅          O    O    O    O    O    O    O    O


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

3. ホワイトボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
必要なし．


以上．
