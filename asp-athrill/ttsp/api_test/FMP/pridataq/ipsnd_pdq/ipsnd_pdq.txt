
	ipsnd_pdq テストシート

----------------------------------------------------------------------
 TTSP
     TOPPERS Test Suite Package

 Copyright (C) 2009-2011 by Center for Embedded Computing Systems
             Graduate School of Information Science, Nagoya Univ., JAPAN
 Copyright (C) 2009-2011 by Digital Craft Inc.
 Copyright (C) 2009-2011 by NEC Communication Systems, Ltd.
 Copyright (C) 2009-2011 by FUJISOFT INCORPORATED
 Copyright (C) 2009-2010 by Mitsuhiro Matsuura

 上記著作権者は，以下の (1)〜(3) の条件を満たす場合に限り，本ドキュメ
 ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
     および下記の無保証規定が，そのままの形でドキュメント中に含まれて
     いること．
 (2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
     を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
     ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
     りではない．
 (3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
     からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
     本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
     く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

 本ドキュメントは，無保証で提供されているものである．上記著作権者およ
 びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
 る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
 により直接的または間接的に生じたいかなる損害に関しても，その責任を負
 わない．

 $Id: ipsnd_pdq.txt 2 2012-05-09 02:23:52Z nces-shigihara $
----------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

0. API仕様

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

snd_pdq		優先度データキューへの送信〔T〕
psnd_pdq	優先度データキューへの送信（ポーリング）〔T〕
ipsnd_pdq	優先度データキューへの送信（ポーリング）〔I〕
tsnd_pdq	優先度データキューへの送信（タイムアウト付き）〔T〕

【C言語API】
	ER ercd = snd_pdq(ID pdqid, intptr_t data, PRI datapri)
	ER ercd = psnd_pdq(ID pdqid, intptr_t data, PRI datapri)
	ER ercd = ipsnd_pdq(ID pdqid, intptr_t data, PRI datapri)
	ER ercd = tsnd_pdq(ID pdqid, intptr_t data, PRI datapri, TMO tmout)

【パラメータ】
	ID			pdqid		対象優先度データキューのID番号
	intptr_t	data		送信データ
	PRI			datapri		送信データの優先度
	TMO			tmout		タイムアウト時間（tsnd_pdqの場合）

【リターンパラメータ】
	ER			ercd		正常終了（E_OK）またはエラーコード

【エラーコード】
	E_CTX			コンテキストエラー（非タスクコンテキストからの呼出
					し：ipsnd_pdqを除く，タスクコンテキストからの呼出し：
					ipsnd_pdqの場合，CPUロック状態からの呼出し，ディス
					パッチ保留状態からの呼出し：snd_pdqとtsnd_pdqの場合）
	E_NOSPT			未サポート機能（制約タスクからの呼出し：snd_pdqと
					tsnd_pdqの場合）
	E_ID			不正ID番号（pdqidが不正）
	E_PAR			パラメータエラー（datapriが不正，tmoutが不正：
					tsnd_pdqのみ）
	E_NOEXS〔D〕	オブジェクト未登録（対象優先度データキューが未登録）
	E_OACV〔P〕		オブジェクトアクセス違反（対象優先度データキューに
					対する通常操作1が許可されていない：ipsnd_pdqを除く）
	E_TMOUT			ポーリング失敗またはタイムアウト（snd_pdqを除く）
	E_RLWAI			待ち禁止状態または待ち状態の強制解除（snd_pdqと
					tsnd_pdqの場合）
	E_DLT			待ちオブジェクトの削除または再初期化（snd_pdqと
					tsnd_pdqの場合）

【機能】

pdqidで指定した優先度データキュー（対象優先度データキュー）に，dataで指
定したデータを，datapriで指定した優先度で送信する．具体的な振舞いは以下
の通り．

対象優先度データキューの受信待ち行列にタスクが存在する場合には，受信待
ち行列の先頭のタスクが，dataで指定したデータを受信し，待ち解除される．
待ち解除されたタスクには，待ち状態となったサービスコールからE_OKが返る．

対象優先度データキューの受信待ち行列にタスクが存在せず，優先度データ
キュー管理領域にデータを格納するスペースがある場合には，dataで指定した
データが，datapriで指定したデータの優先度順で優先度データキュー管理領域
に格納される．

対象優先度データキューの受信待ち行列にタスクが存在せず，優先度データ
キュー管理領域にデータを格納するスペースがない場合には，自タスクは優先
度データキューへの送信待ち状態となり，対象優先度データキューの送信待ち
行列につながれる．

datapriは，TMIN_DPRI以上で，対象データキューに送信できるデータ優先度の
最大値以下でなければならない．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

1. 仕様ベースのブラックボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.1. エラー条件のテストケース(FMP)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.2. 正常条件のテストケース(FMP)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

2. ソースコードの条件網羅確認

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.1. ソースコード
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

ER
ipsnd_pdq(ID pdqid, intptr_t data, PRI datapri)
{
	PDQCB	*p_pdqcb;
	ER		ercd;
	TCB		*p_tcb;
	PCB		*p_pcb;

	LOG_IPSND_PDQ_ENTER(pdqid, data, datapri);
	CHECK_INTCTX_UNL();
	CHECK_PDQID(pdqid);
	p_pdqcb = get_pdqcb(pdqid);
	CHECK_PAR(TMIN_DPRI <= datapri && datapri <= p_pdqcb->p_pdqinib->maxdpri);

	i_lock_cpu();
  retry:
	i_acquire_obj_lock(&GET_OBJLOCK(p_pdqcb));
	/* この間は繰り返し実行されるため，非破壊コードでなければならない．*/
	if (!queue_empty(&(p_pdqcb->rwait_queue))) {
		p_tcb = (TCB *)(p_pdqcb->rwait_queue.p_next);
		if ((p_pcb = i_acquire_nested_tsk_lock(p_tcb, &GET_OBJLOCK(p_pdqcb))) == NULL){
			goto retry;
		}
		queue_delete((QUEUE *) p_tcb);
		p_tcb->winfo_obj.pdq.data = data;
		p_tcb->winfo_obj.pdq.datapri = datapri;
		if (wait_complete(p_tcb)) {
			if (dispatch_request(p_pcb)) {
				(get_my_p_pcb())->reqflg = true;
			}
		}
		release_nested_tsk_lock(p_pcb);
		i_unlock_cpu();
		ercd = E_OK;
	}
	else if (p_pdqcb->count < p_pdqcb->p_pdqinib->pdqcnt) {
		enqueue_pridata(p_pdqcb, data, datapri);
		ercd = E_OK;
	}
	else {
		ercd = E_TMOUT;
	}
	release_obj_lock(&GET_OBJLOCK(p_pdqcb));
	i_unlock_cpu();

  error_exit:
	LOG_IPSND_PDQ_LEAVE(ercd);
	return(ercd);
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.2. マクロを展開したAPIと呼び出す内部関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[A] psnd_pdq

00 : ER
01 : ipsnd_pdq(ID pdqid, intptr_t data, PRI datapri)
02 : {
03 : 	PDQCB	*p_pdqcb;
04 : 	ER		ercd;
05 : 	TCB		*p_tcb;
06 : 	PCB		*p_pcb;
07 : 
08 : 	if (!sense_intctx_unl()) {
09 : 		ercd = E_CTX;
10 : 		goto error_exit;
11 : 	}
12 : 	if (!(TMIN_PDQID <= (pdqid) && (pdqid) <= tmax_pdqid)) {
13:			ercd = E_ID;
14 : 		goto error_exit;
15 : 	}
16 : 	p_pdqcb = p_pdqcb_table[(uint_t)((pdqid) - TMIN_PDQID)];
17 : 	if (!(TMIN_DPRI <= datapri && datapri <= p_pdqcb->p_pdqinib->maxdpri)) {
18 : 		ercd = E_PAR;
19 : 		goto error_exit;
20 : 	}
21 : 
22 : 	i_lock_cpu();
23 :   retry:
24 : 	i_acquire_obj_lock(&GET_OBJLOCK(p_pdqcb));
25 : 	if (!queue_empty(&(p_pdqcb->rwait_queue))) {
26 : 		p_tcb = (TCB *)(p_pdqcb->rwait_queue.p_next);
27 : 		if ((p_pcb = i_acquire_nested_tsk_lock(p_tcb, &GET_OBJLOCK(p_pdqcb))) == NULL){
28 : 			goto retry;
29 : 		}
30 : 		queue_delete((QUEUE *) p_tcb);
31 : 		p_tcb->winfo_obj.pdq.data = data;
32 : 		p_tcb->winfo_obj.pdq.datapri = datapri;
33 : 		if (wait_complete(p_tcb)) {
34 : 			if (dispatch_request(p_pcb)) {
35 : 				(get_my_p_pcb())->reqflg = true;
36 : 			}
37 : 		}
38 : 		release_nested_tsk_lock(p_pcb);
39 : 		i_unlock_cpu();
40 : 		ercd = E_OK;
41 : 	}
42 : 	else if (p_pdqcb->count < p_pdqcb->p_pdqinib->pdqcnt) {
43 : 		enqueue_pridata(p_pdqcb, data, datapri);
44 : 		ercd = E_OK;
45 : 	}
46 : 	else {
47 : 		ercd = E_TMOUT;
48 : 	}
49 : 	release_obj_lock(&GET_OBJLOCK(p_pdqcb));
50 : 	i_unlock_cpu();
51 : 
52 :   error_exit:
53 : 	LOG_IPSND_PDQ_LEAVE(ercd);
54 : 	return(ercd);
55 : }

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.3. 条件式
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(A1) 08 : !sense_intctx_unl()
(A2) 12 : TMIN_PDQID <= (pdqid)
(A3) 12 : (pdqid) <= tmax_pdqid
(A4) 17 : TMIN_DPRI <= datapri
(A5) 17 : datapri <= p_pdqcb->p_pdqinib->maxdpri
(A6) 25 : !queue_empty(&(p_pdqcb->rwait_queue))
(A7) 33 : wait_complete(p_tcb)
(A8) 34 : dispatch_request
(A9) 42 : p_pdqcb->count < p_pdqcb->p_pdqinib->pdqcnt

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.4. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

           (A1) (A2) (A3) (A4) (A5) (A6) (A7) (A8) (A9)
(a-1)       T    D    D    D    D    D    D    D    D
(a-2)       T    D    D    D    D    D    D    D    D
(b-1)       F    F   D/T   D    D    D    D    D    D
(b-2)       F    T    F    D    D    D    D    D    D
(c-1)       F    T    T    F   D/T   D    D    D    D
(c-2)       F    T    T    T    F    D    D    D    D
(d)         F    T    T    T    T    F    D    D    F
(e-1-1-1)   F    T    T    T    T    T    T    T    D
(e-1-1-2)   F    T    T    T    T    T    F    D    D
(e-1-1-3)   F    T    T    T    T    T    F    D    D
(e-1-2)     F    T    T    T    T    T    F    D    D
(e-1-3)     F    T    T    T    T    T    F    D    D
(e-1-4)     F    T    T    T    T    T    F    D    D
(e-1-5)     F    T    T    T    T    T    T    T    D
(e-2-1-1)   F    T    T    T    T    T    T    T    D
(e-2-1-2)   F    T    T    T    T    T    F    D    D
(e-2-1-3)   F    T    T    T    T    T    F    D    D
(e-2-2)     F    T    T    T    T    T    F    D    D
(e-2-3)     F    T    T    T    T    T    F    D    D
(e-2-4)     F    T    T    T    T    T    F    D    D
(e-2-5)     F    T    T    T    T    T    T    T    D
(f-1)       F    T    T    T    T    F    D    D    T
(f-2)       F    T    T    T    T    F    D    D    T
(f-3)       F    T    T    T    T    F    D    D    T
(f-4)       F    T    T    T    T    F    D    D    T
(F-a)       T    D    D    D    D    D    D    D    D
(F-b-1-1-1) F    T    T    T    T    T    T    F    D
(F-b-1-1-2) F    T    T    T    T    T    F    D    D
(F-b-1-1-3) F    T    T    T    T    T    F    D    D
(F-b-1-1-4) F    T    T    T    T    T    T    F    D
(F-b-1-1-5) F    T    T    T    T    T    T    F    D
(F-b-1-1-6) F    T    T    T    T    T    T    F    D
(F-b-1-2)   F    T    T    T    T    T    F    D    D
(F-b-1-3)   F    T    T    T    T    T    F    D    D
(F-b-1-4)   F    T    T    T    T    T    F    D    D
(F-b-1-5-1) F    T    T    T    T    T    T    F    D
(F-b-1-5-2) F    T    T    T    T    T    T    F    D
(F-b-1-5-3) F    T    T    T    T    T    F    D    D
(F-b-2-1-1) F    T    T    T    T    T    T    F    D
(F-b-2-1-2) F    T    T    T    T    T    F    D    D
(F-b-2-1-3) F    T    T    T    T    T    F    D    D
(F-b-2-1-4) F    T    T    T    T    T    T    F    D
(F-b-2-1-5) F    T    T    T    T    T    T    F    D
(F-b-2-1-6) F    T    T    T    T    T    T    F    D
(F-b-2-2)   F    T    T    T    T    T    F    D    D
(F-b-2-3)   F    T    T    T    T    T    F    D    D
(F-b-2-4)   F    T    T    T    T    T    F    D    D
(F-b-2-5-1) F    T    T    T    T    T    T    F    D
(F-b-2-5-2) F    T    T    T    T    T    T    F    D
(F-b-2-5-3) F    T    T    T    T    T    F    D    D
-------------------------------------------------------
網羅        O    O    O    O    O    O    O    O    O


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

3. ホワイトボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
必要なし．


以上．
