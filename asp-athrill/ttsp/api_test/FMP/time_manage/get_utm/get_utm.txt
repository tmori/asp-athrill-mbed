
	get_utm テストシート

----------------------------------------------------------------------
 TTSP
     TOPPERS Test Suite Package

 Copyright (C) 2009-2011 by Center for Embedded Computing Systems
             Graduate School of Information Science, Nagoya Univ., JAPAN
 Copyright (C) 2009-2011 by Digital Craft Inc.
 Copyright (C) 2009-2011 by NEC Communication Systems, Ltd.
 Copyright (C) 2009-2011 by FUJISOFT INCORPORATED
 Copyright (C) 2009-2010 by Mitsuhiro Matsuura

 上記著作権者は，以下の (1)〜(3) の条件を満たす場合に限り，本ドキュメ
 ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
     および下記の無保証規定が，そのままの形でドキュメント中に含まれて
     いること．
 (2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
     を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
     ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
     りではない．
 (3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
     からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
     本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
     く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

 本ドキュメントは，無保証で提供されているものである．上記著作権者およ
 びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
 る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
 により直接的または間接的に生じたいかなる損害に関しても，その責任を負
 わない．

 $Id: get_utm.txt 2 2012-05-09 02:23:52Z nces-shigihara $
----------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

0. API仕様

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

get_utm		性能評価用システム時刻の参照〔TI〕

【C言語API】
	ER ercd = get_utm(SYSUTM *p_sysutm)

【パラメータ】
	SYSUTM *	p_sysutm	性能評価用システム時刻を入れるメモリ領域へ
							のポインタ

【リターンパラメータ】
	ER			ercd		正常終了（E_OK）またはエラーコード
	SYSUTM		sysutm		性能評価用システム時刻の現在値

【エラーコード】
	E_NOSPT			未サポート機能（get_utmがサポートされていない）
	E_MACV〔P〕		メモリアクセス違反（p_sysutmが指すメモリ領域へ書込
					みアクセスが許可されていない）

【機能】

性能評価用システム時刻の現在値を参照する．参照した性能評価用システム時
刻は，p_sysutmで指定したメモリ領域に返される．

get_utmは，任意の状態から呼び出すことができる．タスクコンテキストからも
非タスクコンテキストからも呼び出すことができるし，CPUロック状態であって
も呼び出すことができる．

ターゲット定義で，get_utmがサポートされていない場合がある．get_utmがサ
ポートされている場合には，TOPPERS_SUPPORT_GET_UTMがマクロ定義される．サ
ポートされていない場合にget_utmを呼び出すと，E_NOSPTエラーが返るか，リ
ンク時にエラーとなる．

【使用方法】

get_utmを使用してプログラムの処理時間を計測する場合には，次の手順を取る．
処理時間を計測したいプログラムの実行直前と実行直後に，get_utmを用いて性
能評価用システム時刻を読み出す．その差を求めることで，対象プログラムの
処理時間に，get_utm自身の処理時間を加えたものが得られる．

マルチプロセッサ対応カーネルにおいては，異なるプロセッサで読み出した性
能評価用システム時刻の差を求めることで，処理時間が正しく計測できるとは
限らない．

【使用上の注意】

get_utmは性能評価のための機能であり，その他の目的に使用することは推奨し
ない．

get_utmは，任意の状態から呼び出すことができるように，全割込みロック状態
を用いて実装されている．そのため，get_utmを用いると，カーネル管理外の割
込みの応答性が低下する．

システム時刻が正しく更新されない状況では，get_utmは誤った性能評価用シス
テム時刻を返す可能性がある．システム時刻の更新が確実に行われることを保
証できない場合には，get_utmが誤った性能評価用システム時刻を返す可能性を
考慮に入れて使用しなければならない．

【μITRON4.0仕様との関係】

μITRON4.0仕様に定義されていないサービスコールである．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

1. 仕様ベースのブラックボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.1. エラー条件のテストケース(FMP)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
該当なし．

【備考】
・get_utmをサポートしない場合，FMPカーネルではリンクエラーとなるため，
  E_NOSPTが返るテストは実施できない．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.2. 正常条件のテストケース(FMP)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(F-a) スピンロック取得中の場合，E_OKが返ること．(ASP:-，EX_NEW_STATE)

【備考】
・性能評価用システム時刻の現在値はターゲット依存のため，取得した現在値
  の正当性を確認するテストは行わない．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

2. ソースコードの条件網羅確認

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.1. ソースコード
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ER
get_utm(SYSUTM *p_sysutm)
{
	SYSUTM	utime;
	SYSTIM	time;
#if TIC_DENO != 1
	uint_t	subtime;
#endif /* TIC_DENO != 1 */
	CLOCK	clock1, clock2;
	bool_t	ireq;
	PCB		*my_p_pcb; 
	SIL_PRE_LOC;

	LOG_GET_UTM_ENTER(p_sysutm);

	SIL_LOC_INT();
	my_p_pcb = acquire_tsk_lock_without_preemption_self();
	time = my_p_pcb->p_tevtcb->next_time;
#if TIC_DENO != 1
	subtime = next_subtime;
#endif /* TIC_DENO != 1 */
	clock1 = target_timer_get_current();
	ireq = target_timer_probe_int();
	clock2 = target_timer_get_current();
	release_tsk_lock(my_p_pcb);
	SIL_UNL_INT();

	utime = ((SYSUTM) time) * 1000U;
#if TIC_DENO != 1
	utime += subtime * 1000U / TIC_DENO;
#endif /* TIC_DENO != 1 */

	if (!ireq || clock1 > clock2) {
		utime -= TIC_NUME * 1000U / TIC_DENO;
	}
	utime += TO_USEC(clock1);
	*p_sysutm = utime;

	LOG_GET_UTM_LEAVE(E_OK, *p_sysutm);
	return(E_OK);
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.2. マクロを展開したAPIと呼び出す内部関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[A] get_utm

00 : ER
01 : get_utm(SYSUTM *p_sysutm)
02 : {
03 : 	SYSUTM	utime;
04 : 	SYSTIM	time;
05 : #if TIC_DENO != 1
06 : 	uint_t	subtime;
07 : #endif /* TIC_DENO != 1 */
08 : 	CLOCK	clock1, clock2;
09 : 	bool_t	ireq;
10 : 	PCB		*my_p_pcb; 
11 : 	SIL_PRE_LOC;
12 : 
13 : 	SIL_LOC_INT();
14 : 	my_p_pcb = acquire_tsk_lock_without_preemption_self();
15 : 	time = my_p_pcb->p_tevtcb->next_time;
16 : #if TIC_DENO != 1
17 : 	subtime = next_subtime;
18 : #endif /* TIC_DENO != 1 */
19 : 	clock1 = target_timer_get_current();
20 : 	ireq = target_timer_probe_int();
21 : 	clock2 = target_timer_get_current();
22 : 	release_tsk_lock(my_p_pcb);
23 : 	SIL_UNL_INT();
24 : 
25 : 	utime = ((SYSUTM) time) * 1000U;
26 : #if TIC_DENO != 1
27 : 	utime += subtime * 1000U / TIC_DENO;
28 : #endif /* TIC_DENO != 1 */
39 : 
30 : 	if (!ireq || clock1 > clock2) {
31 : 		utime -= TIC_NUME * 1000U / TIC_DENO;
32 : 	}
33 : 	utime += TO_USEC(clock1);
34 : 	*p_sysutm = utime;
35 : 
36 : 	return(E_OK);
37 : }

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.3. 条件式
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(A1) 30 : !ireq
(A2) 30 : clock1 > clock2

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.4. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

      (A1) (A2)
(a)    ?    ?
(b)    ?    ?
(c)    ?    ?
(F-a)  ?    ?
---------------
網羅   X    X

【備考】
・(A1)(A2)の条件式はタイミングに依存するため網羅できない．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

3. ホワイトボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
必要なし．



以上．
