
	ras_tex テストシート

----------------------------------------------------------------------
 TTSP
     TOPPERS Test Suite Package

 Copyright (C) 2009-2011 by Center for Embedded Computing Systems
             Graduate School of Information Science, Nagoya Univ., JAPAN
 Copyright (C) 2009-2011 by Digital Craft Inc.
 Copyright (C) 2009-2011 by NEC Communication Systems, Ltd.
 Copyright (C) 2009-2011 by FUJISOFT INCORPORATED
 Copyright (C) 2009-2010 by Mitsuhiro Matsuura

 上記著作権者は，以下の (1)〜(3) の条件を満たす場合に限り，本ドキュメ
 ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
     および下記の無保証規定が，そのままの形でドキュメント中に含まれて
     いること．
 (2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
     を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
     ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
     りではない．
 (3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
     からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
     本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
     く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

 本ドキュメントは，無保証で提供されているものである．上記著作権者およ
 びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
 る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
 により直接的または間接的に生じたいかなる損害に関しても，その責任を負
 わない．

 $Id: ras_tex.txt 2 2012-05-09 02:23:52Z nces-shigihara $
----------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

0. API仕様

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

ras_tex		タスク例外処理の要求〔T〕
iras_tex	タスク例外処理の要求〔I〕

【C言語API】
	ER ercd = ras_tex(ID tskid, TEXPTN rasptn)
	ER ercd = iras_tex(ID tskid, TEXPTN rasptn)

【パラメータ】
	ID			tskid		対象タスクのID番号
	TEXPTN		rasptn		要求するタスク例外処理のタスク例外要因

【リターンパラメータ】
	ER			ercd		正常終了（E_OK）またはエラーコード

【エラーコード】
	E_CTX			コンテキストエラー（非タスクコンテキストからの呼出
					し：ras_texの場合，タスクコンテキストからの呼出し：
					iras_texの場合，CPUロック状態からの呼出し）
	E_ID			不正ID番号（tskidが不正）
	E_NOEXS〔D〕	オブジェクト未登録（対象タスクが未登録）
	E_OACV〔P〕		オブジェクトアクセス違反（対象タスクに対する通常操
					作2が許可されていない：ras_texの場合）
	E_PAR			パラメータエラー（rasptnが不正）
	E_OBJ			オブジェクト状態エラー（対象タスクが休止状態，対象
					タスクに対してタスク例外処理ルーチンが定義されてい
					ない）

【機能】

tskidで指定したタスク（対象タスク）に対して，rasptnで指定したタスク例外
要因のタスク例外処理を要求する．対象タスクの保留例外要因が，それまでの
値とrasptnで指定した値のビット毎論理和（C言語の"|"）に更新される．

対象タスクが休止状態である場合と，対象タスクに対してタスク例外処理ルー
チンが定義されていない場合には，E_OBJエラーとなる．

ras_texにおいてtskidにTSK_SELF（＝0）を指定すると，自タスクが対象タスク
となる．

rasptnが0の場合には，E_PARエラーとなる．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

1. 仕様ベースのブラックボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.1. エラー条件のテストケース(FMP)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.2. 正常条件のテストケース(FMP)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━



■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

2. ソースコードの条件網羅確認

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.1. ソースコード
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ER
ras_tex(ID tskid, TEXPTN rasptn)
{
	TCB		*p_tcb;
	ER		ercd;
	PCB		*p_pcb;

	LOG_RAS_TEX_ENTER(tskid, rasptn);
	CHECK_TSKCTX_UNL();
	CHECK_TSKID_SELF(tskid);
	CHECK_PAR(rasptn != 0U);

	t_lock_cpu();
	p_tcb = get_tcb_self(tskid, get_my_p_pcb());
	p_pcb = t_acquire_tsk_lock(p_tcb);
	if (TSTAT_DORMANT(p_tcb->tstat) || p_tcb->p_tinib->texrtn == NULL) {
		ercd = E_OBJ;
	}
	else {
		p_tcb->texptn |= rasptn;
		/* 実行状態によらず、プロセッサ間割込みを入れる */
		if (dispatch_request(p_pcb)) {
			/* 自タスクの場合 */
			if (p_tcb == p_pcb->p_runtsk && p_tcb->enatex && p_pcb->ipmflg) {
				call_texrtn(p_pcb);
				/* マイグレーションしている可能性があるため再取得 */
				p_pcb = get_my_p_pcb();
			}
		}
		ercd = E_OK;
	}
	release_tsk_lock(p_pcb);
	t_unlock_cpu();

  error_exit:
	LOG_RAS_TEX_LEAVE(ercd);
	return(ercd);
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.2. マクロを展開したAPIと呼び出す内部関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[A] ras_tex

00 : ER
01 : ras_tex(ID tskid, TEXPTN rasptn)
02 : {
03 : 	TCB		*p_tcb;
04 : 	ER		ercd;
05 : 	PCB		*p_pcb;
06 : 
07 : 	if (!sense_tskctx_unl()) {
08 : 		ercd = E_CTX;
09 : 		goto error_exit;
10 : 	}
11 : 	if (!((TMIN_TSKID <= (tskid) && (tskid) <= tmax_tskid)
12 : 	                                    || (tskid) == TSK_SELF)) {
13 : 		ercd = E_ID;
14 : 		goto error_exit;
15 : 	}
16 : 	if (!(rasptn != 0U)) {
17 : 		ercd = E_PAR;
18 : 		goto error_exit;
19 : 	}
20 : 
21 : 	t_lock_cpu();
22 : 	p_tcb = ((tskid) == TSK_SELF ? (get_my_p_pcb())->p_runtsk :
23 :                    (p_tcb_table[((uint_t)((tskid) - TMIN_TSKID))]));
24 : 	p_pcb = t_acquire_tsk_lock(p_tcb);
25 : 	if (((p_tcb->tstat) == TS_DORMANT)
26 :                              || p_tcb->p_tinib->texrtn == NULL) {
27 : 		ercd = E_OBJ;
28 : 	}
29 : 	else {
30 : 		p_tcb->texptn |= rasptn;
31 : 		/* 実行状態によらず、プロセッサ間割込みを入れる */
32 : 		if (dispatch_request(p_pcb)) {
33 : 			/* 自タスクの場合 */
34 : 			if (p_tcb == p_pcb->p_runtsk && p_tcb->enatex && p_pcb->ipmflg) {
35 : 				call_texrtn(p_pcb);
36 : 				/* マイグレーションしている可能性があるため再取得 */
37 : 				p_pcb = get_my_p_pcb();
38 : 			}
39 : 		}
40 : 		ercd = E_OK;
41 : 	}
42 : 	release_tsk_lock(p_pcb);
43 : 	t_unlock_cpu();
44 : 
45 :   error_exit:
46 : 	return(ercd);
47 : }


[B] dispatch_request

00 : bool_t
01 : dispatch_request(PCB* p_pcb)
02 : {
03 : 	if (p_pcb == get_my_p_pcb()) {
04 : 		return(true);
05 : 	}
06 : 	else {
07 : 		target_ipi_raise(p_pcb->prcid);
08 : 		return(false);
09 : 	}
10 : }

[C] call_texrtn

00 : 	TEXPTN	texptn;
01 : 	bool_t	saved_disdsp;
02 : 	TCB		*p_runtsk;
03 : 
04 : 	saved_disdsp = my_p_pcb->disdsp;
05 : 	p_runtsk = my_p_pcb->p_runtsk;
06 : 	p_runtsk->enatex = false;
07 : 	do {
08 : 		texptn = p_runtsk->texptn;
09 : 		p_runtsk->texptn = 0U;
10 : 		/* タスクロックの解放 */
11 : 		release_tsk_lock(my_p_pcb);
12 : 		t_unlock_cpu();
13 : 
14 : 		(*((TEXRTN)(p_runtsk->p_tinib->texrtn)))(texptn,
15 : 										p_runtsk->p_tinib->exinf);
16 : 
17 : 		if (!t_sense_lock()) {
18 : 			t_lock_cpu();
19 : 		}
20 : 		/* タスクロックの取得 */
21 : 		my_p_pcb = t_acquire_tsk_lock_self_without_runnable_check();
22 : 		if (!my_p_pcb->ipmflg) {
23 : 			t_set_ipm(TIPM_ENAALL);
24 : 			my_p_pcb->ipmflg = true;
25 : 		}
26 : 		my_p_pcb->disdsp = saved_disdsp;
27 : 		my_p_pcb->dspflg = !my_p_pcb->disdsp;
28 : 		p_runtsk->enatex = false;
29 : 		force_unlock_spin(my_p_pcb);
30 : 		if (p_runtsk != my_p_pcb->p_schedtsk && my_p_pcb->dspflg) {
31 : 			/* タスクロックの解放（CPUロックは解除しない） */
32 : 			release_tsk_lock(my_p_pcb);
33 : 			dispatch();
34 : 			/* タスクロックの取得 */
35 : 			my_p_pcb = t_acquire_tsk_lock_self_without_runnable_check();
36 : 		}
37 : 	} while (p_runtsk->texptn != 0U);
38 : 	p_runtsk->enatex = true;
39 : }

[D] force_unlock_spin(TTYPE_SPN == NATIVE_SPN)

00 : void
01 : force_unlock_spin(PCB *my_p_pcb)
02 : {
03 : 	SPNCB   *p_spncb;
04 : 
05 : 	if (my_p_pcb->locspnid != 0U) {
06 : 		p_spncb = (p_spncb_table
07 : 		         [((uint_t)((my_p_pcb->locspnid) - TMIN_SPNID))]);
08 : 		x_unlock_spin(&(p_spncb->spn_lock));
09 : 		p_spncb->lock_flg = false;
10 : 		my_p_pcb->locspnid = 0;
11 : 	}
12 : }

[E] force_unlock_spin(TTYPE_SPN == EMULATE_SPN)

00 : void
01 : force_unlock_spin(PCB *my_p_pcb)
02 : {
03 : 	SPNCB   *p_spncb;
04 : 
05 : 	if (my_p_pcb->locspnid != 0U) {
06 : 		p_spncb = get_spncb(my_p_pcb->locspnid);
07 : 		p_spncb->lock_flg = false;
08 : 		my_p_pcb->locspnid = 0;
09 : 	}
10 : }

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.3. 条件式
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(A1)  07 : !sense_tskctx_unl()
(A2)  11 : TMIN_TSKID <= (tskid)
(A3)  11 : (tskid) <= tmax_tskid
(A4)  12 : (tskid) == TSK_SELF
(A5)  16 : !(rasptn != 0U)
(A6)  22 : (tskid) == TSK_SELF
(A7)  25 : (p_tcb->tstat) == TS_DORMANT
(A8)  26 : p_tcb->p_tinib->texrtn == NULL
(A9)  32 : dispatch_request(p_pcb)
(A10) 34 : p_tcb == p_pcb->p_runtsk
(A11) 34 : p_tcb->enatex
(A12) 34 : p_pcb->ipmflg

(B1)  03 : p_pcb == get_my_p_pcb()

(C1)  17 : !t_sense_lock()
(C2)  22 : !my_p_pcb->ipmflg
(C3)  30 : p_runtsk != my_p_pcb->p_schedtsk
(C4)  30 : my_p_pcb->dspflg
(C5)  37 : p_runtsk->texptn != 0U

(D1)  05 : my_p_pcb->locspnid != 0U

(E1)  05 : my_p_pcb->locspnid != 0U

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.4. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

            (A1) (A2) (A3) (A4) (A5) (A6) (A7) (A8) (A9) (A10) (A11) (A12) (B1) (C1) (C2) (C3) (C4)  (C5) (D1) (E1)
(a-1)        T    D    D    D    D    D    D    D    D    D     D     D     D    D    D    D    D     D    D    D
(a-2)        T    D    D    D    D    D    D    D    D    D     D     D     D    D    D    D    D     D    D    D
(b-1)        F    F   D/T   F    D    D    D    D    D    D     D     D     D    D    D    D    D     D    D    D
(b-2)        F    T    F    F    D    D    D    D    D    D     D     D     D    D    D    D    D     D    D    D
(c)          F    T    T   D/F   F    F    T   D/F   D    D     D     D     D    D    D    D    D     D    D    D
(d)          F    T    T   D/F   F    F    F    T    D    D     D     D     D    D    D    D    D     D    D    D
(e)          F    T    T   D/F   T    D    D    D    D    D     D     D     D    D    D    D    D     D    D    D
(f)          F    F   D/T   T    F    T    F    F    T    T     T     T     T    T    F    F   D/T    F    F    F
(g-1)        F    T    T   D/F   F    F    F    F    T    F    D/T   D/T    T    T    F    F   D/T    F    F    F
(g-2)        F    T    T   D/F   F    F    F    F    T    F    D/T   D/T    T    T    F    F   D/T    F    F    F
(g-3)        F    T    T   D/F   F    F    F    F    T    F    D/T   D/T    T    T    F    F   D/T    F    F    F
(g-4)        F    T    T   D/F   F    F    F    F    T    F    D/T   D/T    T    T    F    F   D/T    F    F    F
(g-5)        F    T    T   D/F   F    F    F    F    T    F    D/T   D/T    T    T    F    F   D/T    F    F    F
(g-6)        F    T    T   D/F   F    F    F    F    T    F    D/T   D/T    T    T    F    F   D/T    F    F    F
(g-7)        F    T    T   D/F   F    F    F    F    T    F    D/T   D/T    T    T    F    F   D/T    F    F    F
(g-8)        F    T    T   D/F   F    F    F    F    T    F    D/T   D/T    T    T    F    F   D/T    F    F    F
(h)          F    T    T   D/F   F    F    F    F    T    F    D/T   D/T    T    D    D    D    D     D    D    D
(i-1)        F    F   D/T   T    F    T    F    F    T    T     F    D/T    T    D    D    D    D     D    D    D
(i-2)        F    T    T   D/F   F    F    F    F    T    F    D/F   D/T    T    D    D    D    D     D    D    D
(W-a)        F    T    T   D/F   F    F    F    F    T    F    D/T   D/T    T    F    F    F   D/T    F    F    F
(W-b)        F    F   D/T   T    F    T    F    F    T    T     T     T     T    T    F    T    F     F    F    F
(W-c)        F    F   D/T   T    F    T    F    F    T    T     T     T     T    T    F    T    T     F    F    F
(W-d)        F    T    T   D/F   F    F    F    F    T    F    D/T   D/T    T    TT   FF   FF  D/TD/T TF   F    F
(W-e)        F    F   D/T   T    F    T    F    F    T    T     T     F     T    T    F    F   D/T    F    F    F
(W-f)        F    F   D/T   T    F    T    F    F    T    T     T     T     T    T    T    F   D/T    F    F    F
(F-a-1)      T    D    D    D    D    D    D    D    D    D     D     D     D    D    D    D    D     D    D    D
(F-a-2)      T    D    D    D    D    D    D    D    D    D     D     D     D    D    D    D    D     D    D    D
(F-a-3)      T    D    D    D    D    D    D    D    D    D     D     D     D    D    D    D    D     D    D    D
(F-a-4)      T    D    D    D    D    D    D    D    D    D     D     D     D    D    D    D    D     D    D    D
(F-b)        F    T    T   D/F   F    F    T   D/F   D    D     D     D     D    D    D    D    D     D    D    D
(F-c)        F    T    T   D/F   F    F    F    T    D    D     D     D     D    D    D    D    D     D    D    D
(F-d)        F    T    T   D/F   T    D    D    D    D    D     D     D     D    D    D    D    D     D    D    D
(F-e-1)      F    F   D/T   T    F    T    F    F    T    T     T     T     T    T    F    T    F     F    F    F
(F-e-2)      F    F   D/T   T    F    T    F    F    T    T     T     F     T    T    F    T    F     F    F    F
(F-f-1)      F    T    T   D/F   F    F    F    F    F    D     D     D     F    T    F    F   D/T    F    F    F
(F-f-2)      F    T    T   D/F   F    F    F    F    F    D     D     D     F    T    F    F   D/T    F    F    F
(F-f-3)      F    T    T   D/F   F    F    F    F    F    D     D     D     F    T    F    F   D/T    F    F    F
(F-f-4)      F    T    T   D/F   F    F    F    F    F    D     D     D     F    T    F    F   D/T    F    F    F
(F-f-5)      F    T    T   D/F   F    F    F    F    F    D     D     D     F    T    F    F   D/T    F    F    F
(F-f-6)      F    T    T   D/F   F    F    F    F    F    D     D     D     F    T    F    F   D/T    F    F    F
(F-f-7)      F    T    T   D/F   F    F    F    F    F    D     D     D     F    T    F    F   D/T    F    F    F
(F-f-8)      F    T    T   D/F   F    F    F    F    F    D     D     D     F    T    F    F   D/T    F    F    F
(F-f-9)      F    T    T   D/F   F    F    F    F    F    D     D     D     F    T    F    F   D/T    F    F    F
(F-f-10-1)   F    T    T   D/F   F    F    F    F    F    D     D     D     F    T    F    F   D/T    F    F    F
(F-f-10-2)   F    T    T   D/F   F    F    F    F    F    D     D     D     F    T    F    F   D/T    F    F    F
(F-f-10-3)   F    T    T   D/F   F    F    F    F    F    D     D     D     F    T    F    F   D/T    F    F    F
(F-f-10-4)   F    T    T   D/F   F    F    F    F    F    D     D     D     F    T    F    T    F     F    F    F
(F-f-10-5)   F    T    T   D/F   F    F    F    F    F    D     D     D     F    T    F    T    F     F    F    F
(F-g)        F    T    T   D/F   F    F    F    F    F    D     D     D     F    D    D    D    D     D    D    D
(F-h)        F    T    T   D/F   F    F    F    F    F    D     D     D     F    D    D    D    D     D    D    D
-------------------------------------------------------------------------------------------------------------------
網羅         O    O    O    O    O    O    O    O    O    O     O     O     O    O    O    O    O     O    X    X

【備考】
・g-X，W_a，W_d，F-f-Xの(C1)〜(C5)，(D1)，(E1)はディスパッチ発生後，対
  象タスクが実行状態となった際に，call_texrtnが呼ばれたときの条件網羅で
  ある．
・(D1)(E1)の網羅をさせるために，ホワイトボックステストを実施する．

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

3. ホワイトボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
3.1. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
         (A1) (A2) (A3) (A4) (A5) (A6) (A7) (A8) (A9) (A10) (A11) (A12) (B1) (C1) (C2) (C3) (C4)  (C5) (D1) (E1)
(W_F-a)   F    F   D/T   T    F    T    F    F    T    T     T     T     T    F    F    F   D/T    F    T    T
----------------------------------------------------------------------------------------------------------------
網羅      O    O    O    O    O    O    O    O    O    O     O     O     O    O    O    O    O     O    O    O

【備考】
・call_texrtn内の命令網羅を実現するために，W_F-aではタスク例外処理ルー
  チンが終了するまでをテストとする．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
3.2. テストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━




以上．
