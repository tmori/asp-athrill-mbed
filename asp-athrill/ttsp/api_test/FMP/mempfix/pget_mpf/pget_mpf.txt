
	pget_mpf テストシート

----------------------------------------------------------------------
 TTSP
     TOPPERS Test Suite Package

 Copyright (C) 2009-2011 by Center for Embedded Computing Systems
             Graduate School of Information Science, Nagoya Univ., JAPAN
 Copyright (C) 2009-2011 by Digital Craft Inc.
 Copyright (C) 2009-2011 by NEC Communication Systems, Ltd.
 Copyright (C) 2009-2011 by FUJISOFT INCORPORATED
 Copyright (C) 2009-2010 by Mitsuhiro Matsuura

 上記著作権者は，以下の (1)〜(3) の条件を満たす場合に限り，本ドキュメ
 ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
     および下記の無保証規定が，そのままの形でドキュメント中に含まれて
     いること．
 (2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
     を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
     ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
     りではない．
 (3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
     からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
     本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
     く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

 本ドキュメントは，無保証で提供されているものである．上記著作権者およ
 びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
 る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
 により直接的または間接的に生じたいかなる損害に関しても，その責任を負
 わない．

 $Id: pget_mpf.txt 2 2012-05-09 02:23:52Z nces-shigihara $
----------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

0. API仕様

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

get_mpf		固定長メモリブロックの獲得〔T〕
pget_mpf	固定長メモリブロックの獲得（ポーリング）〔T〕
tget_mpf	固定長メモリブロックの獲得（タイムアウト付き）〔T〕

【C言語API】
	ER ercd = get_mpf(ID mpfid, void **p_blk)
	ER ercd = pget_mpf(ID mpfid, void **p_blk)
	ER ercd = tget_mpf(ID mpfid, void **p_blk, TMO tmout)

【パラメータ】
	ID			mpfid		対象固定長メモリプールのID番号
	void **		p_blk		獲得した固定長メモリブロックの先頭番地を入
							れるメモリ領域へのポインタ
	TMO			tmout		タイムアウト時間（twai_mpfの場合）

【リターンパラメータ】
	ER			ercd		正常終了（E_OK）またはエラーコード
	void *		blk			獲得した固定長メモリブロックの先頭番地

【エラーコード】
	E_CTX			コンテキストエラー（非タスクコンテキストからの呼出
					し，CPUロック状態からの呼出し，ディスパッチ保留状態
					からの呼出し：pget_mpfを除く）
	E_NOSPT			未サポート機能（制約タスクからの呼出し：pget_mpfを除
					く）
	E_ID			不正ID番号（mpfidが不正）
	E_PAR			パラメータエラー（tmoutが不正：tget_mpfの場合）
	E_NOEXS〔D〕	オブジェクト未登録（対象固定長メモリプールが未登録）
	E_OACV〔P〕		オブジェクトアクセス違反（対象固定長メモリプールに
					対する通常操作2が許可されていない）
	E_MACV〔P〕		メモリアクセス違反（p_blkが指すメモリ領域への読出し
					アクセスが許可されていない）
	E_TMOUT			ポーリング失敗またはタイムアウト（get_mpfを除く）
	E_RLWAI			待ち禁止状態または待ち状態の強制解除（pget_mpfを除
					く）
	E_DLT			待ちオブジェクトの削除または再初期化（pget_mpfを除
					く）

【機能】

mpfidで指定した固定長メモリプール（対象固定長メモリプール）から固定長メ
モリブロックを獲得し，その先頭番地をblkに返す．具体的な振舞いは以下の通
り．

対象固定長メモリプールの固定長メモリプール領域の中に，固定長メモリブロッ
クを割り付けることのできる未割当てのメモリ領域がある場合には，固定長メ
モリブロックが1つ割り付けられ，その先頭番地がblkに返される．

未割当てのメモリ領域がない場合には，自タスクは固定長メモリプールの獲得
待ち状態となり，対象固定長メモリプールの待ち行列につながれる．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

1. 仕様ベースのブラックボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.1. エラー条件のテストケース(FMP)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(F-a) スピンロック取得中に呼び出して，E_CTXエラーが返ること．
      (ASP:a，EX_NEW_STATE)

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.2. 正常条件のテストケース(FMP)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
該当なし


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

2. ソースコードの条件網羅確認

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.1. ソースコード
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ER
pget_mpf(ID mpfid, void **p_blk)
{
	MPFCB	*p_mpfcb;
	ER		ercd;

	LOG_PGET_MPF_ENTER(mpfid, p_blk);
	CHECK_TSKCTX_UNL();
	CHECK_MPFID(mpfid);
	p_mpfcb = get_mpfcb(mpfid);

	t_lock_cpu();
	t_acquire_obj_lock(&GET_OBJLOCK(p_mpfcb));
	if (p_mpfcb->fblkcnt > 0) {
		get_mpf_block(p_mpfcb, p_blk);
		ercd = E_OK;
	}
	else {
		ercd = E_TMOUT;
	}
	release_obj_lock(&GET_OBJLOCK(p_mpfcb));
	t_unlock_cpu();

  error_exit:
	LOG_PGET_MPF_LEAVE(ercd, *p_blk);
	return(ercd);
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.2. マクロを展開したAPIと呼び出す内部関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[A] pget_mpf

00 : ER
01 : pget_mpf(ID mpfid, void **p_blk)
02 : {
03 : 	MPFCB	*p_mpfcb;
04 : 	ER		ercd;
05 : 
06 : 	if (!sense_tskctx_unl()) {
07 : 		ercd = E_CTX;
08 : 		goto error_exit;
09 : 	}
10 : 	if (!(TMIN_MPFID <= (mpfid) && (mpfid) <= tmax_mpfid)) {
11 : 		ercd = E_ID;
12 : 		goto error_exit;
13 : 	}
14 : 	p_mpfcb = p_mpfcb_table[(uint_t)((mpfid) - TMIN_MPFID)];
15 : 
16 : 	t_lock_cpu();
17 : 	t_acquire_obj_lock(&GET_OBJLOCK(p_mpfcb));
18 : 	if (p_mpfcb->fblkcnt > 0) {
19 : 		get_mpf_block(p_mpfcb, p_blk);
20 : 		ercd = E_OK;
21 : 	}
22 : 	else {
23 : 		ercd = E_TMOUT;
24 : 	}
25 : 	release_obj_lock(&GET_OBJLOCK(p_mpfcb));
26 : 	t_unlock_cpu();
27 : 
28 :   error_exit:
29 : 	return(ercd);
30 : }

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.3. 条件式
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(A1) 06 : !sense_tskctx_unl()
(A2) 10 : TMIN_MPFID <= (mpfid)
(A3) 10 : (mpfid) <= tmax_mpfid
(A4) 18 : p_mpfcb->fblkcnt > 0

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.4. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

       (A1) (A2) (A3) (A4)
(a-1)   T    D    D    D
(a-2)   T    D    D    D
(b-1)   F    F   D/T   D
(b-2)   F    T    F    D
(c)     F    T    T    T
(d)     F    T    T    F
(e-1)   F    T    T    T
(e-2)     F    T    T    T
(F-a)   T    D    D    D
--------------------------
網羅    O    O    O    O


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

3. ホワイトボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
必要なし．


以上．
