
	rel_mpf テストシート

----------------------------------------------------------------------
 TTSP
     TOPPERS Test Suite Package

 Copyright (C) 2009-2011 by Center for Embedded Computing Systems
             Graduate School of Information Science, Nagoya Univ., JAPAN
 Copyright (C) 2009-2011 by Digital Craft Inc.
 Copyright (C) 2009-2011 by NEC Communication Systems, Ltd.
 Copyright (C) 2009-2011 by FUJISOFT INCORPORATED
 Copyright (C) 2009-2010 by Mitsuhiro Matsuura

 上記著作権者は，以下の (1)〜(3) の条件を満たす場合に限り，本ドキュメ
 ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
     および下記の無保証規定が，そのままの形でドキュメント中に含まれて
     いること．
 (2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
     を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
     ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
     りではない．
 (3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
     からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
     本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
     く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

 本ドキュメントは，無保証で提供されているものである．上記著作権者およ
 びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
 る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
 により直接的または間接的に生じたいかなる損害に関しても，その責任を負
 わない．

 $Id: rel_mpf.txt 2 2012-05-09 02:23:52Z nces-shigihara $
----------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

0. API仕様

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

rel_mpf		固定長メモリブロックの返却〔T〕

【C言語API】
	ER ercd = rel_mpf(ID mpfid, void *blk)

【パラメータ】
	ID			mpfid		対象固定長メモリプールのID番号
	void *		blk			返却する固定長メモリブロックの先頭番地

【リターンパラメータ】
	ER			ercd		正常終了（E_OK）またはエラーコード

【エラーコード】
	E_CTX			コンテキストエラー（非タスクコンテキストからの呼出
					し，CPUロック状態からの呼出し）
	E_ID			不正ID番号（mpfidが不正）
	E_PAR			パラメータエラー（blkが不正）
	E_NOEXS〔D〕	オブジェクト未登録（対象固定長メモリプールが未登録）
	E_OACV〔P〕		オブジェクトアクセス違反（対象固定長メモリプールに
					対する通常操作1が許可されていない）

【機能】

mpfidで指定した固定長メモリプール（対象固定長メモリプール）に，blkで指
定した固定長メモリブロックを返却する．具体的な振舞いは以下の通り．

対象固定長メモリプールの待ち行列にタスクが存在する場合には，待ち行列の
先頭のタスクが，blkで指定した固定長メモリブロックを獲得し，待ち解除され
る．待ち解除されたタスクには，待ち状態となったサービスコールからE_OKが
返る．

待ち行列にタスクが存在しない場合には，blkで指定した固定長メモリブロック
は，対象固定長メモリプールのメモリプール領域に返却される．

blkが，対象固定長メモリプールから獲得した固定長メモリブロックの先頭番地
でない場合には，E_PARエラーとなる．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

1. 仕様ベースのブラックボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.1. エラー条件のテストケース(FMP)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.2. 正常条件のテストケース(FMP)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━



■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

2. ソースコードの条件網羅確認

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.1. ソースコード
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ER
rel_mpf(ID mpfid, void *blk)
{
	MPFCB	*p_mpfcb;
	SIZE	blkoffset;
	uint_t	blkidx;
	TCB		*p_tcb;
	ER		ercd;
	bool_t	dspreq = false;
	PCB		*p_pcb;

	LOG_REL_MPF_ENTER(mpfid, blk);
	CHECK_TSKCTX_UNL();
	CHECK_MPFID(mpfid);
	p_mpfcb = get_mpfcb(mpfid);
	CHECK_PAR(p_mpfcb->p_mpfinib->mpf <= blk);
	blkoffset = ((char *) blk) - (char *)(p_mpfcb->p_mpfinib->mpf);
	CHECK_PAR(blkoffset % p_mpfcb->p_mpfinib->blksz == 0U);
	CHECK_PAR(blkoffset / p_mpfcb->p_mpfinib->blksz < p_mpfcb->unused);
	blkidx = (uint_t)(blkoffset / p_mpfcb->p_mpfinib->blksz);
	CHECK_PAR((p_mpfcb->p_mpfinib->p_mpfmb + blkidx)->next == INDEX_ALLOC);

	t_lock_cpu();
  retry:
	t_acquire_obj_lock(&GET_OBJLOCK(p_mpfcb));
	if (!queue_empty(&(p_mpfcb->wait_queue))) {
		/* この間は繰り返し実行されるため，非破壊コードでなければならない．*/
		p_tcb = (TCB *) (p_mpfcb->wait_queue.p_next);
		if ((p_pcb = t_acquire_nested_tsk_lock(p_tcb, &GET_OBJLOCK(p_mpfcb))) == NULL) {
			goto retry;
		}
		queue_delete((QUEUE *) p_tcb);
		p_tcb->winfo_obj.mpf.blk = blk;
		if (wait_complete(p_tcb)) {
			dspreq = dispatch_request(p_pcb);
		}
		release_nested_tsk_lock(p_pcb);
		release_obj_lock(&GET_OBJLOCK(p_mpfcb));
		if (dspreq) {
			dispatch();
		}
		ercd = E_OK;
	}
	else {
		p_mpfcb->fblkcnt++;
		(p_mpfcb->p_mpfinib->p_mpfmb + blkidx)->next = p_mpfcb->freelist;
		p_mpfcb->freelist = blkidx;
		release_obj_lock(&GET_OBJLOCK(p_mpfcb));
		ercd = E_OK;
	}
	t_unlock_cpu();

  error_exit:
	LOG_REL_MPF_LEAVE(ercd);
	return(ercd);
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.2. マクロを展開したAPIと呼び出す内部関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[A] rel_mpf

00 : ER
01 : rel_mpf(ID mpfid, void *blk)
02 : {
03 : 	MPFCB	*p_mpfcb;
04 : 	SIZE	blkoffset;
05 : 	uint_t	blkidx;
06 : 	TCB		*p_tcb;
07 : 	ER		ercd;
08 : 	bool_t	dspreq = false;
09 : 	PCB		*p_pcb;
10 : 
11 : 	if (!sense_tskctx_unl()) {
12 : 		ercd = E_CTX;
13 : 		goto error_exit;
14 : 	}
15 : 	if (!(TMIN_MPFID <= (mpfid) && (mpfid) <= tmax_mpfid)) {
16 : 		ercd = E_ID;
17 : 		goto error_exit;
18 : 	}
19 : 	p_mpfcb = p_mpfcb_table[(uint_t)((mpfid) - TMIN_MPFID)];
20 : 	if (!(p_mpfcb->p_mpfinib->mpf <= blk)) {
21 : 		ercd = E_PAR;
22 : 		goto error_exit;
23 : 	}
24 : 	blkoffset = ((char *) blk) - (char *)(p_mpfcb->p_mpfinib->mpf);
25 : 	if (!(blkoffset % p_mpfcb->p_mpfinib->blksz == 0U)) {
26 : 		ercd = E_PAR;
27 : 		goto error_exit;
28 : 	}
29 : 	if (!(blkoffset / p_mpfcb->p_mpfinib->blksz < p_mpfcb->unused)) {
30 : 		ercd = E_PAR;
31 : 		goto error_exit;
32 : 	}
33 : 	blkidx = (uint_t)(blkoffset / p_mpfcb->p_mpfinib->blksz);
34 : 	if (!((p_mpfcb->p_mpfinib->p_mpfmb + blkidx)->next == 1U)) {
35 : 		ercd = E_PAR;
36 : 		goto error_exit;
37 : 	}
38 : 
39 : 	t_lock_cpu();
40 :   retry:
41 : 	t_acquire_obj_lock(&GET_OBJLOCK(p_mpfcb));
42 : 	if (!queue_empty(&(p_mpfcb->wait_queue))) {
43 : 		/* この間は繰り返し実行されるため，非破壊コードでなければならない．*/
44 : 		p_tcb = (TCB *) (p_mpfcb->wait_queue.p_next);
45 : 		if ((p_pcb = t_acquire_nested_tsk_lock(p_tcb, &GET_OBJLOCK(p_mpfcb))) == NULL) {
46 : 			goto retry;
47 : 		}
48 : 		queue_delete((QUEUE *) p_tcb);
49 : 		p_tcb->winfo_obj.mpf.blk = blk;
50 : 		if (wait_complete(p_tcb)) {
51 : 			dspreq = dispatch_request(p_pcb);
52 : 		}
53 : 		release_nested_tsk_lock(p_pcb);
54 : 		release_obj_lock(&GET_OBJLOCK(p_mpfcb));
55 : 		if (dspreq) {
56 : 			dispatch();
57 : 		}
58 : 		ercd = E_OK;
59 : 	}
60 : 	else {
61 : 		p_mpfcb->fblkcnt++;
62 : 		(p_mpfcb->p_mpfinib->p_mpfmb + blkidx)->next = p_mpfcb->freelist;
63 : 		p_mpfcb->freelist = blkidx;
64 : 		release_obj_lock(&GET_OBJLOCK(p_mpfcb));
65 : 		ercd = E_OK;
66 : 	}
67 : 	t_unlock_cpu();
68 : 
69 :   error_exit:
70 : 	return(ercd);
71 : }

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.3. 条件式
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(A1)  11 : !sense_tskctx_unl()
(A2)  15 : TMIN_MPFID <= (mpfid)
(A3)  15 : (mpfid) <= tmax_mpfid
(A4)  20 : !(p_mpfcb->p_mpfinib->mpf <= blk)
(A5)  25 : !(blkoffset % p_mpfcb->p_mpfinib->blksz == 0U)
(A6)  29 : !(blkoffset / p_mpfcb->p_mpfinib->blksz < p_mpfcb->unused)
(A7)  34 : !((p_mpfcb->p_mpfinib->p_mpfmb + blkidx)->next == 1U)
(A8)  42 : !queue_empty(&(p_mpfcb->wait_queue))
(A9)  50 : wait_complete(p_tcb)
(A10) 55 : dspreq

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.4. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

           (A1) (A2) (A3) (A4) (A5) (A6) (A7) (A8) (A9) (A10)
(a-1)       T    D    D    D    D    D    D    D    D    D
(a-2)       T    D    D    D    D    D    D    D    D    D
(b-1)       F    F   D/T   D    D    D    D    D    D    D
(b-2)       F    T    F    D    D    D    D    D    D    D
(c)         F    T    T    ?    D    D    D    D    D    D
(d)         F    T    T    F    F    F    F    F    D    D
(e-1-1)     F    T    T    F    F    F    F    T    T    T
(e-1-2)     F    T    T    F    F    F    F    T    F    F
(e-1-3)     F    T    T    F    F    F    F    T    F    F
(e-2)       F    T    T    F    F    F    F    T    F    F
(e-3)       F    T    T    F    F    F    F    T    F    F
(e-4)       F    T    T    F    F    F    F    T    F    F
(f-1-1)     F    T    T    F    F    F    F    T    T    T
(f-1-2)     F    T    T    F    F    F    F    T    F    F
(f-1-3)     F    T    T    F    F    F    F    T    F    F
(f-2)       F    T    T    F    F    F    F    T    F    F
(f-3)       F    T    T    F    F    F    F    T    F    F
(f-4)       F    T    T    F    F    F    F    T    F    F
(W-a)       F    T    T    T    D    D    D    D    D    D
(W-b)       F    T    T    F    T    D    D    D    D    D
(W-c)       F    T    T    F    F    T    D    D    D    D
(W-d)       F    T    T    F    F    F    T    D    D    D
(F-a)       T    D    D    D    D    D    D    D    D    D
(F-b-1-1)   F    T    T    F    F    F    F    T    T    F
(F-b-1-2)   F    T    T    F    F    F    F    T    F    F
(F-b-1-3)   F    T    T    F    F    F    F    T    F    F
(F-b-1-4)   F    T    T    F    F    F    F    T    T    F
(F-b-1-5)   F    T    T    F    F    F    F    T    T    F
(F-b-1-6)   F    T    T    F    F    F    F    T    T    F
(F-b-2)     F    T    T    F    F    F    F    T    F    F
(F-b-3)     F    T    T    F    F    F    F    T    F    F
(F-b-4)     F    T    T    F    F    F    F    T    F    F
(F-b-5)     F    T    T    F    F    F    F    T    T    F
(F-b-6)     F    T    T    F    F    F    F    T    T    F
(F-b-7)     F    T    T    F    F    F    F    T    F    F
(F-c-1-1)   F    T    T    F    F    F    F    T    T    F
(F-c-1-2)   F    T    T    F    F    F    F    T    F    F
(F-c-1-3)   F    T    T    F    F    F    F    T    F    F
(F-c-1-4)   F    T    T    F    F    F    F    T    T    F
(F-c-1-5)   F    T    T    F    F    F    F    T    T    F
(F-c-1-6)   F    T    T    F    F    F    F    T    T    F
(F-c-2)     F    T    T    F    F    F    F    T    F    F
(F-c-3)     F    T    T    F    F    F    F    T    F    F
(F-c-4)     F    T    T    F    F    F    F    T    F    F
(F-c-5)     F    T    T    F    F    F    F    T    T    F
(F-c-6)     F    T    T    F    F    F    F    T    T    F
(F-c-7)     F    T    T    F    F    F    F    T    F    F
-------------------------------------------------------------
網羅        O    O    O    O    O    O    O    O    O    O


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

3. ホワイトボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
必要なし．


以上．
