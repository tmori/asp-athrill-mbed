
	APIテスト(TOPPERS/FMPカーネル)の開発および実施要綱

----------------------------------------------------------------------
 TTSP
     TOPPERS Test Suite Package

 Copyright (C) 2009-2011 by Center for Embedded Computing Systems
             Graduate School of Information Science, Nagoya Univ., JAPAN
 Copyright (C) 2009-2011 by Digital Craft Inc.
 Copyright (C) 2009-2011 by NEC Communication Systems, Ltd.
 Copyright (C) 2009-2011 by FUJISOFT INCORPORATED
 Copyright (C) 2009-2010 by Mitsuhiro Matsuura

 上記著作権者は，以下の (1)〜(3) の条件を満たす場合に限り，本ドキュメ
 ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
     および下記の無保証規定が，そのままの形でドキュメント中に含まれて
     いること．
 (2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
     を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
     ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
     りではない．
 (3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
     からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
     本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
     く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

 本ドキュメントは，無保証で提供されているものである．上記著作権者およ
 びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
 る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
 により直接的または間接的に生じたいかなる損害に関しても，その責任を負
 わない．

 $Id: developer.txt 2 2012-05-09 02:23:52Z nces-shigihara $
----------------------------------------------------------------------

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
このドキュメントの位置付け
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
このドキュメントは，APIテストのの開発および実施要綱のうちFMPカーネルに
特化した箇所について記述したものである．
FMPカーネルのAPIテストはASPカーネルのテストを拡張して作成されるので，
ASPカーネル用のdeveloper.txtを理解していることを前提とする．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
テスト実施概要
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ASPカーネルと同等．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
テスト方法
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ASPカーネルと同等．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
テストシート作成要綱
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
以下の章立てで記述する．

----------------------------------------------------------------------
0. API仕様
----------------------------------------------------------------------
対象とするバージョンの統合仕様書をSVNからチェックアウトし，各APIの仕様
の部分をそのままコピー＆ペーストする．
※ASPカーネルのテストシートと冗長するが，対応する統合仕様書のバージョン
  に差異が発生する場合もあるため，FMPカーネルのテストシートにも記述する．

----------------------------------------------------------------------
1. 仕様ベースのブラックボックステスト
----------------------------------------------------------------------
FMPカーネルは，ASPカーネルを拡張しているため，ASPカーネル用のテストケー
スは1プロセッサに閉じたテストとして流用する．したがって，ASPカーネルで
実施しているテストケースを作成する必要はなく，マルチプロセッサを考慮し
たテストケースのみを作成する．
ただし，FMPカーネルで新設されたAPIについては，1プロセッサに閉じたテスト
も作成する．新設されたAPIは以下である．
･ タスク管理機能         mact_tsk，imact_tsk，mig_tsk
･ 周期ハンドラ           msta_cyc
･ アラームハンドラ       msta_alm，imsta_alm
･ システム状態管理機能   mrot_rdq，imrot_rdq，get_pid，iget_pid
･ スピンロック           loc_spn，iloc_spn，try_spn，itry_spn,
                         unl_spn，iunl_spn

テストケースIDは，ASPカーネル用と重複しないよう，"F"を付与してテストケ
ース毎に(F-a)から順にアルファベットで番号を付与し，同一の条件下でさらに
複数の条件が存在する場合は，(F-a-1)，(F-a-2)のように番号を付与する．

1.1 エラー条件のテストケース
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
エラーコードが返るテストケースにおいて，対象とする(引数に与える)タスク，
アラームハンドラなどのオブジェクトが，他プロセッサに割り付けられている
テストケースを作成する．例えばCPUロック状態でact_tskを発行して，E_CTX
エラーが返るテストの場合，ASPカーネルのテストケースでは，引数に与えるタ
スクは自プロセッサに割り付けられている．FMPカーネルでは，引数に与えるタ
スクを，CPUロック状態でない他プロセッサに割り付けられているタスクを指定
したテストケースを作成する．

※FMPカーネルでは保護ドメインは存在しないため，それによるエラーコードが
  返ることを確認するテストの必要はない．

1.2 正常条件のテストケース
~~~~~~~~~~~~~~~~~~~~~~~~~~
ASPカーネル用のテストケースを基に，処理単位が複数のプロセッサを跨ぐよう
変更したテストを追加する．具体的には，APIを発行する処理単位が割り付けら
れたプロセッサ(自プロセッサと呼ぶ)と，それ以外の処理単位が割り付けられ
たプロセッサ(他プロセッサと呼ぶ)の2つのプロセッサ構成に拡張したテストを
用意する．また，マイグレーションを伴うAPIは3プロセッサに跨るパターンも
作成する．
(1)API発行元のタスクが割り付けられたプロセッサ
   (自プロセッサと呼ぶ)
(2)API発行対象のタスクが割り付けられたプロセッサ
   (他プロセッサ(1)と呼ぶ)
(3)API発行対象タスクのマイグレーション先のプロセッサ
   (他プロセッサ(2)と呼ぶ)
※詳細なテストケース抽出ポリシーは後述する．

＜テストケースに記述に関して＞
FMPカーネルでは，プロセッサの組み合わせによりテストケースが膨大になり，
テキストで管理するのは現実的ではない．テストケースを管理する仕組み(シ
ステム)を検討中であるが，現在はエクセルファイルで管理する．ただし，テス
トケース数の少ないものは，ASPカーネル同様テストシート内で管理する．


----------------------------------------------------------------------
2. ソースコードの条件網羅確認
----------------------------------------------------------------------
ASPカーネルと同等．
ただし，ターゲット依存関数に加え，ロックに関する関数も網羅対象外とする．
どの内部関数をどの内部関数で網羅したかは後述の内部関数網羅対象API一覧を
参照のこと．

----------------------------------------------------------------------
3. ホワイトボックステスト
----------------------------------------------------------------------
ASPカーネルと同等．


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
テストシート作成時の注意事項
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
----------------------------------------------------------------------
プロセッサの指定方法
----------------------------------------------------------------------
・対象タスクが"自プロセッサ"に割り付けられている場合．
・対象タスクが"他プロセッサ"に割り付けられている場合．

"自プロセッサ"とは，APIを実行する処理単位が割り付けられているプロセッサ
と同じプロセッサを示す．

"他プロセッサ"とは，APIを実行する処理単位が割り付けられているプロセッサ
とは異なる任意の一つのプロセッサを示す．なお，3個以上のプロセッサが必要
となるテストケースでは，"他プロセッサ(1)""他プロセッサ(2)"と明確に区別
して記述すること．

"他プロセッサ(2)"とは，"自プロセッサ"と"他プロセッサ"以外の任意の一つ
のプロセッサを示す．

----------------------------------------------------------------------
バリエーションによるソースコードの扱い
----------------------------------------------------------------------
ロック方式やスピンロック方式によりコードが異なるが，どの方式においても
カバレッジが100％となるよう，ホワイトボックステストを実施する．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
TESRYデータ作成時の注意事項
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
----------------------------------------------------------------------
プロセッサの指定方法
----------------------------------------------------------------------
"自プロセッサ"     : SELF_PRC
"他プロセッサ"     : OTHER_PRC
"他プロセッサ(1)"  : OTHER_PRC_1
"他プロセッサ(2)"  : OTHER_PRC_2


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
テストケース抽出ポリシー
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
----------------------------------------------------------------------
[0]ASPカーネルのテストケースとの関連の明記
----------------------------------------------------------------------
ASPカーネル用のテストケースを元に，追加作成したテストケースは，元のテス
トケースがわかるように明記する．また，元となったテストケースから拡張し
た理由を以下の拡張ポリシーIDで，合わせて明記する．

・EX_OTHER_PRC
  対象とする処理単位の割付プロセッサを，自プロセッサから他プロセッサと
  変更する．

・EX_NEW_STATE
  FMPカーネルでのみ有りうる状態を追加する．

・EX_RUN_SUS
  対象とする処理単位が自タスクのときに，自プロセッサが強制待ち状態[実行
  継続中]であるテストケースを追加する．

・EX_DIFF_STATE
  自プロセッサの状態を取得するAPIにおいて，他プロセッサを意図的に異なる
  状態にする．

・EX_NEW_PARAM
  FMPカーネルで新設されたパラメータをテストする．

----------------------------------------------------------------------
[1]2つのプロセッサを跨ぐテストケースの拡張
   (EX_OTHER_PRC)
----------------------------------------------------------------------
APIを発行することで直接的に，またはオブジェクトを介して間接的に他の処理
単位に影響を与えるテストケースは，処理単位を異なるプロセッサに割り付け
るようにしてFMPカーネル用のテストケースとする．ここで，API発行元の処理
単位を割り付けたプロセッサを「自プロセッサ」，それ以外の処理単位を割り
付けたプロセッサを「他プロセッサ」と呼ぶ．すなわち，APIを発行する処理単
位以外に複数の処理単位が関係する場合には，自プロセッサにはAPI発行元タス
クのみが割り付けられ，それ以外の処理単位はすべて他プロセッサに割り付け
る．

----------------------------------------------------------------------
[2]他プロセッサをディスパッチ保留状態とする
   (EX_NEW_STATE)
----------------------------------------------------------------------
[1]で拡張したテストケースの中に，「ディスパッチ保留状態のときにタスクの
切り換えが発生しないこと」を確認するテストがある．以下，このテストを「
ディスパッチ保留状態のテスト」と呼ぶ．このテストを実施する時には，他プ
ロセッサを「ディスパッチ保留状態」とする．
この理由は，自プロセッサの状態が他プロセッサの振る舞いに影響を与えない
からであり，自プロセッサの状態は「ディスパッチ保留状態」とはしない．

----------------------------------------------------------------------
[3]タスクを「実行可能状態」に遷移させるテストケースの拡張
   (EX_NEW_STATE)
----------------------------------------------------------------------
他のタスクの状態を「実行可能状態」に遷移させるテストケースを，FMPカーネ
ル向けに拡張する際は，他プロセッサにおける実行状態のタスクの有無により，
2種類に分離する．
この理由は，ASPカーネルではAPI発行元がタスクであればそれ自身が実行状態
のタスクとして必ず存在するが，FMPカーネルではプロセッサが異なれば実行状
態のタスクが存在しないケースもあるためである．

----------------------------------------------------------------------
[4]他プロセッサで実行状態のタスクが存在する場合のテストケースの拡張
   (EX_NEW_STATE)
----------------------------------------------------------------------
ディスパッチ保留状態のテストに，「他プロセッサがCPUロック状態」と「他プ
ロセッサが非タスクコンテキスト実行時」と「強制待ち状態[実行継続中]」を
追加する． 強制待ち状態[実行継続中]は以下の4つを追加する．
"強制待ち状態[実行継続中](非タスクコンテキスト実行中)"
"強制待ち状態[実行継続中](CPUロック状態)"
"強制待ち状態[実行継続中](ディスパッチ禁止状態)"
"強制待ち状態[実行継続中](割込み優先度マスクが全解除でない)"

APIは一部を除いて「自プロセッサがCPUロック状態」または「自プロセッサが
非タスクコンテキスト実行時」に発行するとエラーとなる仕様のため，ASPカー
ネルのテストケースではエラー条件のテストとして実施している．FMPカーネル
では，他プロセッサがそれらの状態の場合のテストを追加することが必要であ
る．

----------------------------------------------------------------------
[5]他プロセッサに実行状態のタスクが存在しない場合のテストケースの拡張
   (EX_NEW_STATE)
----------------------------------------------------------------------
ディスパッチ保留状態のテストに「他プロセッサが非タスクコンテキスト実行
時」を追加する．ただし，「ディスパッチ禁止状態」と「割込み優先度マスク
が全解除でない場合」はその状態に至るシーケンスが存在しないので追加しな
い．

----------------------------------------------------------------------
[6]「実行状態」のテストケースの拡張
   (EX_NEW_STATE)
----------------------------------------------------------------------
APIの発行元と操作対象の両方がタスクの場合には，そのタスクの状態が「実行
状態」であるテストケースを追加する．
ASPカーネルでは，APIを発行するタスクが実行状態なので，操作対象のタスク
が実行状態であることはない．しかしFMPカーネルでは，異なるプロセッサの実
行状態であるタスクを操作対象とすることができる．

----------------------------------------------------------------------
[7]「強制待ち状態[実行継続中]」のテストケースの拡張
   (EX_RUN_SUS)
----------------------------------------------------------------------
APIの操作対象が自タスクの場合には，「強制待ち状態[実行継続中]」のテスト
を追加する．強制待ち状態[実行継続中]は以下の2つを追加する．
"強制待ち状態[実行継続中](ディスパッチ禁止状態)"
"強制待ち状態[実行継続中](割込み優先度マスクが全解除でない)"

FMPカーネルでは，API発行元タスクと操作対象タスクのどちらも，「強制待ち
状態[実行継続中]」になり得るが，操作対象のみ追加する．
(API発行元タスクに対する拡張は機械的な組み合わせが可能であるため)

----------------------------------------------------------------------
[8]他プロセッサの状態のバリエーション拡張
   (EX_CARE_STATE)
----------------------------------------------------------------------
自プロセッサの状態を操作または参照するAPIのテストについては，「他プロセ
ッサ」の関連する状態を組み合わせたテストケースを追加する．
例えば，sns_loc()で自プロセッサのCPUロック状態の取得を確認するためには，
他プロセッサのロック状態と逆に組合せた次の２通りのテストケースが必要で
ある．
・自プロセッサがCPUロック状態で，他プロセッサがCPUロック解除状態
・自プロセッサがCPUロック解除状態で，他プロセッサがCPUロック状態
これは，誤って他プロセッサの状態を取得していない事を明確にするためであ
る．
したがって，sns_texやiget_tid()のようなAPIでは，
・他プロセッサのみ実行状態のタスクがいる状態
・他プロセッサのみ強制待ち状態[実行継続中]のタスクがいる状態
を実施する．

----------------------------------------------------------------------
[9]複数の待ちタスクの割付プロセッサ
----------------------------------------------------------------------
ini_xxx系のAPIでは複数の待ちタスクが同時に待ち解除される．前述のポリシ
ーでは，すべての待ちタスクを他プロセッサへ割り付けるが，待ち解除されて
ディスパッチが発生する割付プロセッサが混在するテストケースを実施するべ
きである．しかし，あらゆるパターンを実施しようとすると組み合わせ爆発し
てしまうため，割付プロセッサ混在のテストケースは以下の1件のみとする．
・優先度高の待ちタスクが2つ存在する
・2つの待ちタスクの割付プロセッサは自プロセッサと他プロセッサである
・自プロセッサと他プロセッサには，優先度中の実行中のタスクがそれぞれ存
  在する
・自プロセッサの実行中のタスクがini_xxxを発行し，2つのプロセッサで同時
  に待ち解除が発生し，ディスパッチが発生する

※set_flg/iset_flgでも複数の待ちタスクが同時に解除されるため，上記のテ
  ストケースを追加する．

----------------------------------------------------------------------
[10]FMPカーネルで新設されたパラメータの参照について
    (EX_NEW_PARAM)
----------------------------------------------------------------------
ref_tskを発行した際に取得できるprcid，actprcはASPカーネルには存在しない
ため，ASPカーネルのref_tskのテストケースではprcid，actprcを参照していな
い．つまり，FMPカーネルでは，ASPカーネルのref_tskのテストケースを流用し
てしまうと，参照しないパラメータが存在してしまう．従って以下のAPIについ
ては新設されたパラメータを参照するために，自プロセッサに対して発行する
テストケースもFMPカーネル用に新たに作成する．
・ref_tsk
・ref_alm
・ref_cyc

----------------------------------------------------------------------
[11]ディスパッチ保留状態へ「スピンロック取得中」の追加
    (EX_NEW_STATE)
----------------------------------------------------------------------
スピンロック取得中はCPUロック状態となるため，結果としてディスパッチ保留
状態となる．ただし，CPUロック状態へ至る処理が異なるため，スピンロック取
得中とCPUロック状態を区別する．したがって，ディスパッチ保留状態のCPUロ
ック状態に対するテストケースについては，スピンロック取得中のテストケー
スを新設する．
CPUロック状態の自プロセッサに対するテストが可能である場合は，ASPカーネ
ル用のテストケースで流用できないため，新設する．

----------------------------------------------------------------------
[12]クラス，割付けプロセッサの扱い
    (EX_NEW_STATE)
----------------------------------------------------------------------
クラス，割付けプロセッサについては，タスク，アラームハンドラなどの処理
単位についてのみ考慮する．つまり同期通信オブジェクトについては割付けプ
ロセッサを考慮しない．クラスについては，初期割付けプロセッサ，割付け可
能プロセッサを明示的に指定するときのみ考慮する．


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
TESRYデータ作成ポリシー
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ASPカーネルと同等．


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
実装のバリエーションへの対応
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
----------------------------------------------------------------------
プロセッサ数
----------------------------------------------------------------------
TTGにおいて，テスト対象のターゲットに合わせて実行可能なテストケースのみ
を取捨選択するため，テストスイートとしては，プロセッサ数を意識しない．

----------------------------------------------------------------------
ロック方式
----------------------------------------------------------------------
どのロック方式に対するテストケースであっても，テスト対象のターゲットに
依存せずに実行可能であるため，テストスイートとしては，ロック方式を意識
しない．

----------------------------------------------------------------------
スピンロック方式
----------------------------------------------------------------------
どのスピンロック方式に対するテストケースであっても，テスト対象のターゲ
ットに依存せずに実行可能であるため，テストスイートとしては，スピンロッ
ク方式を意識しない．また，TTGにてスピンロック上限数をチェックするため，
スピンロック数も意識しない．

----------------------------------------------------------------------
タイマアーキテクチャ
----------------------------------------------------------------------
タイマアーキテクチャによって実施可能なテストケースが異なるため，実行可
能なアーキテクチャが限られるテストケースに対しては，TESRYデータにどのタ
イマアーキテクチャに対するテストケースかを記述する．記述方法はTTGのユー
ザーズマニュアルを参照する．

----------------------------------------------------------------------
メモリアーキテクチャ
----------------------------------------------------------------------
APIテストにおいては考慮しない．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
内部関数網羅対象API一覧
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
内部関数の条件網羅を，FMPカーネルのどのAPIで行ったかを以下にまとめる．

************************************
| 内部関数名            | API      |
************************************
| bitmap_search         | sus_tsk  |
| call_almhdr           | sta_alm  |
| call_cychdr           | sta_cyc  |
| call_texrtn           | ras_tex  |
| change_priority       | chg_pri  |
| check_flg_cond        | set_flg  |
| dequeue_data          | rcv_dtq  |
| dispatch_request      | ras_tex  |
| enqueue_data          | psnd_dtq |
| enqueue_msg_pri       | snd_mbx  |
| enqueue_pridata       | snd_pdq  |
| force_enqueue_data    | fsnd_dtq |
| force_unlock_spin     | ras_tex  |
| get_mpf_block         | get_mpf  |
| init_wait_queue       | ini_pdq  |
| make_active           | iact_tsk |
| make_non_runnable     | sus_tsk  |
| make_non_wait         | snd_pdq  |
| make_runnable         | iact_tsk |
| make_wait             | slp_tsk  |
| make_wait_tmout       | tsnd_pdq |
| primap_empty          | sus_tsk  |
| primap_search         | sus_tsk  |
| queue_empty           | sus_tsk  |
| queue_insert_tpri     | snd_pdq  |
| rotate_ready_queue    | rot_rdq  |
| search_schedtsk       | sus_tsk  |
| set_lowest_precedence | mig_tsk  |
| tmevt_down            | ini_pdq  |
| tmevt_lefttim         | ref_cyc  |
| tmevt_up              | dly_tsk  |
| tmevtb_delete         | ini_pdq  |
| tmevtb_dequeue        | ini_pdq  |
| tmevtb_enqueue        | dly_tsk  |
| tmevtb_enqueue_cyc    | sta_cyc  |
| tmevtb_enqueue_evttim | sta_cyc  |
| tmevtb_insert         | dly_tsk  |
| wait_complete         | snd_pdq  |
| wait_dequeue_tmevtb   | ini_pdq  |
| wait_dequeue_wobj     | tsnd_pdq |
| wait_tmout            | tsnd_pdq |
| wait_tmout_ok         | dly_tsk  |
| wait_tskid            | ref_flg  |
| wobj_change_priority  | chg_pri  |
| wobj_make_wait        | snd_pdq  |
| wobj_make_wait_tmout  | tsnd_pdq |
| wobj_queue_insert     | snd_pdq  |
************************************

※以下の内部関数はロック関数である
acquire_dual_tsk_lock_without_preemption
acquire_nested_tsk_lock_without_preemption
acquire_tsk_lock_without_preemption_self
i_acquire_dual_tsk_lock
i_acquire_dual_tsk_lock_alm
i_acquire_nested_tsk_lock
i_acquire_obj_lock
i_acquire_tsk_lock
i_acquire_tsk_lock_alm
i_acquire_tsk_lock_prcid
i_acquire_tsk_lock_self
release_dual_tsk_lock
release_nested_tsk_lock
release_tsk_lock
release_obj_lock
release_obj_lock_and_dispatch
t_acquire_dual_tsk_lock
t_acquire_dual_tsk_lock_alm
t_acquire_dual_tsk_lock_cyc
t_acquire_nested_dual_tsk_lock
t_acquire_nested_tsk_lock
t_acquire_nested_tsk_lock_self
t_acquire_obj_lock
t_acquire_tsk_lock
t_acquire_tsk_lock_alm
t_acquire_tsk_lock_cyc
t_acquire_tsk_lock_prcid
t_acquire_tsk_lock_self
t_acquire_tsk_lock_self_without_runnable_check

※以下の内部関数には分岐が存在しない
dequeue_pridata
get_mp_p_pcb
get_my_p_pcb
make_dormant
primap_clear
primap_set
queue_delete
queue_delete_next
queue_insert_prev
wait_release

※以下の内部関数はターゲット依存である
activate_context
dispatch
exc_sense_intmask
exc_sense_unlock
exit_and_dispatch
i_get_ipm
i_lock_cpu
i_sense_lock
i_set_ipm
i_unlock_cpu
sense_context
sense_intctx_unl
sense_tskctx_unl
t_disable_int
t_enable_int
t_get_ipm
t_lock_cpu
t_sense_lock
t_set_ipm
t_unlock_cpu
target_ipi_raise
target_timer_get_current
target_timer_probe_int
x_try_lock_spin
x_unlock_spin



以上．
