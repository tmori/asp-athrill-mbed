
	iloc_spn テストシート

----------------------------------------------------------------------
 TTSP
     TOPPERS Test Suite Package

 Copyright (C) 2009-2011 by Center for Embedded Computing Systems
             Graduate School of Information Science, Nagoya Univ., JAPAN
 Copyright (C) 2009-2011 by Digital Craft Inc.
 Copyright (C) 2009-2011 by NEC Communication Systems, Ltd.
 Copyright (C) 2009-2011 by FUJISOFT INCORPORATED
 Copyright (C) 2009-2010 by Mitsuhiro Matsuura

 上記著作権者は，以下の (1)〜(3) の条件を満たす場合に限り，本ドキュメ
 ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
     および下記の無保証規定が，そのままの形でドキュメント中に含まれて
     いること．
 (2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
     を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
     ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
     りではない．
 (3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
     からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
     本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
     く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

 本ドキュメントは，無保証で提供されているものである．上記著作権者およ
 びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
 る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
 により直接的または間接的に生じたいかなる損害に関しても，その責任を負
 わない．

 $Id: iloc_spn.txt 2 2012-05-09 02:23:52Z nces-shigihara $
----------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

0. API仕様

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

loc_spn		スピンロックの取得〔TM〕
iloc_spn	スピンロックの取得〔IM〕

【C言語API】
	ER ercd = loc_spn(ID spnid)
	ER ercd = iloc_spn(ID spnid)

【パラメータ】
	ID			spnid		対象スピンロックのID番号

【リターンパラメータ】
	ER			ercd		正常終了（E_OK）またはエラーコード

【エラーコード】
	E_CTX			コンテキストエラー（非タスクコンテキストからの呼出
					し：loc_spnの場合，タスクコンテキストからの呼出し：
					iloc_spnの場合，CPUロック状態からの呼出し）
	E_ID			不正ID番号（spnidが不正）
	E_NOEXS〔D〕	オブジェクト未登録（対象スピンロックが未登録）
	E_OACV〔P〕		オブジェクトアクセス違反（対象スピンロックに対する
					通常操作1が許可されていない：loc_spnの場合）

【機能】

spnidで指定したスピンロック（対象スピンロック）を取得する．具体的な振舞
いは以下の通り．

対象スピンロックが取得されていない状態である場合には，プロセッサ間ロッ
クの取得を試みる．ロックが他のプロセッサによって取得されている状態であ
る場合や，他のプロセッサがロックの取得に成功した場合には，ロックが返却
されるまでループによって待ち，返却されたらロックの取得を試みる．これを，
ロックの取得に成功するまで繰り返す．

ロックの取得に成功した場合には，スピンロックは取得されている状態になる．
また，CPUロックフラグをセットしてCPUロック状態へ遷移し，サービスコール
からリターンする．

なお，複数のプロセッサがロックの取得を待っている時に，どのプロセッサが
最初にロックを取得できるかは，現時点ではターゲット定義とする．

【補足説明】

対象スピンロックが，loc_spn／iloc_spnを呼び出したプロセッサによって取得
されている状態である場合には，スピンロックの取得によりCPUロック状態になっ
ているため，loc_spn／iloc_spnはE_CTXエラーとなる．

プロセッサがロックを取得できる順序を，現時点ではターゲット定義としたが，
リアルタイム性保証のためには，（ロックの取得待ちの間に割込みが発生しな
い限りは）loc_spn／iloc_spnを呼び出した順序でロックを取得できるとするの
が望ましい．ただし，ターゲットハードウェアの制限で，そのような実装がで
きるとは限らないため，現時点ではターゲット定義としている．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

1. 仕様ベースのブラックボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.1. エラー条件のテストケース(FMP)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(F-a) 不正なコンテキスト状態で呼出す場合．

      (F-a-1) タスクコンテキストから呼び出して，E_CTXエラーが返ること．

      (F-a-2) CPUロック状態で呼び出して，E_CTXエラーが返ること．

      (F-a-3) 対象スピンロック取得中に呼び出して，E_CTXエラーが返ること．

(F-b) spnidが不正の時にE_IDが返ること．

      (F-b-1) spnidが許容される最小値-1(=0)の時にE_IDが返ること．

      (F-b-2) spnidが許容される最大値+1(TNUM_SPNID+1)の時にE_IDが返るこ
              と．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.2. 正常条件のテストケース(FMP)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(F-c) 対象スピンロックが他のプロセッサによって取得されていない状態であ
      る場合には，プロセッサ間ロックの取得を試みて，ロックの取得に成功
      した場合には，スピンロックは取得されている状態になること．また，
      CPUロックフラグをセットしてCPUロック状態へ遷移し，サービスコール
      からリターンすること．

(F-d) ロックが他のプロセッサによって取得されている状態である場合は，ロ
      ックが返却れるまでループによって待ち，返却されたらロックの取得を
      試みて，ロックの取得に成功するまで繰り返すこと．

【備考】
・複数のプロセッサがループによって待っている場合に，他のプロセッサがロ
  ックの取得に成功するかどうかは，ターゲッﾄ依存であるため，テストしない．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

2. ソースコードの条件網羅確認

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.1. ソースコード
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[TTYPE_SPN == NATIVE_SPN]

ER
iloc_spn(ID spnid)
{
	ER		ercd;
	SPNCB	*p_spncb;

	LOG_ILOC_SPN_ENTER(spnid);
	CHECK_INTCTX_UNL();
	CHECK_SPNID(spnid);
	p_spncb = get_spncb(spnid);

	/*
	 *  すでにロックを取得している場合（locspnid != 0）なら，CHECK_TSKCTX_UNL()
	 *  でエラーとなるので，locspnidのチェックは必要ない．
	 */
	i_lock_cpu();
	i_lock_spin(&(p_spncb->spn_lock));
	p_spncb->lock_flg = true;
	(get_my_p_pcb())->locspnid = spnid;
	ercd = E_OK;

  error_exit:
	LOG_ILOC_SPN_LEAVE(ercd);
	return(ercd);
}


[TTYPE_SPN == EMULATE_SPN]

ER
iloc_spn(ID spnid)
{
	ER		ercd;
	SPNCB   *p_spncb;
	PCB		*my_p_pcb;

	LOG_ILOC_SPN_ENTER(spnid);
	CHECK_INTCTX_UNL();
	CHECK_SPNID(spnid);
	p_spncb = get_spncb(spnid);

	i_lock_cpu();
  retry:
	i_acquire_obj_lock(&GET_OBJLOCK(p_spncb));
	if (p_spncb->lock_flg) {
		/* すでにロックされていた場合 */
		release_obj_lock(&GET_OBJLOCK(p_spncb));
		goto retry;
	}
	else {
		/* ロックされていなかった場合 */
		my_p_pcb = get_my_p_pcb();
		p_spncb->lock_flg = true;
		my_p_pcb->locspnid = spnid;
		release_obj_lock(&GET_OBJLOCK(p_spncb));
		ercd = E_OK;
	}

  error_exit:
	LOG_ILOC_SPN_LEAVE(ercd);
	return(ercd);
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.2. マクロを展開したAPIと呼び出す内部関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[A] iloc_spn(TTYPE_SPN == NATIVE_SPN)

00 : ER
01 : loc_spn(ID spnid)
02 : {
03 : 	ER		ercd;
04 : 	SPNCB	*p_spncb;
05 : 
06 : 	if (!sense_intctx_unl()) {
07 : 		ercd = E_CTX;
08 : 		goto error_exit;
09 : 	}
10 : 	if (!(TMIN_SPNID <= (spnid) && (spnid) <= tmax_spnid)) {
11 : 		ercd = E_ID;
12 : 		goto error_exit;
13 : 	}
14 : 	p_spncb = p_spncb_table[(uint_t)((spnid) - TMIN_SPNID)];
15 : 
16 : 	/*
17 : 	 *  すでにロックを取得している場合（locspnid != 0）なら，CHECK_TSKCTX_UNL()
18 : 	 *  でエラーとなるので，locspnidのチェックは必要ない．
19 : 	 */
20 : 	i_lock_cpu();
21 : 	i_lock_spin(&(p_spncb->spn_lock));
22 : 	p_spncb->lock_flg = true;
23 : 	(get_my_p_pcb())->locspnid = spnid;
24 : 	ercd = E_OK;
25 : 
26 :   error_exit:
27 : 	return(ercd);
28 : }


[B] iloc_spn(TTYPE_SPN == EMULATE_SPN)

00 : ER
01 : loc_spn(ID spnid)
02 : {
03 : 	ER		ercd;
04 : 	SPNCB   *p_spncb;
05 : 	PCB		*my_p_pcb;
06 : 
07 : 	if (!sense_intctx_unl()) {
08 : 		ercd = E_CTX;
09 : 		goto error_exit;
10 : 	}
11 : 	if (!(TMIN_SPNID <= (spnid) && (spnid) <= tmax_spnid)) {
12 : 		ercd = E_ID;
13 : 		goto error_exit;
14 : 	}
15 : 	p_spncb = p_spncb_table[(uint_t)((spnid) - TMIN_SPNID)];
16 : 
17 : 	i_lock_cpu();
18 :   retry:
19 : 	i_acquire_obj_lock(&GET_OBJLOCK(p_spncb));
20 : 	if (p_spncb->lock_flg) {
21 : 		/* すでにロックされていた場合 */
22 : 		release_obj_lock(&GET_OBJLOCK(p_spncb));
23 : 		goto retry;
24 : 	}
25 : 	else {
26 : 		/* ロックされていなかった場合 */
27 : 		my_p_pcb = get_my_p_pcb();
28 : 		p_spncb->lock_flg = true;
29 : 		my_p_pcb->locspnid = spnid;
30 : 		release_obj_lock(&GET_OBJLOCK(p_spncb));
31 : 		ercd = E_OK;
32 : 	}
33 : 
34 :   error_exit:
35 : 	return(ercd);
36 : }

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.3. 条件式
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(A1)  06 : !sense_intctx_unl()
(A2)  10 : TMIN_SPNID <= (spnid)
(A3)  10 : (spnid) <= tmax_spnid

(B1)  07 : !sense_intctx_unl()
(B2)  11 : TMIN_SPNID <= (spnid)
(B3)  11 : (spnid) <= tmax_spnid
(B4)  20 : p_spncb->lock_flg

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.4. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[TTYPE_SPN == NATIVE_SPN]

         (A1) (A2) (A3)
(F-a-1)   T    D    D  
(F-a-2)   T    D    D  
(F-a-3)   T    D    D  
(F-b-1)   F    F   D/T 
(F-b-2)   F    T    F  
(F-c)     F    T    T  
(F-d)     F    T    T  
-----------------------
網羅      O    O    O  


[TTYPE_SPN == EMULATE_SPN]

         (B1) (B2) (B3) (B4)
(F-a-1)   T    D    D    D  
(F-a-2)   T    D    D    D  
(F-a-3)   T    D    D    D  
(F-b-1)   F    F   D/T   D  
(F-b-2)   F    T    F    D  
(F-c)     F    T    T    F  
(F-d)     F    T    T    T  
----------------------------
網羅      O    O    O    O  


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

3. ホワイトボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
必要なし．



以上．
