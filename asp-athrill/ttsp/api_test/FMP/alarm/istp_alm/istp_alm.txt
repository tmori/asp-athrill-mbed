
	istp_alm テストシート

----------------------------------------------------------------------
 TTSP
     TOPPERS Test Suite Package

 Copyright (C) 2009-2011 by Center for Embedded Computing Systems
             Graduate School of Information Science, Nagoya Univ., JAPAN
 Copyright (C) 2009-2011 by Digital Craft Inc.
 Copyright (C) 2009-2011 by NEC Communication Systems, Ltd.
 Copyright (C) 2009-2011 by FUJISOFT INCORPORATED
 Copyright (C) 2009-2010 by Mitsuhiro Matsuura

 上記著作権者は，以下の (1)〜(3) の条件を満たす場合に限り，本ドキュメ
 ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
     および下記の無保証規定が，そのままの形でドキュメント中に含まれて
     いること．
 (2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
     を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
     ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
     りではない．
 (3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
     からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
     本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
     く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

 本ドキュメントは，無保証で提供されているものである．上記著作権者およ
 びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
 る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
 により直接的または間接的に生じたいかなる損害に関しても，その責任を負
 わない．

 $Id: istp_alm.txt 2 2012-05-09 02:23:52Z nces-shigihara $
----------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

0. API仕様

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

stp_alm		アラームハンドラの動作停止〔T〕
istp_alm	アラームハンドラの動作停止〔I〕

【C言語API】
	ER ercd = stp_alm(ID almid)
	ER ercd = istp_alm(ID almid)

【パラメータ】
	ID			almid		対象アラームハンドラのID番号

【リターンパラメータ】
	ER			ercd		正常終了（E_OK）またはエラーコード

【エラーコード】
	E_CTX			コンテキストエラー（非タスクコンテキストからの呼出
					し：stp_almの場合，タスクコンテキストからの呼出し：
					istp_almの場合，CPUロック状態からの呼出し）
	E_ID			不正ID番号（almidが不正）
	E_NOEXS〔D〕	オブジェクト未登録（対象アラームハンドラが未登録）
	E_OACV〔P〕		オブジェクトアクセス違反（対象アラームハンドラに対
					する通常操作2が許可されていない：stp_almの場合）

【機能】

almidで指定したアラームハンドラ（対象アラームハンドラ）を動作停止する．
具体的な振舞いは以下の通り．

対象アラームハンドラが動作している状態であれば，動作していない状態とな
る．対象アラームハンドラが動作していない状態であれば，何も行われずに正
常終了する．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

1. 仕様ベースのブラックボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.1. エラー条件のテストケース(FMP)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(F-a) 他プロセッサがディスパッチ保留状態ではないとき，対象アラームハン
      ドラを自プロセッサが不正なコンテキスト状態で呼出す場合．

      (F-a-1) 対象アラームハンドラが他プロセッサに割り付けられているとき，

              (F-a-1-1) タスクコンテキストから呼び出して，
                        E_CTXエラーが返ること．(ASP:a-1，EX_OTHER_PRC)

              (F-a-1-2) CPUロック状態で呼び出して，
                        E_CTXエラーが返ること．(ASP:a-2，EX_OTHER_PRC)

              (F-a-1-3) スピンロック取得中に呼び出して，
                        E_CTXエラーが返ること．(ASP:a，EX_NEW_STATE)

      (F-a-2) 対象アラームハンドラが自プロセッサに割り付けられているとき，
              スピンロック取得中に呼び出して，E_CTXエラーが返ること．
              (ASP:a，EX_NEW_STATE)

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.2. 正常条件のテストケース(FMP)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(F-b) 他プロセッサに割り付けられている対象アラームハンドラが動作してい
      る状態であれば，対象アラームハンドラを起動するシステム時刻が設定
      解除され，動作していない状態となること．(ASP:d，EX_OTHER_PRC)

(F-c) 他プロセッサに割り付けられている対象アラームハンドラが動作してい
      ない状態であれば，何も行われずに正常終了すること．
      (ASP:e，EX_OTHER_PRC)


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

2. ソースコードの条件網羅確認

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.1. ソースコード
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ER
istp_alm(ID almid)
{
	ALMCB	*p_almcb;
	ER		ercd;
	PCB		*p_pcb;

	LOG_ISTP_ALM_ENTER(almid);
	CHECK_INTCTX_UNL();
	CHECK_ALMID(almid);
	p_almcb = get_almcb(almid);

	i_lock_cpu();
	p_pcb = i_acquire_tsk_lock_alm(p_almcb);
	if (p_almcb->almsta) {
		p_almcb->almsta = false;
		tmevtb_dequeue(p_almcb->p_pcb->p_tevtcb, &(p_almcb->tmevtb));
	}	
	ercd = E_OK;
	release_tsk_lock(p_pcb);
	i_unlock_cpu();

  error_exit:
	LOG_ISTP_ALM_LEAVE(ercd);
	return(ercd);
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.2. マクロを展開したAPIと呼び出す内部関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[A] istp_alm

00 : ER
01 : istp_alm(ID almid)
02 : {
03 : 	ALMCB	*p_almcb;
04 : 	ER		ercd;
05 : 	PCB		*p_pcb;
06 : 
07 : 	if (!sense_intctx_unl()) {
08 : 		ercd = E_CTX;
09 : 		goto error_exit;
10 : 	}
11 : 	if (!(TMIN_ALMID <= (almid) && (almid) <= tmax_almid)) {
12 : 		ercd = E_ID;
13 : 		goto error_exit;
14 : 	}
15 : 	p_almcb = p_almcb_table[(uint_t)((almid) - TMIN_ALMID)];
16 : 
17 : 	i_lock_cpu();
18 : 	p_pcb = i_acquire_tsk_lock_alm(p_almcb);
19 : 	if (p_almcb->almsta) {
20 : 		p_almcb->almsta = false;
21 : 		tmevtb_dequeue(p_almcb->p_pcb->p_tevtcb, &(p_almcb->tmevtb));
22 : 	}	
23 : 	ercd = E_OK;
24 : 	release_tsk_lock(p_pcb);
25 : 	i_unlock_cpu();
26 : 
27 :   error_exit:
28 : 	return(ercd);
29 : }

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.3. 条件式
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(A1) 07 : !sense_intctx_unl()
(A2) 11 : TMIN_ALMID <= (almid)
(A3) 11 : (almid) <= tmax_almid
(A4) 19 : p_almcb->almsta

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.4. 条件網羅の確認
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

          (A1) (A2) (A3) (A4)
(a-1)      T    D    D    D
(a-2)      T    D    D    D
(b-1)      F    F   D/T   D
(b-2)      F    T    F    D
(c)        F    T    T    T
(d)        F    T    T    F
(F-a-1-1)  T    D    D    D
(F-a-1-2)  T    D    D    D
(F-a-1-3)  T    D    D    D
(F-a-2)    T    D    D    D
(F-b)      F    T    T    T
(F-c)      F    T    T    F
-----------------------------
網羅       O    O    O    O


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

3. ホワイトボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
必要なし．



以上．
