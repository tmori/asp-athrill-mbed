
	psnd_dtq テストシート

----------------------------------------------------------------------
 TTSP
     TOPPERS Test Suite Package

 Copyright (C) 2009-2011 by Center for Embedded Computing Systems
             Graduate School of Information Science, Nagoya Univ., JAPAN
 Copyright (C) 2009-2011 by Digital Craft Inc.
 Copyright (C) 2009-2011 by NEC Communication Systems, Ltd.
 Copyright (C) 2009-2011 by FUJISOFT INCORPORATED
 Copyright (C) 2009-2010 by Mitsuhiro Matsuura

 上記著作権者は，以下の (1)〜(3) の条件を満たす場合に限り，本ドキュメ
 ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
     および下記の無保証規定が，そのままの形でドキュメント中に含まれて
     いること．
 (2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
     を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
     ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
     りではない．
 (3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
     からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
     本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
     く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

 本ドキュメントは，無保証で提供されているものである．上記著作権者およ
 びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
 る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
 により直接的または間接的に生じたいかなる損害に関しても，その責任を負
 わない．

 $Id: psnd_dtq.txt 2 2012-05-09 02:23:52Z nces-shigihara $
----------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

0. API仕様

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

snd_dtq		データキューへの送信〔T〕
psnd_dtq	データキューへの送信（ポーリング）〔T〕
ipsnd_dtq	データキューへの送信（ポーリング）〔I〕
tsnd_dtq	データキューへの送信（タイムアウト付き）〔T〕

【C言語API】
	ER ercd = snd_dtq(ID dtqid, intptr_t data)
	ER ercd = psnd_dtq(ID dtqid, intptr_t data)
	ER ercd = ipsnd_dtq(ID dtqid, intptr_t data)
	ER ercd = tsnd_dtq(ID dtqid, intptr_t data, TMO tmout)

【パラメータ】
	ID			dtqid		対象データキューのID番号
	intptr_t	data		送信データ
	TMO			tmout		タイムアウト時間（tsnd_dtqの場合）

【リターンパラメータ】
	ER			ercd		正常終了（E_OK）またはエラーコード

【エラーコード】
	E_CTX			コンテキストエラー（非タスクコンテキストからの呼出
					し：ipsnd_dtqを除く，タスクコンテキストからの呼出し：
					ipsnd_dtqの場合，CPUロック状態からの呼出し，ディス
					パッチ保留状態からの呼出し：snd_dtqとtsnd_dtqの場合）
	E_NOSPT			未サポート機能（制約タスクからの呼出し：snd_dtqと
					tsnd_dtqの場合）
	E_ID			不正ID番号（dtqidが不正）
	E_PAR			パラメータエラー（tmoutが不正：tsnd_dtqの場合）
	E_NOEXS〔D〕	オブジェクト未登録（対象データキューが未登録）
	E_OACV〔P〕		オブジェクトアクセス違反（対象データキューに対する
					通常操作1が許可されていない：ipsnd_dtqを除く）
	E_TMOUT			ポーリング失敗またはタイムアウト（snd_dtqを除く）
	E_RLWAI			待ち禁止状態または待ち状態の強制解除（snd_dtqと
					tsnd_dtqの場合）
	E_DLT			待ちオブジェクトの削除または再初期化（snd_dtqと
					tsnd_dtqの場合）

【機能】

dtqidで指定したデータキュー（対象データキュー）に，dataで指定したデータ
を送信する．具体的な振舞いは以下の通り．

対象データキューの受信待ち行列にタスクが存在する場合には，受信待ち行列
の先頭のタスクが，dataで指定したデータを受信し，待ち解除される．待ち解
除されたタスクには，待ち状態となったサービスコールからE_OKが返る．

対象データキューの受信待ち行列にタスクが存在せず，データキュー管理領域
にデータを格納するスペースがある場合には，dataで指定したデータが，FIFO
順でデータキュー管理領域に格納される．

対象データキューの受信待ち行列にタスクが存在せず，データキュー管理領域
にデータを格納するスペースがない場合には，自タスクはデータキューへの送
信待ち状態となり，対象データキューの送信待ち行列につながれる．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

１．仕様ベースのブラックボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.1. エラー条件のテストケース(FMP)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.2. 正常条件のテストケース(FMP)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

2. ソースコードの条件網羅確認

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.1. ソースコード
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ER
psnd_dtq(ID dtqid, intptr_t data)
{
	DTQCB	*p_dtqcb;
	bool_t	dspreq = false;
	ER		ercd;
	TCB		*p_tcb;
	PCB		*p_pcb;

	LOG_PSND_DTQ_ENTER(dtqid, data);
	CHECK_TSKCTX_UNL();
	CHECK_DTQID(dtqid);
	p_dtqcb = get_dtqcb(dtqid);

	t_lock_cpu();
  retry:
	t_acquire_obj_lock(&GET_OBJLOCK(p_dtqcb));
	/* この間は繰り返し実行されるため，非破壊コードでなければならない． */
	if (!queue_empty(&(p_dtqcb->rwait_queue))) {
		p_tcb = (TCB *)(p_dtqcb->rwait_queue.p_next);
		if ((p_pcb = t_acquire_nested_tsk_lock(p_tcb, &GET_OBJLOCK(p_dtqcb))) == NULL){
			goto retry;
		}
		queue_delete((QUEUE *) p_tcb);
		p_tcb->winfo_obj.dtq.data = data;
		if (wait_complete(p_tcb)) {
			dspreq = dispatch_request(p_pcb);
		}
		release_nested_tsk_lock(p_pcb);
		ercd = E_OK;
	}
	else if (p_dtqcb->count < p_dtqcb->p_dtqinib->dtqcnt) {
		enqueue_data(p_dtqcb, data);
		ercd = E_OK;
	}
	else {
		ercd = E_TMOUT;
	}
	release_obj_lock(&GET_OBJLOCK(p_dtqcb));
	if (dspreq) {
		dispatch();
	}
	t_unlock_cpu();

  error_exit:
	LOG_PSND_DTQ_LEAVE(ercd);
	return(ercd);
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.2. マクロを展開したAPIと呼び出す内部関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[A] psnd_dtq

00 : ER
01 : psnd_dtq(ID dtqid, intptr_t data)
02 : {
03 : 	DTQCB	*p_dtqcb;
04 : 	bool_t	dspreq = false;
05 : 	ER		ercd;
06 : 	TCB		*p_tcb;
07 : 	PCB		*p_pcb;
08 : 
10 : 	if (!sense_tskctx_unl()) {
11 : 		ercd = E_CTX;
12 : 		goto error_exit;
13 : 	}
14 : 	if (!(TMIN_DTQID <= (dtqid) && (dtqid) <= tmax_dtqid)) {
15 : 		ercd = E_ID;
16 : 		goto error_exit;
17 : 	}
18 : 	p_dtqcb = p_dtqcb_table[(uint_t)((dtqid) - TMIN_DTQID)];
19 : 
20 : 	t_lock_cpu();
21 :   retry:
22 : 	t_acquire_obj_lock(&GET_OBJLOCK(p_dtqcb));
23 : 	/* この間は繰り返し実行されるため，非破壊コードでなければならない． */
24 : 	if (!queue_empty(&(p_dtqcb->rwait_queue))) {
25 : 		p_tcb = (TCB *)(p_dtqcb->rwait_queue.p_next);
26 : 		if ((p_pcb = t_acquire_nested_tsk_lock(p_tcb, &GET_OBJLOCK(p_dtqcb))) == NULL){
27 : 			goto retry;
28 : 		}
29 : 		queue_delete((QUEUE *) p_tcb);
30 : 		p_tcb->winfo_obj.dtq.data = data;
31 : 		if (wait_complete(p_tcb)) {
32 : 			dspreq = dispatch_request(p_pcb);
33 : 		}
34 : 		release_nested_tsk_lock(p_pcb);
35 : 		ercd = E_OK;
36 : 	}
37 : 	else if (p_dtqcb->count < p_dtqcb->p_dtqinib->dtqcnt) {
38 : 		enqueue_data(p_dtqcb, data);
39 : 		ercd = E_OK;
40 : 	}
41 : 	else {
43 : 		ercd = E_TMOUT;
44 : 	}
45 : 	release_obj_lock(&GET_OBJLOCK(p_dtqcb));
46 : 	if (dspreq) {
47 : 		dispatch();
48 : 	}
49 : 	t_unlock_cpu();
50 : 
51 :   error_exit:
52 : 	return(ercd);
53 : }

[B] enqueue_data

00 : void
01 : enqueue_data(DTQCB *p_dtqcb, intptr_t data)
02 : {
03 : 	(p_dtqcb->p_dtqinib->p_dtqmb + p_dtqcb->tail)->data = data;
04 : 	p_dtqcb->count++;
05 : 	p_dtqcb->tail++;
06 : 	if (p_dtqcb->tail >= p_dtqcb->p_dtqinib->dtqcnt) {
07 : 		p_dtqcb->tail = 0U;
08 : 	}
09 : }

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.3. 条件式
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(A1) 10 : !sense_tskctx_unl()
(A2) 14 : TMIN_DTQID <= (dtqid)
(A3) 14 : (dtqid) <= tmax_dtqid
(A4) 24 : !queue_empty(&(p_dtqcb->rwait_queue))
(A5) 31 : wait_complete(p_tcb)
(A6) 37 : p_dtqcb->count < p_dtqcb->p_dtqinib->dtqcnt
(A7) 46 : dspreq

(B1) 06 : p_dtqcb->tail >= p_dtqcb->p_dtqinib->dtqcnt

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.4. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

             (A1) (A2) (A3) (A4) (A5) (A6) (A7) (B1)
(a-1)         T    D    D    D    D    D    D    D
(a-2)         T    D    D    D    D    D    D    D
(b-1)         F    F   D/T   D    D    D    D    D
(b-2)         F    T    F    D    D    D    D    D
(c)           F    T    T    F    D    F    F    D
(d-1-1-1)     F    T    T    T    T    D    T    D
(d-1-1-2)     F    T    T    T    F    D    F    D
(d-1-1-3)     F    T    T    T    F    D    F    D
(d-1-2)       F    T    T    T    F    D    F    D
(d-1-3)       F    T    T    T    F    D    F    D
(d-1-4)       F    T    T    T    F    D    F    D
(d-2-1-1)     F    T    T    T    T    D    T    D
(d-2-1-2)     F    T    T    T    F    D    F    D
(d-2-1-3)     F    T    T    T    F    D    F    D
(d-2-2)       F    T    T    T    F    D    F    D
(d-2-3)       F    T    T    T    F    D    F    D
(d-2-4)       F    T    T    T    F    D    F    D
(e-1-1)       F    T    T    F    D    T    F    F
(e-1-2)       F    T    T    F    D    T    F    T
(F-a)         T    D    D    D    D    D    D    D
(F-b-1-1-1)   F    T    T    T    T    D    F    D
(F-b-1-1-2)   F    T    T    T    F    D    F    D
(F-b-1-1-3)   F    T    T    T    F    D    F    D
(F-b-1-1-4)   F    T    T    T    T    D    F    D
(F-b-1-1-5)   F    T    T    T    T    D    F    D
(F-b-1-1-6)   F    T    T    T    T    D    F    D
(F-b-1-2)     F    T    T    T    F    D    F    D
(F-b-1-3)     F    T    T    T    F    D    F    D
(F-b-1-4)     F    T    T    T    F    D    F    D
(F-b-1-5-1)   F    T    T    T    T    D    F    D
(F-b-1-5-2)   F    T    T    T    T    D    F    D
(F-b-1-5-3)   F    T    T    T    F    D    F    D
(F-b-2-1-1)   F    T    T    T    T    D    F    D
(F-b-2-1-2)   F    T    T    T    F    D    F    D
(F-b-2-1-3)   F    T    T    T    F    D    F    D
(F-b-2-1-4)   F    T    T    T    T    D    F    D
(F-b-2-1-5)   F    T    T    T    T    D    F    D
(F-b-2-1-6)   F    T    T    T    T    D    F    D
(F-b-2-2)     F    T    T    T    F    D    F    D
(F-b-2-3)     F    T    T    T    F    D    F    D
(F-b-2-4)     F    T    T    T    F    D    F    D
(F-b-2-5-1)   F    T    T    T    T    D    F    D
(F-b-2-5-2)   F    T    T    T    T    D    F    D
(F-b-2-5-3)   F    T    T    T    F    D    F    D
----------------------------------------------------
網羅          O    O    O    O    O    O    O    O


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

3. ホワイトボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
必要なし．


以上．
