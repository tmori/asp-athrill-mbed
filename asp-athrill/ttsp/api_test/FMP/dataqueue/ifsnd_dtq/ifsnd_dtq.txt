
	ifsnd_dtq テストシート

----------------------------------------------------------------------
 TTSP
     TOPPERS Test Suite Package

 Copyright (C) 2009-2011 by Center for Embedded Computing Systems
             Graduate School of Information Science, Nagoya Univ., JAPAN
 Copyright (C) 2009-2011 by Digital Craft Inc.
 Copyright (C) 2009-2011 by NEC Communication Systems, Ltd.
 Copyright (C) 2009-2011 by FUJISOFT INCORPORATED
 Copyright (C) 2009-2010 by Mitsuhiro Matsuura

 上記著作権者は，以下の (1)〜(3) の条件を満たす場合に限り，本ドキュメ
 ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
     および下記の無保証規定が，そのままの形でドキュメント中に含まれて
     いること．
 (2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
     を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
     ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
     りではない．
 (3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
     からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
     本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
     く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

 本ドキュメントは，無保証で提供されているものである．上記著作権者およ
 びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
 る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
 により直接的または間接的に生じたいかなる損害に関しても，その責任を負
 わない．

 $Id: ifsnd_dtq.txt 2 2012-05-09 02:23:52Z nces-shigihara $
----------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

0. API仕様

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

fsnd_dtq	データキューへの強制送信〔T〕
ifsnd_dtq	データキューへの強制送信〔I〕

【C言語API】
	ER ercd = fsnd_dtq(ID dtqid, intptr_t data)
	ER ercd = ifsnd_dtq(ID dtqid, intptr_t data)

【パラメータ】
	ID			dtqid		対象データキューのID番号
	intptr_t	data		送信データ

【リターンパラメータ】
	ER			ercd		正常終了（E_OK）またはエラーコード

【エラーコード】
	E_CTX			コンテキストエラー（非タスクコンテキストからの呼出
					し：fsnd_dtqの場合，タスクコンテキストからの呼出し：
					ifsnd_dtqの場合，CPUロック状態からの呼出し）
	E_ID			不正ID番号（dtqidが不正）
	E_NOEXS〔D〕	オブジェクト未登録（対象データキューが未登録）
	E_OACV〔P〕		オブジェクトアクセス違反（対象データキューに対する
					通常操作1が許可されていない：fsnd_dtqの場合）
	E_ILUSE			サービスコール不正使用（対象データキューのデータキュー
					管理領域のサイズが0）

【機能】

dtqidで指定したデータキュー（対象データキュー）に，dataで指定したデータ
を強制送信する．具体的な振舞いは以下の通り．

対象データキューの受信待ち行列にタスクが存在する場合には，受信待ち行列
の先頭のタスクが，dataで指定したデータを受信し，待ち解除される．待ち解
除されたタスクには，待ち状態となったサービスコールからE_OKが返る．

対象データキューの受信待ち行列にタスクが存在せず，データキュー管理領域
にデータを格納するスペースがある場合には，dataで指定したデータが，FIFO
順でデータキュー管理領域に格納される．

対象データキューの受信待ち行列にタスクが存在せず，データキュー管理領域
にデータを格納するスペースがない場合には，データキュー管理領域の先頭に
格納されたデータを削除し，空いたスペースを用いて，dataで指定したデータ
が，FIFO順でデータキュー管理領域に格納される．

対象データキューのデータキュー管理領域のサイズが0の場合には，E_ILUSEエ
ラーとなる．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

１．仕様ベースのブラックボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.1. エラー条件のテストケース(FMP)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.2. 正常条件のテストケース(FMP)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

2. ソースコードの条件網羅確認

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.1. ソースコード
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ER
ifsnd_dtq(ID dtqid, intptr_t data)
{
	DTQCB	*p_dtqcb;
	ER		ercd;
	TCB		*p_tcb;
	PCB		*p_pcb;

	LOG_IFSND_DTQ_ENTER(dtqid, data);
	CHECK_INTCTX_UNL();
	CHECK_DTQID(dtqid);
	p_dtqcb = get_dtqcb(dtqid);
	CHECK_ILUSE(p_dtqcb->p_dtqinib->dtqcnt > 0U);

	i_lock_cpu();

  retry:
	i_acquire_obj_lock(&GET_OBJLOCK(p_dtqcb));
	/*
	 * この間は繰り返し実行されるため，非破壊コードでなければならない．
	 */
	if (!queue_empty(&(p_dtqcb->rwait_queue))) {
		p_tcb = (TCB *)(p_dtqcb->rwait_queue.p_next);
		if ((p_pcb = i_acquire_nested_tsk_lock(p_tcb, &GET_OBJLOCK(p_dtqcb))) == NULL){
			goto retry;
		}
		queue_delete((QUEUE *) p_tcb);
		p_tcb->winfo_obj.dtq.data = data;
		if (wait_complete(p_tcb)) {
			if (dispatch_request(p_pcb)){
				(get_my_p_pcb())->reqflg = true;
			}
		}
		release_nested_tsk_lock(p_pcb);
		i_unlock_cpu();
	}
	else {
		force_enqueue_data(p_dtqcb, data);
	}
	ercd = E_OK;
	release_obj_lock(&GET_OBJLOCK(p_dtqcb));
	i_unlock_cpu();

  error_exit:
	LOG_IFSND_DTQ_LEAVE(ercd);
	return(ercd);
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.2. マクロを展開したAPIと呼び出す内部関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[A] ifsnd_dtq

00 : ER
01 : ifsnd_dtq(ID dtqid, intptr_t data)
02 : {
03 : 	DTQCB	*p_dtqcb;
04 : 	ER		ercd;
05 : 	TCB		*p_tcb;
06 : 	PCB		*p_pcb;
07 : 
08 : 	if (!sense_intctx_unl()) {
09 : 		ercd = E_CTX;
10 : 		goto error_exit;
11 : 	}
12 : 	if (!(TMIN_DTQID <= (dtqid) && (dtqid) <= tmax_dtqid)) {
13 : 		ercd = E_ID;
14 : 		goto error_exit;
15 : 	}
16 : 	p_dtqcb = p_dtqcb_table[(uint_t)((dtqid) - TMIN_DTQID)];
17 : 	if (!(p_dtqcb->p_dtqinib->dtqcnt > 0U)) {
18 : 		ercd = E_ILUSE;
19 : 		goto error_exit;
20 : 	}
21 : 
22 : 	i_lock_cpu();
23 : 
24 :   retry:
25 : 	i_acquire_obj_lock(&GET_OBJLOCK(p_dtqcb));
26 : 	/*
27 : 	 * この間は繰り返し実行されるため，非破壊コードでなければならない
28 : 	 */
29 : 	if (!queue_empty(&(p_dtqcb->rwait_queue))) {
30 : 		p_tcb = (TCB *)(p_dtqcb->rwait_queue.p_next);
31 : 		if ((p_pcb = i_acquire_nested_tsk_lock(p_tcb, &GET_OBJLOCK(p_dtqcb))) == NULL){
32 : 			goto retry;
33 : 		}
34 : 		queue_delete((QUEUE *) p_tcb);
35 : 		p_tcb->winfo_obj.dtq.data = data;
36 : 		if (wait_complete(p_tcb)) {
37 : 			if (dispatch_request(p_pcb)){
38 : 				(get_my_p_pcb())->reqflg = true;
39 : 			}
40 : 		}
41 : 		release_nested_tsk_lock(p_pcb);
42 : 		i_unlock_cpu();
43 : 	}
44 : 	else {
45 : 		force_enqueue_data(p_dtqcb, data);
46 : 	}
47 : 	ercd = E_OK;
48 : 	release_obj_lock(&GET_OBJLOCK(p_dtqcb));
49 : 	i_unlock_cpu();
50 : 
51 :   error_exit:
52 : 	return(ercd);
53 : }


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.3. 条件式
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(A1) 08 : !sense_intctx_unl()
(A2) 12 : TMIN_DTQID <= (dtqid)
(A3) 12 : (dtqid) <= tmax_dtqid
(A4) 17 : !(p_dtqcb->p_dtqinib->dtqcnt > 0U)
(A5) 29 : !queue_empty(&(p_dtqcb->rwait_queue))
(A6) 36 : wait_complete(p_tcb)
(A7) 37 : dispatch_request(p_pcb)

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.4. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

            (A1) (A2) (A3) (A4) (A5) (A6) (A7)
(a-1)        T    D    D    D    D    D    D
(a-2)        T    D    D    D    D    D    D
(b-1)        F    F   D/T   D    D    D    D
(b-2)        F    T    F    D    D    D    D
(c)          F    T    T    T    D    D    D
(d-1-1-1)    F    T    T    F    T    T    T
(d-1-1-2)    F    T    T    F    T    F    D
(d-1-1-3)    F    T    T    F    T    F    D
(d-1-2)      F    T    T    F    T    F    D
(d-1-3)      F    T    T    F    T    F    D
(d-1-4)      F    T    T    F    T    F    D
(d-1-5)      F    T    T    F    T    T    T
(d-2-1-1)    F    T    T    F    T    T    T
(d-2-1-2)    F    T    T    F    T    F    D
(d-2-1-3)    F    T    T    F    T    F    D
(d-2-2)      F    T    T    F    T    F    D
(d-2-3)      F    T    T    F    T    F    D
(d-2-4)      F    T    T    F    T    F    D
(d-2-5)      F    T    T    F    T    T    T
(e-1-1)      F    T    T    F    F    D    D
(e-1-2)      F    T    T    F    F    D    D
(e-2-1)      F    T    T    F    F    D    D
(e-2-2)      F    T    T    F    F    D    D
(F-a)        T    D    D    D    D    D    D
(F-b-1-1-1)  F    T    T    F    T    T    F
(F-b-1-1-2)  F    T    T    F    T    F    D
(F-b-1-1-3)  F    T    T    F    T    F    D
(F-b-1-1-4)  F    T    T    F    T    T    F
(F-b-1-1-5)  F    T    T    F    T    T    F
(F-b-1-1-6)  F    T    T    F    T    T    F
(F-b-1-2)    F    T    T    F    T    F    D
(F-b-1-3)    F    T    T    F    T    F    D
(F-b-1-4)    F    T    T    F    T    F    D
(F-b-1-5-1)  F    T    T    F    T    T    F
(F-b-1-5-2)  F    T    T    F    T    T    F
(F-b-1-5-3)  F    T    T    F    T    F    D
(F-b-2-1-1)  F    T    T    F    T    T    F
(F-b-2-1-2)  F    T    T    F    T    F    D
(F-b-2-1-3)  F    T    T    F    T    F    D
(F-b-2-1-4)  F    T    T    F    T    T    F
(F-b-2-1-5)  F    T    T    F    T    T    F
(F-b-2-1-6)  F    T    T    F    T    T    F
(F-b-2-2)    F    T    T    F    T    F    D
(F-b-2-3)    F    T    T    F    T    F    D
(F-b-2-4)    F    T    T    F    T    F    D
(F-b-2-5-1)  F    T    T    F    T    T    F
(F-b-2-5-2)  F    T    T    F    T    T    F
(F-b-2-5-3)  F    T    T    F    T    F    D
----------------------------------------------
網羅         O    O    O    O    O    O    O


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

3. ホワイトボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
必要なし．



以上．
