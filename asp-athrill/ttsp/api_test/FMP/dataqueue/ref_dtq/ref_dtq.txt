
	ref_dtq テストシート

----------------------------------------------------------------------
 TTSP
     TOPPERS Test Suite Package

 Copyright (C) 2009-2011 by Center for Embedded Computing Systems
             Graduate School of Information Science, Nagoya Univ., JAPAN
 Copyright (C) 2009-2011 by Digital Craft Inc.
 Copyright (C) 2009-2011 by NEC Communication Systems, Ltd.
 Copyright (C) 2009-2011 by FUJISOFT INCORPORATED
 Copyright (C) 2009-2010 by Mitsuhiro Matsuura

 上記著作権者は，以下の (1)〜(3) の条件を満たす場合に限り，本ドキュメ
 ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
     および下記の無保証規定が，そのままの形でドキュメント中に含まれて
     いること．
 (2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
     を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
     ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
     りではない．
 (3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
     からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
     本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
     く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

 本ドキュメントは，無保証で提供されているものである．上記著作権者およ
 びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
 る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
 により直接的または間接的に生じたいかなる損害に関しても，その責任を負
 わない．

 $Id: ref_dtq.txt 2 2012-05-09 02:23:52Z nces-shigihara $
----------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

0. API仕様

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

ref_dtq		データキューの状態参照〔T〕

【C言語API】
	ER ercd = ref_dtq(ID dtqid, T_RDTQ *pk_rdtq)

【パラメータ】
	ID			dtqid		対象データキューのID番号
	T_RDTQ *	pk_rdtq		データキューの現在状態を入れるパケットへの
							ポインタ

【リターンパラメータ】
	ER			ercd		正常終了（E_OK）またはエラーコード

　＊データキューの現在状態（パケットの内容）
	ID			stskid		データキューの送信待ち行列の先頭のタスクの
							ID番号
	ID			rtskid		データキューの受信待ち行列の先頭のタスクの
							ID番号
	uint_t		sdtqcnt		データキュー管理領域に格納されているデータ
							の数

【エラーコード】
	E_CTX			コンテキストエラー（非タスクコンテキストからの呼出
					し，CPUロック状態からの呼出し）
	E_ID			不正ID番号（dtqidが不正）
	E_NOEXS〔D〕	オブジェクト未登録（対象データキューが未登録）
	E_OACV〔P〕		オブジェクトアクセス違反（対象データキューに対する
					参照操作が許可されていない）
	E_MACV〔P〕		メモリアクセス違反（pk_rdtqが指すメモリ領域への書込
					みアクセスが許可されていない）

【機能】

dtqidで指定したデータキュー（対象データキュー）の現在状態を参照する．参
照した現在状態は，pk_rdtqで指定したパケットに返される．

対象データキューの送信待ち行列にタスクが存在しない場合，stskidには
TSK_NONE（＝0）が返る．また，受信待ち行列にタスクが存在しない場合，
rtskidにはTSK_NONE（＝0）が返る．

【使用上の注意】

ref_dtqはデバッグ時向けの機能であり，その他の目的に使用することは推奨し
ない．これは，ref_dtqを呼び出し，対象データキューの現在状態を参照した直
後に割込みが発生した場合，ref_dtqから戻ってきた時には対象データキューの
状態が変化している可能性があるためである．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

1. 仕様ベースのブラックボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.1. エラー条件のテストケース(FMP)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(F-a) ディスパッチ保留状態のスピンロック取得中から呼び出して，E_CTX
      エラーが返ること．(ASP:a，EX_NEW_STATE)

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.2. 正常条件のテストケース(FMP)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(F-b) 対象データキューの現在状態がpk_rdtqで指定したパケットに格納され，
      E_OKが返ること．

      (F-b-1) 対象データキューの送信待ち行列に他プロセッサに割り付けら
              れたタスクが存在する場合，stskidにデータキューの送信待ち
              行列の先頭のタスクのID番号が返る．rtskidにはTSK_NONE(=0)
              が返る．(ASP:c-1，EX_OTHER_PRC)

      (F-b-2) 対象データキューの受信待ち行列に他プロセッサに割り付けら
              れたタスクが存在する場合，rtskidにデータキューの受信待ち
              行列の先頭のタスクのID番号が返る．stskidにはTSK_NONE(=0)
              が返る．(ASP:c-2，EX_OTHER_PRC)


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

2. ソースコードの条件網羅確認

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.1. ソースコード
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

ER
ref_dtq(ID dtqid, T_RDTQ *pk_rdtq)
{
	DTQCB	*p_dtqcb;
	ER		ercd;

	LOG_REF_DTQ_ENTER(dtqid, pk_rdtq);
	CHECK_TSKCTX_UNL();
	CHECK_DTQID(dtqid);
	p_dtqcb = get_dtqcb(dtqid);

	t_lock_cpu();
	t_acquire_obj_lock(&GET_OBJLOCK(p_dtqcb));
	pk_rdtq->stskid = wait_tskid(&(p_dtqcb->swait_queue));
	pk_rdtq->rtskid = wait_tskid(&(p_dtqcb->rwait_queue));
	pk_rdtq->sdtqcnt = p_dtqcb->count;
	ercd = E_OK;
	release_obj_lock(&GET_OBJLOCK(p_dtqcb));
	t_unlock_cpu();

  error_exit:
	LOG_REF_DTQ_LEAVE(ercd, pk_rdtq);
	return(ercd);
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.2. マクロを展開したAPIと呼び出す内部関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[A] ref_dtq

00 : ER
01 : ref_dtq(ID dtqid, T_RDTQ *pk_rdtq)
02 : {
03 :    DTQCB           *p_dtqcb;
04 :    ER              ercd;
05 :     
06 :	if (!sense_tskctx_unl()) {
07 :		ercd = E_CTX;
08 :    	goto error_exit;
09 :	}
10 :    if (!(TMIN_DTQID <= (dtqid) && (dtqid) <= tmax_dtqid)) {
11 :    	ercd = E_ID;
12 :    	goto error_exit;
13 :    }
14 :    p_dtqcb = p_dtqcb_table[(uint_t)((dtqid) - TMIN_DTQID)];
15 :
16 :    t_lock_cpu();
17 :    t_acquire_obj_lock(&GET_OBJLOCK(p_dtqcb));
18 :    pk_rdtq->stskid = wait_tskid(&(p_dtqcb->swait_queue));
19 :    pk_rdtq->rtskid = wait_tskid(&(p_dtqcb->rwait_queue));
20 :    pk_rdtq->sdtqcnt = p_dtqcb->count;
21 :    ercd = E_OK;
22 :    release_obj_lock(&GET_OBJLOCK(p_dtqcb));
23 :    t_unlock_cpu();
24 :
25 :   error_exit:
26 :    return(ercd);
27 : }

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.3. 条件式
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(A1) 06 : !sense_tskctx_unl
(A2) 10 : TMIN_DTQID <= (dtqid)
(A3) 10 : (dtqid) <= tmax_dtqid 

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.4. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
         (A1) (A2) (A3)
(a-1)     T    D    D
(a-2)     T    D    D
(b-1)     F    F   D/T
(b-2)     F    T    F
(c-1)     F    T    T
(c-2)     F    T    T
(F-a)     T    D    D
(F-b-1)   F    T    T
(F-b-2)   F    T    T
-----------------------
網羅      O    O    O


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

3. ホワイトボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
必要なし．



以上．
