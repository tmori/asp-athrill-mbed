
	isig_sem テストシート

----------------------------------------------------------------------
 TTSP
     TOPPERS Test Suite Package

 Copyright (C) 2009-2011 by Center for Embedded Computing Systems
             Graduate School of Information Science, Nagoya Univ., JAPAN
 Copyright (C) 2009-2011 by Digital Craft Inc.
 Copyright (C) 2009-2011 by NEC Communication Systems, Ltd.
 Copyright (C) 2009-2011 by FUJISOFT INCORPORATED
 Copyright (C) 2009-2010 by Mitsuhiro Matsuura

 上記著作権者は，以下の (1)〜(3) の条件を満たす場合に限り，本ドキュメ
 ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
     および下記の無保証規定が，そのままの形でドキュメント中に含まれて
     いること．
 (2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
     を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
     ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
     りではない．
 (3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
     からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
     本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
     く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

 本ドキュメントは，無保証で提供されているものである．上記著作権者およ
 びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
 る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
 により直接的または間接的に生じたいかなる損害に関しても，その責任を負
 わない．

 $Id: isig_sem.txt 2 2012-05-09 02:23:52Z nces-shigihara $
----------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

0. API仕様

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

sig_sem		セマフォの資源の返却〔T〕
isig_sem	セマフォの資源の返却〔I〕

【C言語API】
	ER ercd = sig_sem(ID semid)
	ER ercd = isig_sem(ID semid)

【パラメータ】
	ID			semid		対象セマフォのID番号

【リターンパラメータ】
	ER			ercd		正常終了（E_OK）またはエラーコード

【エラーコード】
	E_CTX			コンテキストエラー（非タスクコンテキストからの呼出
					し：sig_semの場合，タスクコンテキストからの呼出し：
					isig_semの場合，CPUロック状態からの呼出し）
	E_ID			不正ID番号（semidが不正）
	E_NOEXS〔D〕	オブジェクト未登録（対象セマフォが未登録）
	E_OACV〔P〕		オブジェクトアクセス違反（対象セマフォに対する通常
					操作1が許可されていない：sig_semの場合）
	E_QOVR			キューイングオーバフロー（資源数が最大資源数に一致）

【機能】

semidで指定したセマフォ（対象セマフォ）に資源を返却する．具体的な振舞い
は以下の通り．

対象セマフォの待ち行列にタスクが存在する場合には，待ち行列の先頭のタス
クが待ち解除される．この時，待ち解除されたタスクが資源を獲得したことに
なるため，対象セマフォの資源数は変化しない．待ち解除されたタスクには，
待ち状態となったサービスコールからE_OKが返る．

待ち行列にタスクが存在しない場合には，対象セマフォの資源数に1が加えられ
る．資源数に1を加えるとそのセマフォの最大資源数を越える場合には，E_QOVR
エラーとなる．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

１．仕様ベースのブラックボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.1. エラー条件のテストケース(FMP)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.2. 正常条件のテストケース(FMP)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━



■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

2. ソースコードの条件網羅確認

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.1. ソースコード
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ER
isig_sem(ID semid)
{
	SEMCB	*p_semcb;
	TCB		*p_tcb;
	ER		ercd;
	PCB		*p_pcb;

	LOG_ISIG_SEM_ENTER(semid);
	CHECK_INTCTX_UNL();
	CHECK_SEMID(semid);
	p_semcb = get_semcb(semid);

	i_lock_cpu();
  retry:
	i_acquire_obj_lock(&GET_OBJLOCK(p_semcb));
	if (!queue_empty(&(p_semcb->wait_queue))) {
		/* この間は繰り返し実行されるため，非破壊コードでなければならない．*/
		p_tcb = (TCB *)(p_semcb->wait_queue.p_next);
		if ((p_pcb = i_acquire_nested_tsk_lock(p_tcb, &GET_OBJLOCK(p_semcb))) == NULL) {
			goto retry;
		}
		queue_delete((QUEUE *) p_tcb);
		if (wait_complete(p_tcb)) {
			if (dispatch_request(p_pcb)){
				(get_my_p_pcb())->reqflg = true;
			}
		}
		release_nested_tsk_lock(p_pcb);
		ercd = E_OK;
	}
	else if (p_semcb->semcnt < p_semcb->p_seminib->maxsem) {
		p_semcb->semcnt += 1;
		ercd = E_OK;
	}
	else {
		ercd = E_QOVR;
	}
	release_obj_lock(&GET_OBJLOCK(p_semcb));
	i_unlock_cpu();

  error_exit:
	LOG_ISIG_SEM_LEAVE(ercd);
	return(ercd);
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.2. マクロを展開したAPIと呼び出す内部関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[A] isig_sem

00 : ER
01 : isig_sem(ID semid)
02 : {
03 : 	SEMCB	*p_semcb;
04 : 	TCB		*p_tcb;
05 : 	ER		ercd;
06 : 	PCB		*p_pcb;
07 : 
08 : 	if (!sense_intctx_unl()) {
09 : 		ercd = E_CTX;
10 : 		goto error_exit;
11 : 	}
12 : 	if (!(TMIN_SEMID <= (semid) && (semid) <= tmax_semid)) {
13 : 		ercd = E_ID;
14 : 		goto error_exit;
15 : 	}
16 : 	p_semcb = p_semcb_table[(uint_t)((semid) - TMIN_SEMID)];
17 : 
18 : 	i_lock_cpu();
19 :   retry:
20 : 	i_acquire_obj_lock(&GET_OBJLOCK(p_semcb));
21 : 	if (!queue_empty(&(p_semcb->wait_queue))) {
22 : 		/* この間は繰り返し実行されるため，非破壊コードでなければならない．*/
23 : 		p_tcb = (TCB *)(p_semcb->wait_queue.p_next);
24 : 		if ((p_pcb = i_acquire_nested_tsk_lock(p_tcb, &GET_OBJLOCK(p_semcb))) == NULL) {
25 : 			goto retry;
26 : 		}
27 : 		queue_delete((QUEUE *) p_tcb);
28 : 		if (wait_complete(p_tcb)) {
29 : 			if (dispatch_request(p_pcb)){
30 : 				(get_my_p_pcb())->reqflg = true;
31 : 			}
32 : 		}
33 : 		release_nested_tsk_lock(p_pcb);
34 : 		ercd = E_OK;
35 : 	}
36 : 	else if (p_semcb->semcnt < p_semcb->p_seminib->maxsem) {
37 : 		p_semcb->semcnt += 1;
38 : 		ercd = E_OK;
39 : 	}
40 : 	else {
41 : 		ercd = E_QOVR;
42 : 	}
43 : 	release_obj_lock(&GET_OBJLOCK(p_semcb));
44 : 	i_unlock_cpu();
45 : 
46 :   error_exit:
47 : 	return(ercd);
48 : }

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.3. 条件式
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(A1) 08 : !sense_intctx_unl()
(A2) 12 : TMIN_SEMID <= (semid)
(A3) 12 : (semid) <= tmax_semid
(A4) 21 : !queue_empty(&(p_semcb->wait_queue))
(A5) 28 : wait_complete(p_tcb)
(A6) 29 : dispatch_request(p_pcb)
(A7) 36 : p_semcb->semcnt < p_semcb->p_seminib->maxsem

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.4. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

           (A1) (A2) (A3) (A4) (A5) (A6) (A7)
(a-1)       T    D    D    D    D    D    D
(a-2)       T    D    D    D    D    D    D
(b-1)       F    F   D/T   D    D    D    D
(b-2)       F    T    F    D    D    D    D
(c)         F    T    T    F    D    D    F
(d)         F    T    T    F    D    D    T
(e-1-1)     F    T    T    T    T    T    D
(e-1-2)     F    T    T    T    F    D    D
(e-1-3)     F    T    T    T    F    D    D
(e-2)       F    T    T    T    F    D    D
(e-3)       F    T    T    T    F    D    D
(e-4)       F    T    T    T    F    D    D
(e-5)       F    T    T    T    T    T    D
(f-1-1)     F    T    T    T    T    T    D
(f-1-2)     F    T    T    T    F    D    D
(f-1-3)     F    T    T    T    F    D    D
(f-2)       F    T    T    T    F    D    D
(f-3)       F    T    T    T    F    D    D
(f-4)       F    T    T    T    F    D    D
(f-5)       F    T    T    T    T    T    D
(F-a)       T    D    D    D    D    D    D
(F-b-1-1)   F    T    T    T    T    F    D
(F-b-1-2)   F    T    T    T    F    D    D
(F-b-1-3)   F    T    T    T    F    D    D
(F-b-1-4)   F    T    T    T    T    F    D
(F-b-1-5)   F    T    T    T    T    F    D
(F-b-1-6)   F    T    T    T    T    F    D
(F-b-2)     F    T    T    T    F    D    D
(F-b-3)     F    T    T    T    F    D    D
(F-b-4)     F    T    T    T    F    D    D
(F-b-5-1)   F    T    T    T    T    F    D
(F-b-5-2)   F    T    T    T    T    F    D
(F-b-5-3)   F    T    T    T    F    D    D
(F-c-1-1)   F    T    T    T    T    F    D
(F-c-1-2)   F    T    T    T    F    D    D
(F-c-1-3)   F    T    T    T    F    D    D
(F-c-1-4)   F    T    T    T    T    F    D
(F-c-1-5)   F    T    T    T    T    F    D
(F-c-1-6)   F    T    T    T    T    F    D
(F-c-2)     F    T    T    T    F    D    D
(F-c-3)     F    T    T    T    F    D    D
(F-c-4)     F    T    T    T    F    D    D
(F-c-5-1)   F    T    T    T    T    F    D
(F-c-5-2)   F    T    T    T    T    F    D
(F-c-5-3)   F    T    T    T    F    D    D
---------------------------------------------
網羅        O    O    O    O    O    O    O


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

3. ホワイトボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
必要なし．


以上．
