
	msta_cyc テストシート

----------------------------------------------------------------------
 TTSP
     TOPPERS Test Suite Package

 Copyright (C) 2009-2011 by Center for Embedded Computing Systems
             Graduate School of Information Science, Nagoya Univ., JAPAN
 Copyright (C) 2009-2011 by Digital Craft Inc.
 Copyright (C) 2009-2011 by NEC Communication Systems, Ltd.
 Copyright (C) 2009-2011 by FUJISOFT INCORPORATED
 Copyright (C) 2009-2010 by Mitsuhiro Matsuura

 上記著作権者は，以下の (1)〜(3) の条件を満たす場合に限り，本ドキュメ
 ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
     および下記の無保証規定が，そのままの形でドキュメント中に含まれて
     いること．
 (2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
     を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
     ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
     りではない．
 (3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
     からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
     本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
     く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

 本ドキュメントは，無保証で提供されているものである．上記著作権者およ
 びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
 る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
 により直接的または間接的に生じたいかなる損害に関しても，その責任を負
 わない．

 $Id: msta_cyc.txt 2 2012-05-09 02:23:52Z nces-shigihara $
----------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

0. API仕様

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

msta_cyc	割付けプロセッサ指定での周期ハンドラの動作開始〔TM〕

【C言語API】
	ER ercd = msta_cyc(ID cycid, ID prcid)

【パラメータ】
	ID			cycid		対象周期ハンドラのID番号
	ID			prcid		周期ハンドラの割付け対象のプロセッサのID番号

【リターンパラメータ】
	ER			ercd		正常終了（E_OK）またはエラーコード

【エラーコード】
	E_CTX			コンテキストエラー（非タスクコンテキストからの呼出
					し，CPUロック状態からの呼出し）
	E_NOSPT			未サポート機能（グローバルタイマ方式を用いている場
					合）
	E_ID			不正ID番号（cycid，prcidが不正）
	E_PAR			パラメータエラー（対象周期ハンドラはprcidで指定した
					プロセッサに割り付けられない）
	E_NOEXS〔D〕	オブジェクト未登録（対象周期ハンドラが未登録）
	E_OACV〔P〕		オブジェクトアクセス違反（対象周期ハンドラに対する
					通常操作1が許可されていない）

【機能】

prcidで指定したプロセッサを割付けプロセッサとして，cycidで指定した周期
ハンドラ（対象周期ハンドラ）を動作開始する．具体的な振舞いは以下の通り．

対象周期ハンドラが動作していない状態であれば，対象周期ハンドラの割付け
プロセッサがprcidで指定したプロセッサに変更された後，対象周期ハンドラは
動作している状態となる．次に周期ハンドラを起動する時刻は，msta_cycを呼
び出して以降の最初の起動時刻に設定される．

対象周期ハンドラが動作している状態であれば，対象周期ハンドラの割付けプ
ロセッサがprcidで指定したプロセッサに変更された後，次に周期ハンドラを起
動する時刻の再設定が行われる．

対象周期ハンドラが実行中である場合には，割付けプロセッサを変更しても，
実行中の周期ハンドラを実行するプロセッサは変更されない．対象周期ハンド
ラが変更後の割付けプロセッサで実行されるのは，次に起動される時からであ
る．

対象周期ハンドラの属するクラスの割付け可能プロセッサが，prcidで指定した
プロセッサを含んでいない場合には，E_PARエラーとなる．

prcidにTPRC_INI（＝0）を指定すると，対象周期ハンドラの割付けプロセッサ
を，それが属するクラスの初期割付けプロセッサとする．

グローバルタイマ方式を用いている場合，msta_cycはE_NOSPTを返す．

【補足説明】

TA_PHS属性でない周期ハンドラの場合，次に周期ハンドラを起動する時刻は，
msta_cycを呼び出してから，対象周期ハンドラの起動位相で指定した相対時間
後に設定される．

【使用上の注意】

msta_cycで実行中の周期ハンドラの割付けプロセッサを変更した場合，同じ周
期ハンドラが異なるプロセッサで同時に実行される可能性がある．特に，対象
周期ハンドラの起動位相が0の場合に，注意が必要である．

【μITRON4.0仕様との関係】

μITRON4.0仕様に定義されていないサービスコールである．

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

1. 仕様ベースのブラックボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.1. エラー条件のテストケース(FMP)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.2. 正常条件のテストケース(FMP)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

2. ソースコードの条件網羅確認

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.1. ソースコード
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[TOPPERS_SYSTIM_LOCAL]

ER
msta_cyc(ID cycid, ID prcid)
{
	CYCCB	*p_cyccb;
	ER		ercd;
	PCB		*t_p_pcb;
	PCB		*f_p_pcb;

	LOG_MSTA_CYC_ENTER(cycid, prcid);
	CHECK_TSKCTX_UNL();
	CHECK_CYCID(cycid);
	CHECK_PRCID_INI(prcid);
	p_cyccb = get_cyccb(cycid);
	prcid = (prcid == TPRC_INI)? p_cyccb->p_cycinib->iaffinity : prcid;
	CHECK_MIG(p_cyccb->p_cycinib->affinity_mask, prcid);

	t_lock_cpu();
	t_acquire_dual_tsk_lock_cyc(p_cyccb, prcid, &f_p_pcb, &t_p_pcb);
	if (p_cyccb->cycsta) {
		tmevtb_dequeue(p_cyccb->p_pcb->p_tevtcb, &(p_cyccb->tmevtb));
	}
	else {
		p_cyccb->cycsta = true;
	}

	LOG_CYCMIG(p_cyccb, f_p_pcb->prcid, prcid);
	/* 移動先の pcb を登録 */
	p_cyccb->p_pcb = t_p_pcb;

	tmevtb_enqueue_cyc(p_cyccb, base_time(t_p_pcb->p_tevtcb) + p_cyccb->p_cycinib->cycphs);
	ercd = E_OK;
	release_dual_tsk_lock(f_p_pcb, t_p_pcb);
	t_unlock_cpu();

  error_exit:
	LOG_MSTA_CYC_LEAVE(ercd);
	return(ercd);
}


[TOPPERS_SYSTIM_GLOBAL]

ER
msta_cyc(ID cycid, ID prcid)
{
	ER		ercd = E_NOSPT;

	LOG_MSTA_CYC_ENTER(cycid, prcid);
	LOG_MSTA_CYC_LEAVE(ercd);
	return(ercd);
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.2. マクロを展開したAPIと呼び出す内部関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[A] msta_cyc(TOPPERS_SYSTIM_LOCAL)

00 : ER
01 : msta_cyc(ID cycid, ID prcid)
02 : {
03 : 	CYCCB	*p_cyccb;
04 : 	ER		ercd;
05 : 	PCB		*t_p_pcb;
06 : 	PCB		*f_p_pcb;
07 : 
08 : 	if (!sense_tskctx_unl()) {
09 : 		ercd = E_CTX;
10 : 		goto error_exit;
11 : 	}
12 : 	if (!(TMIN_CYCID <= (cycid) && (cycid) <= tmax_cycid)) {
13 : 		ercd = E_ID;
14 : 		goto error_exit;
15 : 	}
16 : 	if (!((TMIN_PRCID <= (prcid) && (prcid) <= TNUM_PRCID)
17 :                                        || (prcid) == TPRC_INI)) {
18 : 		ercd = E_ID;
19 : 		goto error_exit;
20 : 	}
21 : 	p_cyccb = p_cyccb_table[(uint_t)((cycid) - TMIN_CYCID)];
22 : 	prcid = (prcid == TPRC_INI)? p_cyccb->p_cycinib->iaffinity : prcid;
23 : 	if (!((p_cyccb->p_cycinib->affinity_mask & (1 << (prcid - 1))) != 0)) {
24 : 		ercd = E_PAR;
25 : 		goto error_exit;
26 : 	}
27 : 
28 : 	t_lock_cpu();
29 : 	t_acquire_dual_tsk_lock_cyc(p_cyccb, prcid, &f_p_pcb, &t_p_pcb);
30 : 	if (p_cyccb->cycsta) {
31 : 		tmevtb_dequeue(p_cyccb->p_pcb->p_tevtcb, &(p_cyccb->tmevtb));
32 : 	}
33 : 	else {
34 : 		p_cyccb->cycsta = true;
35 : 	}
36 : 
37 : 	/* 移動先の pcb を登録 */
38 : 	p_cyccb->p_pcb = t_p_pcb;
39 : 
40 : 	tmevtb_enqueue_cyc(p_cyccb, base_time(t_p_pcb->p_tevtcb)
41 :                                    + p_cyccb->p_cycinib->cycphs);
42 : 	ercd = E_OK;
43 : 	release_dual_tsk_lock(f_p_pcb, t_p_pcb);
44 : 	t_unlock_cpu();
45 : 
46 :   error_exit:
47 : 	return(ercd);
48 : }


[B] msta_cyc(TOPPERS_SYSTIM_GLOBAL)

00 : ER
01 : msta_cyc(ID cycid, ID prcid)
02 : {
03 : 	ER		ercd = E_NOSPT;
04 : 
05 : 	return(ercd);
06 : }

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.3. 条件式
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(A1) 08 : !sense_tskctx_unl()
(A2) 12 : TMIN_CYCID <= (cycid)
(A3) 12 : (cycid) <= tmax_cycid
(A4) 16 : TMIN_PRCID <= (prcid)
(A5) 16 : (prcid) <= TNUM_PRCID
(A6) 17 : (prcid) == TPRC_INI
(A7) 22 : (prcid == TPRC_INI)
(A8) 23 : !((p_cyccb->p_cycinib->affinity_mask & (1 << (prcid - 1))) != 0)
(A9) 30 : p_cyccb->cycsta

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.4. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

[TOPPERS_SYSTIM_LOCAL]
          (A1) (A2) (A3) (A4) (A5) (A6) (A7) (A8) (A9)
(F-c-1-1)  T    D    D    D    D    D    D    D    D
(F-c-1-2)  T    D    D    D    D    D    D    D    D
(F-c-1-3)  T    D    D    D    D    D    D    D    D
(F-c-2-1)  T    D    D    D    D    D    D    D    D
(F-c-2-2)  T    D    D    D    D    D    D    D    D
(F-c-2-3)  T    D    D    D    D    D    D    D    D
(F-d-1-1)  F    F    D/T  D    D    D    D    D    D
(F-d-1-2)  F    F    D/T  D    D    D    D    D    D
(F-d-2-1)  F    T    F    D    D    D    D    D    D
(F-d-2-2)  F    T    F    D    D    D    D    D    D
(F-e-1-1)  F    T    T    F    D/T  F    D    D    D
(F-e-1-2)  F    T    T    F    D/T  F    D    D    D
(F-e-2-1)  F    T    T    T    F    F    D    D    D
(F-e-2-2)  F    T    T    T    F    F    D    D    D
(F-f-1)    F    T    T    T    T    D/F  F    T    D
(F-f-2)    F    T    T    T    T    D/F  F    T    D
(F-g-1-1)  F    T    T    T    T    D/F  F    F    F
(F-g-1-2)  F    T    T    T    T    D/F  F    F    T
(F-g-2-1)  F    T    T    T    T    D/F  F    F    F
(F-g-2-2)  F    T    T    T    T    D/F  F    F    T
(F-h-1-1)  F    T    T    T    T    D/F  F    F    F
(F-h-1-2)  F    T    T    T    T    D/F  F    F    T
(F-h-1-3)  F    T    T    T    T    D/F  F    F    T
(F-h-2-1)  F    T    T    T    T    D/F  F    F    F
(F-h-2-2)  F    T    T    T    T    D/F  F    F    T
(F-h-2-3)  F    T    T    T    T    D/F  F    F    T
(F-h-3-1)  F    T    T    T    T    D/F  F    F    F
(F-h-3-2)  F    T    T    T    T    D/F  F    F    T
(F-h-3-3)  F    T    T    T    T    D/F  F    F    T
(F-i-1)    F    T    T    F    D/T  T    T    F    F
(F-i-2)    F    T    T    F    D/T  T    T    F    F
(F-j-1)    F    T    T    F    D/T  T    T    F    F
(F-j-2)    F    T    T    F    D/T  T    T    F    F
------------------------------------------------------
網羅       O    O    O    O    O    O    O    O    O

【備考】
・グローバルタイマ方式(TOPPERS_SYSTIM_GLOBAL)を用いている場合，
  条件分岐がないので条件網羅表は作成しない．
・対象のテストケースは(F-a-1)，(F-a-2)，(F-b)である．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

3. ホワイトボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
必要なし


以上．
