
	dly_tsk テストシート

----------------------------------------------------------------------
 TTSP
     TOPPERS Test Suite Package

 Copyright (C) 2009-2011 by Center for Embedded Computing Systems
             Graduate School of Information Science, Nagoya Univ., JAPAN
 Copyright (C) 2009-2011 by Digital Craft Inc.
 Copyright (C) 2009-2011 by NEC Communication Systems, Ltd.
 Copyright (C) 2009-2011 by FUJISOFT INCORPORATED
 Copyright (C) 2009-2010 by Mitsuhiro Matsuura

 上記著作権者は，以下の (1)〜(3) の条件を満たす場合に限り，本ドキュメ
 ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
     および下記の無保証規定が，そのままの形でドキュメント中に含まれて
     いること．
 (2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
     を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
     ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
     りではない．
 (3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
     からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
     本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
     く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

 本ドキュメントは，無保証で提供されているものである．上記著作権者およ
 びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
 る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
 により直接的または間接的に生じたいかなる損害に関しても，その責任を負
 わない．

 $Id: dly_tsk.txt 2 2012-05-09 02:23:52Z nces-shigihara $
----------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

0. API仕様

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

dly_tsk		自タスクの遅延〔T〕

【C言語API】
	ER ercd = dly_tsk(RELTIM dlytim)

【パラメータ】
	RELTIM		dlytim		遅延時間

【リターンパラメータ】
	ER			ercd		正常終了（E_OK）またはエラーコード

【エラーコード】
	E_CTX			コンテキストエラー（ディスパッチ保留状態からの呼
					出し）
	E_NOSPT			未サポート機能（制約タスクからの呼出し）
	E_PAR			パラメータエラー（dlytimが不正）
	E_RLWAI			待ち禁止状態または待ち状態の強制解除

【機能】

dlytimで指定した時間，自タスクを遅延させる．具体的な振舞いは以下の通り．

自タスクは，dlytimで指定した時間が経過するまでの間，時間経過待ち状態と
なる．dly_tskを呼び出してからdlytimで指定した相対時間後に，自タスクは待
ち解除され，dly_tskからE_OKが返る．

dlytimは，TMAX_RELTIM以下でなければならない．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

1. 仕様ベースのブラックボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.1. エラー条件のテストケース(FMP)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(F-a) ディスパッチ保留状態のスピンロック取得中から呼び出して，E_CTX
      エラーが返ること．(ASP:a，EX_NEW_STATE)

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.2. 正常条件のテストケース(FMP)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
該当なし


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

2. ソースコードの条件網羅確認

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.1. ソースコード
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ER
dly_tsk(RELTIM dlytim)
{
	ER		ercd;
	PCB		*my_p_pcb;
	TCB		*p_runtsk;
	
	LOG_DLY_TSK_ENTER(dlytim);
	CHECK_TSKCTX_UNL();
	CHECK_PAR(dlytim <= TMAX_RELTIM);

	t_lock_cpu();
	my_p_pcb = get_my_p_pcb();
	T_CHECK_DISPATCH(my_p_pcb);

	my_p_pcb = t_acquire_tsk_lock_self();
	p_runtsk = my_p_pcb->p_runtsk;
	p_runtsk->tstat = (TS_WAITING | TS_WAIT_DLY);
	(void) make_non_runnable(p_runtsk);
	tmevtb_enqueue(my_p_pcb->p_tevtcb, &(p_runtsk->tmevtb), dlytim, (CBACK) wait_tmout_ok, (void *) p_runtsk);
	LOG_TSKSTAT(p_runtsk);
	release_tsk_lock(my_p_pcb);
	dispatch();
	ercd = p_runtsk->wercd;
	t_unlock_cpu();

  error_exit:
	LOG_DLY_TSK_LEAVE(ercd);
	return(ercd);
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.2. マクロを展開したAPIと呼び出す内部関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[A] dly_tsk

00 : ER
01 : dly_tsk(RELTIM dlytim)
02 : {
03 : 	ER		ercd;
04 : 	PCB		*my_p_pcb;
05 : 	TCB		*p_runtsk;
06 : 	
07 : 	if (!sense_tskctx_unl()) {
08 : 		ercd = E_CTX;
09 : 		goto error_exit;
10 : 	}
11 : 	if (!(dlytim <= TMAX_RELTIM)) {
12 : 		ercd = E_PAR;
13 : 		goto error_exit;
14 : 	}	
15 : 
16 : 	t_lock_cpu();
17 : 	my_p_pcb = get_my_p_pcb();
18 : 	if (!(my_p_pcb->dspflg)) {
19 : 		ercd = E_CTX;
20 : 		t_unlock_cpu();
21 : 		goto error_exit;
22 : 	}	
23 : 
24 : 	my_p_pcb = t_acquire_tsk_lock_self();
25 : 	p_runtsk = my_p_pcb->p_runtsk;
26 : 	p_runtsk->tstat = (TS_WAITING | TS_WAIT_DLY);
27 : 	(void) make_non_runnable(p_runtsk);
28 : 	tmevtb_enqueue(my_p_pcb->p_tevtcb, &(p_runtsk->tmevtb), dlytim, (CBACK) wait_tmout_ok, (void *) p_runtsk);
29 : 	release_tsk_lock(my_p_pcb);
30 : 	dispatch();
31 : 	ercd = p_runtsk->wercd;
32 : 	t_unlock_cpu();
33 : 
34 :   error_exit:
35 : 	return(ercd);
36 : }


[B] tmevtb_enqueue

00 : Inline void
01 : tmevtb_enqueue(TEVTCB *p_tevtcb, TMEVTB *p_tmevtb, RELTIM time, CBACK callback, void *arg)
02 : {
03 : 	assert(time <= TMAX_RELTIM);
04 : 
05 : 	p_tmevtb->callback = callback;
06 : 	p_tmevtb->arg = arg;
07 : 	tmevtb_insert(p_tevtcb, p_tmevtb, base_time(p_tevtcb) + time);
08 : }


[C] tmevtb_insert

00 : void
01 : tmevtb_insert(TEVTCB *p_tevtcb, TMEVTB *p_tmevtb, EVTTIM time)
02 : {
03 : 	uint_t  index;
04 : 
05 : 	/*
06 : 	 *  last_index をインクリメントし，そこから上に挿入位置を探す．
07 : 	 */
08 : 	index = tmevt_up(p_tevtcb, ++(p_tevtcb->last_index), time);
09 : 
10 : 	/*
11 : 	 *  タイムイベントを index の位置に挿入する．
12 : 	 */ 
13 : 	((p_tevtcb->p_tmevt_heap)[(index) - 1]).time = time;
14 : 	((p_tevtcb->p_tmevt_heap)[(index) - 1]).p_tmevtb = p_tmevtb;
15 : 	p_tmevtb->index = index;
16 : }


[D] tmevt_up

00 : uint_t
01 : tmevt_up(TEVTCB *p_tevtcb, uint_t index, EVTTIM time)
02 : {
03 : 	uint_t	parent;
04 : 
05 : 	while (index > 1) {
06 : 		/*
07 : 		 *  親ノードのイベント発生時刻の方が早い（または同じ）
08 : 		 *  ならば，index が挿入位置なのでループを抜ける．
09 : 		 */
10 : 		parent = PARENT(index);
11 : 		if (((((p_tevtcb->p_tmevt_heap)[(parent) - 1]).time) - p_tevtcb->min_time) <= ((time) - p_tevtcb->min_time)) {
12 : 			break;
13 : 		}
14 : 
15 : 		/*
16 : 		 *  親ノードを index の位置に移動させる．
17 : 		 */
18 : 		((p_tevtcb->p_tmevt_heap)[(index) - 1]) = ((p_tevtcb->p_tmevt_heap)[(parent) - 1]);
19 : 		((p_tevtcb->p_tmevt_heap)[(index) - 1]).p_tmevtb->index = index;
20 : 
21 : 		/*
22 : 		 *  index を親ノードの位置に更新．
23 : 		 */
24 : 		index = parent;
25 : 	}
26 : 	return(index);
27 : }


[E] wait_tmout_ok

00 : void
01 : wait_tmout_ok(TCB *p_tcb)
02 : {
03 : 	PCB *p_pcb = p_tcb->p_pcb;
04 : 	PCB *my_p_pcb;
05 : 
06 : 	p_tcb->wercd = E_OK;
07 : 	if (make_non_wait(p_tcb)) {
08 : 		if (dispatch_request(p_tcb->p_pcb)) {
09 : 			p_pcb->reqflg = true;
10 : 		}
11 : 	}
12 : 
13 : 	/*
14 : 	 *  ここで優先度の高い割込みを受け付ける．
15 : 	 */
16 : 	my_p_pcb = get_my_p_pcb();
17 : 	release_tsk_lock(my_p_pcb);
18 : 	i_unlock_cpu();
19 : 	i_lock_cpu();
20 : 	i_acquire_tsk_lock_self();
21 : }


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.3. 条件式
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(A1) 07 : !sense_tskctx_unl()
(A2) 11 : !(dlytim <= TMAX_RELTIM)
(A3) 18 : !(my_p_pcb->dspflg)

(D1) 05 : index > 1
(D2) 11 : ((((p_tevtcb->p_tmevt_heap)[(parent) - 1]).time) - p_tevtcb->min_time) <= ((time) - p_tevtcb->min_time)

(E1) 07 : make_non_wait(p_tcb)
(E2) 08 : dispatch_request(p_tcb->p_pcb)

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.4. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
      (A1) (A2) (A3) (D1) (D2) (E1) (E2)
(a-1)  T    D    D    D    D    D    D
(a-2)  T    D    D    D    D    D    D
(a-3)  F    F    T    D    D    D    D
(a-4)  F    F    T    D    D    D    D
(b-1)  F    T    D    D    D    D    D
(b-2)  F    T    D    D    D    D    D
(c)    F    F    F    F    D    D    D
(d)    F    F    F    F    D    T    T
(e)    F    F    F    F    D    T    T
(f-1)  F    F    F    F    D    F    D
(f-2)  F    F    F    F    D    T    T
(W_a)  F    F    F    TF   F    T    T
(W_b)  F    F    F    TTF  FF   T    T
(W_c)  F    F    F    TTTF FFF  T    T
(W_d)  F    F    F    T    T    F    D
(F-a)  T    D    D    D    D    D    D
----------------------------------------
網羅   O    O    O    O    O    O    X

【備考】
・(E2)の網羅をさせるために，以下にホワイトボックステストを実施する．

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

3. ホワイトボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
3.1. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

        (A1) (A2) (A3) (D1) (D2) (E1) (E2)
(W_F-a)  F    F    F    F    D    T    F
------------------------------------------
網羅     O    O    O    O    O    O    O

【備考】
・(W_F-a)の(E2)がFになるのは，グローバルタイマ方式であり，かつ，システ
  ム時刻管理プロセッサとタイムアウトを起こすタスクの割付けプロセッサが
  異なる場合である．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
3.2. テストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(W_F-a) 以下の条件が成り立つ時．

  ・同じ優先度の実行可能なタスクが存在せず，自タスクより低い優先度の実
    行可能なタスクが存在する．
  ・グローバルタイマ方式であり，かつ，システム時刻管理プロセッサとタイ
    ムアウトを起こすタスクの割付けプロセッサが異なる．



以上．
