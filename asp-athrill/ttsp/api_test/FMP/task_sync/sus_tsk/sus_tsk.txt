
	sus_tsk テストシート

----------------------------------------------------------------------
 TTSP
     TOPPERS Test Suite Package

 Copyright (C) 2009-2011 by Center for Embedded Computing Systems
             Graduate School of Information Science, Nagoya Univ., JAPAN
 Copyright (C) 2009-2011 by Digital Craft Inc.
 Copyright (C) 2009-2011 by NEC Communication Systems, Ltd.
 Copyright (C) 2009-2011 by FUJISOFT INCORPORATED
 Copyright (C) 2009-2010 by Mitsuhiro Matsuura

 上記著作権者は，以下の (1)〜(3) の条件を満たす場合に限り，本ドキュメ
 ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
     および下記の無保証規定が，そのままの形でドキュメント中に含まれて
     いること．
 (2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
     を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
     ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
     りではない．
 (3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
     からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
     本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
     く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

 本ドキュメントは，無保証で提供されているものである．上記著作権者およ
 びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
 る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
 により直接的または間接的に生じたいかなる損害に関しても，その責任を負
 わない．

 $Id: sus_tsk.txt 2 2012-05-09 02:23:52Z nces-shigihara $
----------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

0. API仕様

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

sus_tsk		強制待ち状態への遷移〔T〕

【C言語API】
	ER ercd = sus_tsk(ID tskid)

【パラメータ】
	ID			tskid		対象タスクのID番号

【リターンパラメータ】
	ER			ercd		正常終了（E_OK）またはエラーコード

【エラーコード】
	E_CTX			コンテキストエラー（非タスクコンテキストからの呼出
					し，CPUロック状態からの呼出し，対象タスクが自タスク
					でディスパッチ保留状態からの呼出し）
	E_NOSPT			未サポート機能（対象タスクが制約タスク）
	E_ID			不正ID番号（tskidが不正）
	E_NOEXS〔D〕	オブジェクト未登録（対象タスクが未登録）
	E_OACV〔P〕		オブジェクトアクセス違反（対象タスクに対する通常操
					作2が許可されていない）
	E_OBJ			オブジェクト状態エラー（対象タスクが休止状態）
	E_QOVR			キューイングオーバフロー（対象タスクが強制待ち状態）

【機能】

tskidで指定したタスク（対象タスク）を強制待ちにする．具体的な振舞いは以
下の通り．

対象タスクが実行できる状態である場合には，対象タスクは強制待ち状態とな
る．また，待ち状態（二重待ち状態を除く）である場合には，二重待ち状態と
なる．

対象タスクが強制待ち状態または二重待ち状態である場合はE_QOVRエラー，休
止状態である場合にはE_OBJエラーとなる．

マルチプロセッサ対応カーネルでは，対象タスクが自タスクの場合にも，
E_QOVRエラーとなる場合がある．この状況は，自タスクに対してsus_tskを発行
するのと同じタイミングで，他のプロセッサで実行されているタスクから同じ
タスクに対してsus_tskが発行された場合に発生する可能性がある．

tskidにTSK_SELF（＝0）を指定すると，自タスクが対象タスクとなる．

ディスパッチ保留状態で，対象タスクを自タスクとしてsus_tskを呼び出すと，
E_CTXエラーとなる．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

1. 仕様ベースのブラックボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.1. エラー条件のテストケース(FMP)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.2. 正常条件のテストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━



■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

2. ソースコードの条件網羅確認

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.1. ソースコード
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ER
sus_tsk(ID tskid)
{
	TCB		*p_tcb;
	ER		ercd;
	bool_t	dspreq = false;
	PCB		*p_pcb;
	PCB		*my_p_pcb;

	LOG_SUS_TSK_ENTER(tskid);
	CHECK_TSKCTX_UNL();
	CHECK_TSKID_SELF(tskid);

	t_lock_cpu();
	p_tcb = get_tcb_self(tskid, get_my_p_pcb());
	p_pcb = t_acquire_tsk_lock(p_tcb);
	my_p_pcb = get_my_p_pcb();
	if (p_tcb == my_p_pcb->p_runtsk && !(my_p_pcb->dspflg)) {
		/* 自分がディスパッチ禁止状態でsus_tskを発行するとエラー */
		ercd = E_CTX;
	}
	else if (TSTAT_DORMANT(p_tcb->tstat)) {
		ercd = E_OBJ;
	}
	else if (TSTAT_RUNNABLE(p_tcb->tstat)) {
		/*
		 *  実行できる状態から強制待ち状態への遷移
		 */
		p_tcb->tstat = TS_SUSPENDED;
		LOG_TSKSTAT(p_tcb);
		if (make_non_runnable(p_tcb)) {
			dspreq = dispatch_request(p_pcb);
		}
		ercd = E_OK;
	}
	else if (TSTAT_SUSPENDED(p_tcb->tstat)) {
		ercd = E_QOVR;
	}
	else {
		/*
		 *  待ち状態から二重待ち状態への遷移
		 */
		p_tcb->tstat |= TS_SUSPENDED;
		LOG_TSKSTAT(p_tcb);
		ercd = E_OK;
	}
	release_tsk_lock(p_pcb);
	if (dspreq) {
		dispatch();
	}
	t_unlock_cpu();

  error_exit:
	LOG_SUS_TSK_LEAVE(ercd);
	return(ercd);
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.2. マクロを展開したAPIと呼び出す内部関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[A] sus_tsk

00 : ER
01 : sus_tsk(ID tskid)
02 : {
03 : 	TCB		*p_tcb;
04 : 	ER		ercd;
05 : 	bool_t	dspreq = false;
06 : 	PCB		*p_pcb;
07 : 	PCB		*my_p_pcb;
08 : 
09 : 	if (!sense_tskctx_unl()) {
10 : 		ercd = E_CTX;
11 : 		goto error_exit;
12 : 	}
13 : 	if (!((TMIN_TSKID <= (tskid) && (tskid) <= tmax_tskid) || (tskid) == TSK_SELF)) {
14 : 		ercd = E_ID;
15 : 		goto error_exit;
16 : 	}
17 : 
18 : 	t_lock_cpu();
19 : 	p_tcb = ((tskid) == TSK_SELF ? (get_my_p_pcb())->p_runtsk : (p_tcb_table[((uint_t)((tskid) - TMIN_TSKID))]));
20 : 	p_pcb = t_acquire_tsk_lock(p_tcb);
21 : 	my_p_pcb = get_my_p_pcb();
22 : 	if (p_tcb == my_p_pcb->p_runtsk && !(my_p_pcb->dspflg)) {
23 : 		/* 自分がディスパッチ禁止状態でsus_tskを発行するとエラー */
24 : 		ercd = E_CTX;
25 : 	}
26 : 	else if ((p_tcb->tstat) == TS_DORMANT) {
27 : 		ercd = E_OBJ;
28 : 	}
29 : 	else if (((p_tcb->tstat) & TS_RUNNABLE) != 0U) {
30 : 		/*
31 : 		 *  実行できる状態から強制待ち状態への遷移
32 : 		 */
33 : 		p_tcb->tstat = TS_SUSPENDED;
34 : 		if (make_non_runnable(p_tcb)) {
35 : 			dspreq = dispatch_request(p_pcb);
36 : 		}
37 : 		ercd = E_OK;
38 : 	}
39 : 	else if (((p_tcb->tstat) & TS_SUSPENDED) != 0U) {
40 : 		ercd = E_QOVR;
41 : 	}
42 : 	else {
43 : 		/*
44 : 		 *  待ち状態から二重待ち状態への遷移
45 : 		 */
46 : 		p_tcb->tstat |= TS_SUSPENDED;
47 : 		ercd = E_OK;
48 : 	}
49 : 	release_tsk_lock(p_pcb);
50 : 	if (dspreq) {
51 : 		dispatch();
52 : 	}
53 : 	t_unlock_cpu();
54 : 
55 :   error_exit:
56 : 	return(ercd);
57 : }


[B] make_non_runnable

00 : bool_t
01 : make_non_runnable(TCB *p_tcb)
02 : {
03 : 	uint_t	pri = p_tcb->priority;
04 : 	QUEUE	*p_queue = &((p_tcb->p_pcb->ready_queue)[pri]);
05 : 	PCB		*p_pcb = p_tcb->p_pcb;
06 : 
07 : 	queue_delete(&(p_tcb->task_queue));
08 : 	if (queue_empty(p_queue)) {
09 : 		primap_clear(p_pcb,pri);
10 : 		if (p_pcb->p_schedtsk == p_tcb) {
11 : 			p_pcb->p_schedtsk = primap_empty(p_pcb) ? (TCB *) NULL : search_schedtsk(p_pcb);
12 : 			return(p_pcb->dspflg);
13 : 		}
14 : 	}
15 : 	else {
16 : 		if (p_pcb->p_schedtsk == p_tcb) {
17 : 			p_pcb->p_schedtsk = (TCB *)(p_queue->p_next);
18 : 			return(p_pcb->dspflg);
19 : 		}
20 : 	}
21 : 	return(false);
22 : }


[C] queue_empty

00 : Inline bool_t
01 : queue_empty(QUEUE *p_queue)
02 : {
03 : 	if (p_queue->p_next == p_queue) {
04 : 		assert(p_queue->p_prev == p_queue);
05 : 		return(true);
06 : 	}
07 : 	return(false);
08 : }


[D] primap_empty

00 : Inline bool_t
01 : primap_empty(PCB *p_pcb)
02 : {
03 : 	return(p_pcb->ready_primap == 0U);
04 : }


[E] search_schedtsk

00 : TCB *
01 : search_schedtsk(PCB *p_pcb)
02 : {
03 : 	uint_t	schedpri;
04 : 
05 : 	schedpri = primap_search(p_pcb);
06 : 	return((TCB *)((p_pcb->ready_queue)[schedpri].p_next));
07 : }


[F] primap_search

00 : Inline uint_t
01 : primap_search(PCB *p_pcb)
02 : {
03 : 	return(bitmap_search(p_pcb->ready_primap));
04 : }


[G] bitmap_search

00 : Inline uint_t
01 : bitmap_search(uint16_t bitmap)
02 : {
03 : 	uint_t	n = 0U;
04 : 
05 : 	assert(bitmap != 0U);
06 : 	if ((bitmap & 0x00ffU) == 0U) {
07 : 		bitmap >>= 8;
08 : 		n += 8;
09 : 	}
10 : 	if ((bitmap & 0x0fU) == 0U) {
11 : 		bitmap >>= 4;
12 : 		n += 4;
13 : 	}
14 : 	return(n + bitmap_search_table[(bitmap & 0x0fU) - 1]);
15 : }


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.3. 条件式
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(A1)  09 : !sense_tskctx_unl()
(A2)  13 : TMIN_TSKID <= (tskid)
(A3)  13 : (tskid) <= tmax_tskid
(A4)  13 : (tskid) == TSK_SELF
(A5)  19 : (tskid) == TSK_SELF
(A6)  22 : p_tcb == my_p_pcb->p_runtsk
(A7)  22 : !(my_p_pcb->dspflg)
(A8)  26 : (p_tcb->tstat) == TS_DORMANT
(A9)  29 : ((p_tcb->tstat) & TS_RUNNABLE) != 0U
(A10) 34 : make_non_runnable(p_tcb)
(A11) 39 : ((p_tcb->tstat) & TS_SUSPENDED) != 0U
(A12) 50 : dspreq

(B1)  07 : queue_empty(p_queue)
(B2)  10 : p_pcb->p_schedtsk == p_tcb
(B3)  11 : primap_empty(p_pcb)
(B4)  16 : p_pcb->p_schedtsk == p_tcb

(C1)  03 : p_queue->p_next == p_queue

(D1)  03 : p_pcb->ready_primap == 0U

(G1)  06 : (bitmap & 0x00ffU) == 0U
(G2)  10 : (bitmap & 0x0fU) == 0U
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.4. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
          (A1) (A2) (A3) (A4) (A5) (A6) (A7) (A8) (A9) (A10) (A11) (A12) (B1) (B2) (B3) (B4) (C1) (D1) (G1) (G2)
(a-1)      T    D    D    D    D    D    D    D    D     D     D     D     D    D    D    D    D    D    D    D
(a-2)      T    D    D    D    D    D    D    D    D     D     D     D     D    D    D    D    D    D    D    D
(a-3-1)    F    F   D/T   T    T    T    T    D    D     D     D     F     D    D    D    D    D    D    D    D
(a-3-2)    F    F   D/T   T    T    T    T    D    D     D     D     F     D    D    D    D    D    D    D    D
(b-1)      F    F   D/T   F    D    D    D    D    D     D     D     D     D    D    D    D    D    D    D    D
(b-2)      F    T    F    F    D    D    D    D    D     D     D     D     D    D    D    D    D    D    D    D
(c)        F    T    T   D/F   F    F   D/F   T    D     D     D     F     D    D    D    D    D    D    D    D
(d)        F    T    T   D/F   F    F   D/F   F    F     D     T     F     D    D    D    D    D    D    D    D
(e-1)      F    T    T   D/F   F    F   D/F   F    F     D     T     F     D    D    D    D    D    D    D    D
(e-2)      F    T    T   D/F   F    F   D/F   F    F     D     T     F     D    D    D    D    D    D    D    D
(f-1)      F    T    T   D/F   F    F   D/F   F    T     F     D     F     F    D    D    F    F    D    D    D
(f-2)      F    T    T   D/F   F    F   D/T   F    T     F     D     F     F    D    D    F    F    D    D    D
(f-3)      F    T    T   D/F   F    F   D/T   F    T     F     D     F     F    D    D    F    F    D    D    D
(g-1)      F    F   D/T   T    T    T    F    F    T     T     D     T     F    D    D    T    F    D    D    D
(g-2)      F    F   D/T   T    T    T    F    F    T     T     D     T     T    T    F    D    T    F    T    F
(h)        F    T    T   D/F   F    F   D/F   F    F     D     F     F     D    D    D    D    D    D    D    D
(i)        F    T    T   D/F   F    F   D/F   F    F     D     F     F     D    D    D    D    D    D    D    D
(j)        F    T    T   D/F   F    F   D/F   F    F     D     F     F     D    D    D    D    D    D    D    D
(k)        F    T    T   D/F   F    F   D/F   F    F     D     F     F     D    D    D    D    D    D    D    D
(W_a)      F    T    T   D/F   F    F   D/F   F    T     F     D     F     T    F    D    D    T    D    D    D
(W_b)      F    F   D/T   T    T    T    F    F    T     T     D     T     T    T    T    D    T    T    D    D
(W_c-1)    F    F   D/T   T    T    T    F    F    T     T     D     T     T    T    F    D    T    F    F    F
(W_c-2)    F    F   D/T   T    T    T    F    F    T     T     D     T     T    T    F    D    T    F    T    T
(F-a-1)    T    D    D    D    D    D    D    D    D     D     D     D     D    D    D    D    D    D    D    D
(F-a-2)    T    D    D    D    D    D    D    D    D     D     D     D     D    D    D    D    D    D    D    D
(F-a-3)    T    D    D    D    D    D    D    D    D     D     D     D     D    D    D    D    D    D    D    D
(F-a-4)    T    D    D    D    D    D    D    D    D     D     D     D     D    D    D    D    D    D    D    D
(F-b)      F    T    T   D/F   F    F   D/F   T    D     D     D     F     D    D    D    D    D    D    D    D
(F-c-1)    F    T    T   D/F   F    F   D/F   F    F     D     T     F     D    D    D    D    D    D    D    D
(F-c-2-1)  F    T    T   D/F   F    F   D/F   F    F     D     T     F     D    D    D    D    D    D    D    D
(F-c-2-2)  F    T    T   D/F   F    F   D/F   F    F     D     T     F     D    D    D    D    D    D    D    D
(F-c-2-3)  F    T    T   D/F   F    F   D/F   F    F     D     T     F     D    D    D    D    D    D    D    D
(F-c-2-4)  F    T    T   D/F   F    F   D/F   F    F     D     T     F     D    D    D    D    D    D    D    D
(F-c-2-5)  F    T    T   D/F   F    F   D/F   F    F     D     T     F     D    D    D    D    D    D    D    D
(F-c-3)    F    T    T   D/F   F    F   D/F   F    F     D     T     F     D    D    D    D    D    D    D    D
(F-c-4)    F    T    T   D/F   F    F   D/F   F    F     D     T     F     D    D    D    D    D    D    D    D
(F-d-1)    F    T    T   D/F   F    F   D/F   F    T     F     D     F     F    D    D    F    F    D    D    D
(F-d-2)    F    T    T   D/F   F    F   D/F   F    T     F     D     F     F    D    D    F    F    D    D    D
(F-d-3)    F    T    T   D/F   F    F   D/F   F    T     F     D     F     F    D    D    F    F    D    D    D
(F-d-4)    F    T    T   D/F   F    F   D/F   F    T     F     D     F     F    D    D    F    F    D    D    D
(F-d-5)    F    T    T   D/F   F    F   D/F   F    T     F     D     F     F    D    D    F    F    D    D    D
(F-d-6)    F    T    T   D/F   F    F   D/F   F    T     F     D     F     F    D    D    F    F    D    D    D
(F-e-1)    F    T    T   D/F   F    F   D/F   F    F     D     F     F     D    D    D    D    D    D    D    D
(F-e-2)    F    T    T   D/F   F    F   D/F   F    F     D     F     F     D    D    D    D    D    D    D    D
(F-e-3)    F    T    T   D/F   F    F   D/F   F    F     D     F     F     D    D    D    D    D    D    D    D
(F-e-4)    F    T    T   D/F   F    F   D/F   F    F     D     F     F     D    D    D    D    D    D    D    D
(F-f-1)    F    T    T   D/F   F    F   D/F   F    T     T     D     F     T    T    T    D    T    T    D    D
(F-f-2)    F    T    T   D/F   F    F   D/F   F    T     F     D     F     T    T    T    D    T    T    D    D
(F-f-3)    F    T    T   D/F   F    F   D/F   F    T     F     D     F     T    T    T    D    T    T    D    D
(F-f-4)    F    T    T   D/F   F    F   D/F   F    T     T     D     F     T    T    T    D    T    T    D    D
(F-f-5)    F    T    T   D/F   F    F   D/F   F    T     T     D     F     T    T    T    D    T    T    D    D
(F-f-6)    F    T    T   D/F   F    F   D/F   F    T     T     D     F     T    T    T    D    T    T    D    D
----------------------------------------------------------------------------------------------------------------
網羅       O    O    O    O    O    O    O    O    O     O    O     O     O     O    O    O    O    O    O    O

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

3. ホワイトボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
3.1. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
3.2. テストケース
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━



以上．
