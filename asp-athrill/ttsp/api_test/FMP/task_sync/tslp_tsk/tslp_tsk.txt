
	tslp_tsk テストシート

----------------------------------------------------------------------
 TTSP
     TOPPERS Test Suite Package

 Copyright (C) 2009-2011 by Center for Embedded Computing Systems
             Graduate School of Information Science, Nagoya Univ., JAPAN
 Copyright (C) 2009-2011 by Digital Craft Inc.
 Copyright (C) 2009-2011 by NEC Communication Systems, Ltd.
 Copyright (C) 2009-2011 by FUJISOFT INCORPORATED
 Copyright (C) 2009-2010 by Mitsuhiro Matsuura

 上記著作権者は，以下の (1)〜(3) の条件を満たす場合に限り，本ドキュメ
 ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
     および下記の無保証規定が，そのままの形でドキュメント中に含まれて
     いること．
 (2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
     を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
     ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
     りではない．
 (3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
     からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
     本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
     く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

 本ドキュメントは，無保証で提供されているものである．上記著作権者およ
 びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
 る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
 により直接的または間接的に生じたいかなる損害に関しても，その責任を負
 わない．

 $Id: tslp_tsk.txt 2 2012-05-09 02:23:52Z nces-shigihara $
----------------------------------------------------------------------

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

0. API仕様

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

slp_tsk		起床待ち〔T〕
tslp_tsk	起床待ち（タイムアウト付き）〔T〕

【C言語API】
	ER ercd = slp_tsk()
	ER ercd = tslp_tsk(TMO tmout)

【パラメータ】
	TMO			tmout		タイムアウト時間（tslp_tskの場合）

【リターンパラメータ】
	ER			ercd		正常終了（E_OK）またはエラーコード

【エラーコード】
	E_CTX			コンテキストエラー（ディスパッチ保留状態からの呼出
					し）
	E_NOSPT			未サポート機能（制約タスクからの呼出し）
	E_PAR			パラメータエラー（tmoutが不正：tslp_tskの場合）
	E_TMOUT			ポーリング失敗またはタイムアウト（slp_tskを除く）
	E_RLWAI			待ち禁止状態または待ち状態の強制解除

【機能】

自タスクを起床待ちさせる．具体的な振舞いは以下の通り．

自タスクの起床要求キューイング数が0でない場合には，起床要求キューイング
数から1が減ぜられる．起床要求キューイング数が0の場合には，自タスクは起
床待ち状態となる．

【補足説明】

自タスクの起床要求キューイング数が0でない場合には，自タスクは実行できる
状態を維持し，自タスクの優先順位は変化しない．


■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

1. 仕様ベースのブラックボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.1. エラー条件のテストケース(FMP)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(F-a) ディスパッチ保留状態のスピンロック取得中から呼び出して，E_CTX
      エラーが返ること．(ASP:a，EX_NEW_STATE)

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
1.2. 正常条件のテストケース(FMP)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(F-b) 他プロセッサに割り付けられたタスクから待ち状態が強制解除された時
      にE_RLWAIが返ること．(ASP:e，EX_OTHER_PRC)

(F-c) 他プロセッサに割り付けられたタスクから待ち状態が解除された時に
      E_OKが返ること．(ASP:f，EX_OTHER_PRC)



■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

2. ソースコードの条件網羅確認

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.1. ソースコード
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
ER
tslp_tsk(TMO tmout)
{
	ER		ercd;
	PCB		*my_p_pcb;
	TCB		*p_runtsk;

	LOG_TSLP_TSK_ENTER(tmout);
	CHECK_TSKCTX_UNL();
	CHECK_TMOUT(tmout);

	t_lock_cpu();
	my_p_pcb = get_my_p_pcb();
	T_CHECK_DISPATCH(my_p_pcb);

	my_p_pcb = t_acquire_tsk_lock_self();
	p_runtsk = my_p_pcb->p_runtsk;
	if (p_runtsk->wupque) {
		p_runtsk->wupque = false;
		release_tsk_lock(my_p_pcb);
		ercd = E_OK;
	}
	else if (tmout == TMO_POL) {
		release_tsk_lock(my_p_pcb);
		ercd = E_TMOUT;
	}
	else {
		p_runtsk->tstat = (TS_WAITING | TS_WAIT_SLP);
		make_wait_tmout(tmout, my_p_pcb);
		LOG_TSKSTAT(p_runtsk);
		release_tsk_lock(my_p_pcb);
		dispatch();
		ercd = p_runtsk->wercd;
	}
	t_unlock_cpu();

  error_exit:
	LOG_TSLP_TSK_LEAVE(ercd);
	return(ercd);
}

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.2. マクロを展開したAPIと呼び出す内部関数
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
[A] 

00 : ER
01 : tslp_tsk(TMO tmout)
02 : {
03 : 	ER		ercd;
04 : 	PCB		*my_p_pcb;
05 : 	TCB		*p_runtsk;
06 : 
07 : 	if (!sense_tskctx_unl()) {
08 : 		ercd = E_CTX;
09 : 		goto error_exit;
10 : 	}
11 : 	if (!(TMO_FEVR <= (tmout))) {
12 : 		ercd = E_PAR;
13 : 		goto error_exit;
14 : 	}
15 : 
16 : 	t_lock_cpu();
17 : 	my_p_pcb = get_my_p_pcb();
18 : 	if (!(my_p_pcb->dspflg)) {
19 : 		ercd = E_CTX;
20 : 		t_unlock_cpu();
21 : 		goto error_exit;
22 : 	}
23 : 
24 : 	my_p_pcb = t_acquire_tsk_lock_self();
25 : 	p_runtsk = my_p_pcb->p_runtsk;
26 : 	if (p_runtsk->wupque) {
27 : 		p_runtsk->wupque = false;
28 : 		release_tsk_lock(my_p_pcb);
29 : 		ercd = E_OK;
30 : 	}
31 : 	else if (tmout == TMO_POL) {
32 : 		release_tsk_lock(my_p_pcb);
33 : 		ercd = E_TMOUT;
34 : 	}
35 : 	else {
36 : 		p_runtsk->tstat = (TS_WAITING | TS_WAIT_SLP);
37 : 		make_wait_tmout(tmout, my_p_pcb);
38 : 		release_tsk_lock(my_p_pcb);
39 : 		dispatch();
40 : 		ercd = p_runtsk->wercd;
41 : 	}
42 : 	t_unlock_cpu();
43 : 
44 :   error_exit:
45 : 	return(ercd);
46 : }

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.3. 条件式
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(A1) 07 : !sense_tskctx_unl()
(A2) 11 : !(TMO_FEVR <= (tmout))
(A3) 18 : !(my_p_pcb->dspflg)
(A4) 26 : p_runtsk->wupque
(A5) 31 : tmout == TMO_POL

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
2.4. 条件網羅表
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
      (A1) (A2) (A3) (A4) (A5)
(a-1)  T    D    D    D    D
(a-2)  T    D    D    D    D
(a-3)  F    F    T    D    D
(a-4)  F    F    T    D    D
(b)    F    T    D    D    D
(c)    F    F    F    F    T
(d)    F    F    F    F    F
(e)    F    F    F    F    F
(f)    F    F    F    F    F
(g)    F    F    F    T    D
(h-1)  F    F    F    F    F
(h-2)  F    F    F    F    F
(i)    F    F    F    F    F
(F-a)  T    D    D    D    D
(F-b)  F    F    F    F    F
(F-c)  F    F    F    F    F
-----------------------------
網羅   O    O    O    O    O

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■

3. ホワイトボックステスト

■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■■
必要なし．



以上．
