
	TTG - TOPPERS Test Generator -
	TESRY記法仕様書

----------------------------------------------------------------------
 TTG
     TOPPERS Test Generator

 Copyright (C) 2009-2011 by Center for Embedded Computing Systems
             Graduate School of Information Science, Nagoya Univ., JAPAN
 Copyright (C) 2010-2011 by Graduate School of Information Science,
                            Aichi Prefectural Univ., JAPAN

 上記著作権者は，以下の (1)〜(3) の条件を満たす場合に限り，本ドキュメ
 ント(本ドキュメントを改変したものを含む．以下同じ)を使用・複製・改
 変・再配布(以下，利用と呼ぶ)することを無償で許諾する．
 (1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
     および下記の無保証規定が，そのままの形でドキュメント中に含まれて
     いること．
 (2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
     を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
     ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
     りではない．
 (3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
     からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
     本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
     く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

 本ドキュメントは，無保証で提供されているものである．上記著作権者およ
 びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
 る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
 により直接的または間接的に生じたいかなる損害に関しても，その責任を負
 わない．

 $Id: tesry_spec.txt 2 2012-05-09 02:23:52Z nces-shigihara $
----------------------------------------------------------------------

このドキュメントでは，TESRY(TEst Scenario for Rtos by Yaml)記法の仕様を
説明する．
このドキュメントは要求仕様書から参照される．

関連ドキュメント:
  パラメータ一覧 (param.txt)
  バリエーション判別 (variation.txt)
----------------------------------------------------------------------
(1) YAML

(2) TESRY記法仕様

(3) TESRYデータ仕様

(4) TESRYデータの全体像

(5) テストシナリオ構成要素の文法
(5.1) 前状態 (pre_condition)
(5.2) 処理 (do)
(5.2.1) 時間経過を指定する処理
(5.2.2) 時間経過を指定しない処理
(5.3) 処理内容
(5.4) 後状態 (post_condition)
(5.4.1) 時間経過を指定する後状態
(5.4.2) 時間経過を指定しない後状態
(5.5) 後状態のオブジェクト定義部
(5.6) バリエーション (variation)
(5.7) コメント (note)

(6) オブジェクトの文法
(6.1) オブジェクトID
(6.2) オブジェクト情報
(6.3) オブジェクト属性

(7) 複数のタイミングで状態を確認するテストシナリオ

(8) 指定時間経過後に結果を確認するテストシナリオ

(9) テストシナリオの実行順序
----------------------------------------------------------------------

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(1) YAML
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
YAMLは，シーケンス(Rubyでの配列)とマッピング(Rubyでのハッシュ，一般に
は連想配列など)とスカラー(文字列や数値等のデータ)を記述することができ
るフォーマットである．YAMLでは行単位で解釈を行い「 - スカラー 」のよう
に先頭にハイフンがあるとシーケンス，「 スカラー1 : スカラー2 」 のよう
にコロンを挟むとマッピングとなる．シーケンスやマッピングの中に，シーケ
ンスやマッピングをネストさせることも可能である．YAMLでは階層を半角スペ
ースによるインデントで表現する．

YAML形式で記述するうえでの制限として，「*」「&」が先頭に来るような文字
列を記述したい場合や，「NULL」という文字列を記述したい場合はダブル
クォーテーションで文字列をくくる必要がある．


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(2) TESRY記法仕様
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
TESRY記法はYAML1.0に準拠する．


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(3) TESRYデータ仕様
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
TESRYデータはTESRY記法により記述されたテキストファイルである．
1つのTESRYデータには1つのYAMLドキュメントのみ記述する．
1つのTESRYデータに複数のテストシナリオを記述できる．
文字コードはASCII，改行コードはLFとする．マルチバイト文字列は記述できな
い．


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(4) TESRYデータの全体像
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
TESRYデータはテストIDとテストシナリオのハッシュから成り，それぞれのテス
トシナリオは前状態・処理・後状態の3つの要素のハッシュとなる．
・前状態: どのような状態でテストを始めるか
・処理  : テストしたいAPI
・後状態: テストの結果どのような状態になるか
前状態と後状態にはオブジェクトの状態を定義する．処理にはテストするAPIの
内容について記述する．
その他の構成要素にはバリエーションが存在する．

テストIDはテストプログラムの中で関数名の先頭に使用する．そのためアルフ
ァベットで始まり，英数字と_(アンダースコア)のみからなる文字列でなければ
ならない．また，テストIDには以下の制約がある．
・TTGに入力する全TESRYデータでテストIDはユニークに付ける必要がある．
・"TTG_"から始まるテストIDは予約語として指定できない．

これらの概念を次の例に示す．

例) テストシナリオの全体像
======================================================================
テストID:
  前状態:
    オブジェクトID:
      type  : オブジェクトの種類
      属性1 : 値1
      属性2 : 値2

  処理:
    id      : APIを発行する処理単位
    syscall : 発行するAPI
    ercd    : APIの戻り値

  後状態:
    オブジェクトID:
      属性1 : 値1
      属性2 : 値2
======================================================================

具体例として下記のテストシナリオで説明する．
テストIDがtest1のテストシナリオを表しており，前状態・処理・後状態を定義
している．前状態ではタスクオブジェクトのTASK1とTASK2が存在し，TASK1が実
行状態でTASK2が休止状態になっている．処理では前状態で定義した状態から
TASK1がact_tskのAPIを発行するテスト内容を記述している．そして，後状態で
はAPI発行後のオブジェクトの状態としてTASK2が実行可能状態に遷移したこと
を表している．

例) テストシナリオ
======================================================================
test1:
  pre_condition:
    TASK1:
      type   : TASK
      tskstat: running
    TASK2:
      type   : TASK
      tskstat: dormant

  do:
    id     : TASK1
    syscall: act_tsk(TASK2)
    ercd   : E_OK

  post_condition:
    TASK2:
      tskstat: ready
======================================================================


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(5) テストシナリオ構成要素の文法
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
----------------------------------------------------------------------
(5.1) 前状態 (pre_condition)
----------------------------------------------------------------------

前状態はテストシナリオ構成要素の1つである．
前状態のテストシナリオ構成要素ラベルはpre_conditionとする．
前状態は1つのテストシナリオに1つ定義する．
前状態はマッピングとする．
前状態直下の階層にはオブジェクトを定義する．
前状態にはAPI発行前のシステムの状態として存在するオブジェクトを定義する．
オブジェクトは任意の数だけ定義できる．

例) 前状態
======================================================================
pre_condition:
  TASK1:
    type   : TASK
    tskstat: running
  ALM1:
    type   : ALARM
    almstat: TALM_STP
    hdlstat: STP
======================================================================

----------------------------------------------------------------------
(5.2) 処理 (do)
----------------------------------------------------------------------
処理はテストシナリオ構成要素の1つである．
処理のテストシナリオ構成要素ラベルはdoまたはdo_N (nは整数，N > 0)とする．
doと記述された場合はdo_0と同義になる．do_NのNにあたる数値をシーケンス番
号とする．
処理は1つのテストシナリオに1つ以上定義する必要がある．ただし，同一テス
トシナリオ内に同じシーケンス番号を持つ処理を定義することはできない．

処理では指定時間経過後に実行する処理内容を明記する場合と明記しない場合
において処理以下の構造が異なる．

----------------------------------------------------------------------
(5.2.1) 時間経過を指定する処理
----------------------------------------------------------------------
時間経過を指定する処理はマッピングとする．(キー: 経過時間，値: 処理内容)
※時間の単位は1ミリ秒

例) 時間経過を指定する処理
======================================================================
do:
  0:
    id     : TASK1
    syscall: slp_tsk()
    ercd   : E_OK
  1:
    id     : TASK2
    syscall: wup_tsk(TASK1)
======================================================================

----------------------------------------------------------------------
(5.2.2) 時間経過を指定しない処理
----------------------------------------------------------------------
時間経過を指定しない処理はマッピングとする．マッピングの内容は6.3の処理
内容を記述する．

例) 時間経過を指定しない処理
======================================================================
do:
  id     : TASK1
  syscall: act_tsk(TASK2)
  ercd   : E_OK
======================================================================

----------------------------------------------------------------------
(5.3) 処理内容
----------------------------------------------------------------------
処理内容はマッピングとする．(キー: 属性名，値: 属性値)
処理内容には直前の状態から行う任意の処理の詳細を記述する．処理内容で指
定できる属性一覧はparam.txtに定義している．
API発行元の処理単位をidに指定する．
処理内容をsyscall，またはcodeに記述する．gcovでカバレッジ取得するには
syscallに記述する．
syscallに記述した場合，処理内容以降の後状態でAPI発行元のオブジェクトが
実行状態や起動状態になる場合は戻り値を指定する．戻り値はercd，eruint，
boolを型に応じて使い分ける．syscallに記述した場合，処理内容以降の後状態
でAPI発行元のオブジェクトが実行状態や起動状態にならない場合は戻り値を指
定できない．

----------------------------------------------------------------------
(5.4) 後状態 (post_condition)
----------------------------------------------------------------------
後状態はテストシナリオ構成要素の1つである．
後状態のテストシナリオ構成要素ラベルはpost_conditionまたは
post_condition_N (Nは整数，N > 0)とする．
post_conditionと記述された場合はpost_condition_0と同義になる．
post_condition_NのNにあたる数値をシーケンス番号とする．
後状態は1つのテストシナリオに1つ以上定義する必要がある．

後状態では指定時間経過後に実行する処理内容を明記する場合と明記しない場
合において後状態以下の構造が異なる．

----------------------------------------------------------------------
(5.4.1) 時間経過を指定する後状態
----------------------------------------------------------------------
時間経過を指定する後状態はマッピングとする．(キー: 経過時間，値: 後状態
のオブジェクト定義部)

例) 時間経過を指定する後状態
======================================================================
post_condition:
  0:
    TASK1:
      tskstat: waiting
      wobjid : SLEEP
    TASK2:
      tskstat: running
  1:
    TASK1:
      tskstat: running
    TASK2:
      tskstat: ready
======================================================================

----------------------------------------------------------------------
(5.4.2) 時間経過を指定しない後状態
----------------------------------------------------------------------
時間経過を指定しない後状態はマッピングとする．マッピングの内容は6.6の後
状態のオブジェクト定義部を記述する．

例) 時間経過を指定しない後状態
======================================================================
post_condition:
  TASK1:
    tskstat: ready
  TASK2:
    tskstat: running
======================================================================

----------------------------------------------------------------------
(5.5) 後状態のオブジェクト定義部
----------------------------------------------------------------------
後状態のオブジェクト定義部はマッピングとする．
後状態直下の階層にはオブジェクトを定義する．
後状態のオブジェクト定義部にはAPI発行後のオブジェクトを定義できる．後状
態のオブジェクト定義部で定義できるオブジェクトは前状態で定義したオブ
ジェクトに限る．
後状態のオブジェクト定義部では直前の状態から変化のないオブジェクトの記
述は省略できる．
後状態のオブジェクト定義部では直前の状態から変化のないオブジェクトの属
性の記述は省略できる．ただし，オブジェクト情報が空のオブジェクトは記述
できない．(オブジェクトの記述自体を省略すればよい)

----------------------------------------------------------------------
(5.6) バリエーション (variation)
----------------------------------------------------------------------
バリエーションはテストシナリオ構成要素の1つである．
バリエーションのテストシナリオ構成要素ラベルはvariationとする．
バリエーションは1つのテストシナリオに必要な場合に1つ定義できる．
バリエーションはマッピングとする．(キー: 属性名，値: 属性値)
バリエーションではターゲット依存のテストシナリオを判別するための属性や
テストの本質とは異なる付加的な属性を定義する．バリエーションで指定でき
る属性一覧はvariation.txtに定義している．

例) バリエーション
======================================================================
variation:
  timer_arch: global
  gcov_all  : true
======================================================================

----------------------------------------------------------------------
(5.7) コメント (note)
----------------------------------------------------------------------
コメントはテストシナリオ構成要素の1つである．
コメントのテストシナリオ構成要素ラベルはnoteとする．
コメントは1つのテストシナリオに必要な場合に1つ定義できる．
コメントは文字列とする．
コメントではTESRYデータの説明を記述する．

例) コメント
======================================================================
note: TESRY_001
======================================================================


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(6) オブジェクトの文法
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
オブジェクトは前状態と後状態のオブジェクト定義部に記述する．
オブジェクトはマッピングとする．(キー: オブジェクトID，値: オブジェクト
情報)

例) オブジェクト
======================================================================
TASK1:
  type   : TASK
  tskstat: running
  tskpri : 10
ALM1:
  type   : ALARM
  almstat: TALM_STP
  hdlstat: STP
======================================================================

----------------------------------------------------------------------
(6.1) オブジェクトID
----------------------------------------------------------------------
オブジェクトIDは半角英大文字と数字，_(アンダーバー)によって構成される．
ただし，1文字目は半角英大文字に限る．

----------------------------------------------------------------------
(6.2) オブジェクト情報
----------------------------------------------------------------------
オブジェクト情報はマッピングとする．
オブジェクト情報直下の階層にはオブジェクト属性を定義する．
前状態に記述するオブジェクト情報にはオブジェクトのタイプ属性を指定する．
後状態に記述するオブジェクト情報にはオブジェクトのタイプ属性を指定でき
ない．

----------------------------------------------------------------------
(6.3) オブジェクト属性
----------------------------------------------------------------------
オブジェクト属性はマッピングとする．(キー: 属性名，値: 属性値)
オブジェクトのタイプごとに定義できるオブジェクト属性は決定する．オブ
ジェクトのタイプごとの属性一覧はparam.txtに定義している．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(7) 複数のタイミングで状態を確認するテストシナリオ
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
処理と後状態を複数定義して，複数のタイミングで状態を確認するテストシナ
リオを表現できる．
実行と確認の順序はシーケンス番号によって決定する．シーケンス番号が小さ
い処理を実行し，処理のシーケンス番号と同じシーケンス番号を持つ後状態を
確認する．1つのシーケンス番号に対して，対応する処理と後状態が定義され
なければならない．

例) 複数のタイミングで状態を確認するテストシナリオ
======================================================================
ASP_test_api_a:
  pre_condition:
    TASK1:
      type   : TASK
      tskstat: running
    TASK2:
      type   : TASK
      tskstat: ready

  do_0:
    id     : TASK1
    syscall: slp_tsk()

  post_condition_0:
    TASK1:
      tskstat: waiting
      wobjid : SLEEP
    TASK2:
      tskstat: running

  do_1:
    id     : TASK2
    syscall: wup_tsk(TASK1)
    ercd   : E_OK

  post_condition_1:
    TASK1:
      tskstat: ready
    TASK2:
      tskstat: running
======================================================================


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(8) 指定時間経過後に結果を確認するテストシナリオ
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
処理と後状態に経過時間を指定することができる．経過時間の単位はmsである．
前状態が終了した時点の経過時間を基準(0)とする．
経過時間が指定されていない処理と後状態は基準時間の内容として扱う．
同一シーケンス番号において，処理で定義した経過時間に対応する，後状態の
オブジェクト定義部が定義されていない場合は，変化がないと記述された後状
態のオブジェクト定義部が定義されているとして扱う．
同一シーケンス番号において，後状態で定義した経過時間に対応する，処理内
容が定義されていない場合は，何もしない処理と同義の処理内容が定義されて
いるとして扱う．

以下の二つの例は同義である．

例) 経過時刻を省略した場合
======================================================================
do_0:
  id     : TASK1
  syscall: dly_tsk(3)
  ercd   : E_OK

post_condition_0:
  0:
    TASK1:
      tskstat: waiting
      wobjid : DELAY
      lefttmo: 3

    TASK2:
      tskstat: running

  3:
    TASK1:
      lefttmo: 0

  4:
    TASK1:
      tskstat: ready
======================================================================

例) 経過時刻を省略しない場合
======================================================================
do_0:
  0:
    id     : TASK1
    syscall: dly_tsk(3)
    ercd   : E_OK
  3:
  4:
post_condition_0:
  0:
    TASK1:
      tskstat: waiting
      wobjid : DELAY
      lefttmo: 3

    TASK2:
      tskstat: running

  3:
    TASK1:
      lefttmo: 0

  4:
    TASK1:
      tskstat: ready
======================================================================


━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(9) テストシナリオの実行順序
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
テストシナリオはまず前状態から始まる．そしてシナリオ内に存在するシーケ
ンス番号の順番に処理，後状態と確認する．
処理と後状態の中に経過時間の指定がある場合は，定義された経過時間の処
理・後状態を全て実行した後に次のシーケンス番号へ進む．この時，前のシー
ケンス番号の処理・後状態で指定された経過時間で最後の時間と比較し，現在
のシーケンス番号の経過時間の指定が以前のものであってはならない．下の例
ではシーケンス番号0の処理・後状態で指定された経過時間の最後の時間が3ms
となっているが，次のシーケンス番号1の処理・後状態で指定された経過時間の
開始時間が1msとなっているため不正である．

例) 経過時間の指定が不正な場合
======================================================================
do_0:
  3:
    id     : TASK1
    syscall: dly_tsk(3)
    ercd   : E_OK

post_condition_0:
  3:
    TASK1:
      tskstat: waiting
      wobjid : DELAY
      lefttmo: 3

    TASK2:
      tskstat: running

do_1:
  1:
    id     : TASK1
    syscall: act_tsk(TASK2)
    ercd   : E_OK

post_condition_1:
  1:
======================================================================
