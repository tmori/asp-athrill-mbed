
 SILテストの開発設計書

----------------------------------------------------------------------
 TTSP
     TOPPERS Test Suite Package

 Copyright (C) 2009-2011 by Center for Embedded Computing Systems
             Graduate School of Information Science, Nagoya Univ., JAPAN
 Copyright (C) 2009-2011 by Digital Craft Inc.
 Copyright (C) 2009-2011 by NEC Communication Systems, Ltd.
 Copyright (C) 2009-2011 by FUJISOFT INCORPORATED
 Copyright (C) 2009-2010 by Mitsuhiro Matsuura

 上記著作権者は，以下の (1)〜(3) の条件を満たす場合に限り，本ドキュメ
 ント（本ドキュメントを改変したものを含む．以下同じ）を使用・複製・改
 変・再配布（以下，利用と呼ぶ）することを無償で許諾する．
 (1) 本ドキュメントを利用する場合には，上記の著作権表示，この利用条件
     および下記の無保証規定が，そのままの形でドキュメント中に含まれて
     いること．
 (2) 本ドキュメントを改変する場合には，ドキュメントを改変した旨の記述
     を，改変後のドキュメント中に含めること．ただし，改変後のドキュメ
     ントが，TOPPERSプロジェクト指定の開発成果物である場合には，この限
     りではない．
 (3) 本ドキュメントの利用により直接的または間接的に生じるいかなる損害
     からも，上記著作権者およびTOPPERSプロジェクトを免責すること．また，
     本ドキュメントのユーザまたはエンドユーザからのいかなる理由に基づ
     く請求からも，上記著作権者およびTOPPERSプロジェクトを免責すること．

 本ドキュメントは，無保証で提供されているものである．上記著作権者およ
 びTOPPERSプロジェクトは，本ドキュメントに関して，特定の使用目的に対す
 る適合性も含めて，いかなる保証も行わない．また，本ドキュメントの利用
 により直接的または間接的に生じたいかなる損害に関しても，その責任を負
 わない．

 $Id: developer.txt 2 2012-05-09 02:23:52Z nces-shigihara $
----------------------------------------------------------------------

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
目的
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
統合仕様書に記載された全システムインタフェースレイヤAPIの振舞いが正しい
ことを確認する．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
対象とする仕様
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
第３章　システムインタフェースレイヤAPI仕様

3.1 システムインタフェースレイヤの概要
3.3 全割込みロック状態の制御
3.4 SILスピンロック
3.5 微少時間待ち
3.6 エンディアンの取得
3.7 メモリ空間アクセス関数
3.8 I/O空間アクセス関数
3.9 プロセッサIDの参照

SILテストでは，統合仕様書の3.3から3.9に記載されているすべてのAPIを対象
とする．3.1に記載されている仕様は，3.3から3.9に記載されているAPIに関す
るテストのテスト条件に含める．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
仕様カバレッジ方針
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
すべての仕様を網羅することを目標とする．ただし，以下の要因によりテスト
が実施不可の項目は対象外とする．
・「動作を保証しない」とされる仕様
・カーネルの実装として確認手段がない仕様

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
テスト手法
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
システムインタフェースレイヤAPI（以下，SIL関数）が規定した条件を満たす
と，規定した振舞いをすることをチェックするテストプログラムをスクラッチ
プログラムで作成し，実行する．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
テスト条件
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
SIL関数を発行する際に考慮するテスト条件を，カーネルの振舞いに影響を与え
る状態(以下，システム状態)と，発行元の処理単位の種類とする．

■システム状態
・全割込みロックフラグ(SIL_LOC_INT)
  ・全割込みロック状態
  ・全割込みロック解除状態
・CPUロックフラグ(loc_cpu)
  ・CPUロック状態
  ・CPUロック解除状態
・割込み優先度マスク(chg_ipm)
  ・割込み優先度マスク全解除状態
  ・割込み優先度マスク全解除でない状態
・ディスパッチ禁止フラグ(dis_dsp)
  ・ディスパッチ禁止状態
  ・ディスパッチ許可状態
・SILスピンロック(SIL_LOC_SPN)
  ・SILスピンロック取得状態
  ・SILスピンロック取得待ち状態
・APIスピンロック(loc_spn)
  ・APIスピンロック取得状態
  ・APIスピンロック取得待ち状態

■処理単位
・タスク
・タスク例外処理ルーチン
・割込みハンドラ
・割込みサービスルーチン
・アラームハンドラ
・周期ハンドラ
・CPU例外ハンドラ
・初期化ルーチン
・終了ルーチン

※カーネルの振舞いに影響を与える状態(以下，システム状態)は，統合仕様書
  の「2.5.3 カーネルの振舞いに影響を与える状態」を参考すること．
※スピンロック取得状態はシステム状態として仕様書には記述されていないが，
  プロセッサ間割込みを取得していることから，SILテストの観点で一つのシス
  テム状態として考えテストする．
※FMPカーネルのテストでは，SIL_LOC_SPN発行後にext_kerを発行するため，終
  了ルーチンにおけるSILスピンロック取得状態は対象外とする．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
全割込みロック状態の制御(ASP/FMPカーネル共通)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(1)SIL_PRE_LOC
宣言のみのため，テスト対象外とする．

(2)SIL_LOC_INT()
SIL_LOC_INT()発行後に，カーネル管理内の割込みを発生させて，一定時間割込
みが発生しないことで，確認する．システム状態，処理単位の組み合わせは
matrix.xlsを参照する．

(3)SIL_UNL_INT()
SIL_LOC_INT()発行後に発生した割込みが，SIL_UNL_INT()発行によって発生す
ることで，確認する．つまり，SIL_LOC_INT()のテストケースと1対1の関係で
テストを実施するため，matrix.xlsの以下のテストケースは，独立したテスト
ケースは設けない．
・b-2
・h-2
・i-2
・j-2
・k-2
・m-2

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
SILスピンロック(FMPカーネルのみ)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(1)SIL_PRE_LOC
宣言のみのため，テスト対象外とする．

(2)SIL_LOC_SPN()
SIL_LOC_SPN()発行後に，カーネル管理内の割込みを発生させて，一定時間割込
みが発生しないことで，確認する．システム状態，処理単位の組み合わせは
matrix.xlsを参照する．

(3)SIL_UNL_SPN()
SIL_LOC_SPN()発行後に発生した割込みが，SIL_UNL_SPN()発行によって発生す
ることで，確認する．つまり，SIL_LOC_SPN()のテストケースと1対1の関係で
テストを実施するため，matrix.xlsの以下のテストケースは，独立したテスト
ケースは設けない．
・f-4
・l-4
・n-4
・o-4
・p-4
・q-4

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
全割り込みロック中、SILスピンロック中に発行できるAPIの確認
(ASP/FMPカーネル共通)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(1)sns_ker
仕様通りのカーネル状態を返すことを確認する．全処理単位で，全割り込みロ
ック状態、スピンロック取得状態で確認する．

(2)ext_ker
ASPカーネルでは，SIL_LOC_INT()発行後にext_kerを発行し，終了ルーチンが呼
ばれることで，確認する．FMPカーネルでは，SIL_LOC_SPN()発行後に終了ルー
チンが呼ばれることで，確認する．ただし，SIL_LOC_SPN()はネストできないた
め，終了ルーチン内ではSIL_LOC_SPN()に対するテストは実施しない．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
微少時間待ち(ASP/FMPカーネル共通)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(1) void sil_dly_nse(ulong_t dlytim)
dlytimで指定した以上の時間，遅延するか確認する．具体的には以下のように，
sil_dly_nseによって10000000ナノ秒(10ミリ秒)遅延させたことを，get_timで
確認する．

get_tim(&system1);
sil_dly_nse(10000000);
get_tim(&system2);
check_assert((system2 - system1) >= 10)

get_tim発行が必要なため，タスクおよびタスク例外処理ルーチン以外の処理
単位から実施不可とする．

グローバルタイマ方式では，システム時刻管理プロセッサ以外のプロセッサで
sil_dly_nseを発行中に，システム時刻管理プロセッサが割込み禁止状態になり，
システム時刻が進まない可能性があるため，システム時刻管理プロセッサでの
みsil_dly_nseのテストを実施する．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
エンディアンの取得(ASP/FMPカーネル共通)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(1) SIL_ENDIAN_BIG，SIL_ENDIAN_LITTLE
宣言のみのため，テスト対象外とする．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
メモリ空間アクセス関数(ASP/FMPカーネル共通)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(1) uint8_t sil_reb_mem(void *mem)
(2) uint16_t sil_reh_mem(void *mem)
(3) uint32_t sil_rew_mem(void *mem)
memで指定したアドレスから8/16/32bit単位で読み出した値を返すかを確認する．

(4) void sil_wrb_mem(void *mem, uint8_t data)
(5) void sil_wrh_mem(void *mem, uint16_t data)
(6) void sil_wrw_mem(void *mem, uint32_t data)
memで指定したアドレスにdataで指定される値を8/16/32bit単位で書き込むかを
確認する．

(7) uint16_t sil_reh_lem(void *mem)
(8) uint32_t sil_rew_lem(void *mem)
memで指定したアドレスから16/32bit単位でリトルエンディアンで読み出した値
を返すかを確認する．

(9) void sil_wrh_lem(void *mem, uint16_t data)
(10) void sil_wrw_lem(void *mem, uint32_t data)
memで指定したアドレスにdataで指定される値を16/32bit単位でリトルエンディ
アンで書き込むかを確認する．

(11) uint16_t sil_reh_bem(void *mem)
(12) uint32_t sil_rew_bem(void *mem)
memで指定したアドレスから16/32bit単位でビックエンディアンで読み出した値
を返すかを確認する．

(13) void sil_wrh_bem(void *mem, uint16_t data)
(14) void sil_wrw_bem(void *mem, uint32_t data)
memで指定したアドレスにdataで指定される値を16/32bit単位でビックエンディ
アンで書き込むかを確認する．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
I/O空間アクセス関数(ASP/FMPカーネル共通)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(1) uint8_t sil_reb_iop(void *iop)
(2) void sil_wrb_iop(void *iop, uint8_t data)
(3) uint16_t sil_reh_iop(void *iop)
(4) void sil_wrh_iop(void *iop, uint16_t data)
(5) uint16_t sil_reh_lep(void *iop)
(6) void sil_wrh_lep(void *iop, uint16_t data)
(7) uint16_t sil_reh_bep(void *iop)
(8) void sil_wrh_bep(void *iop, uint16_t data)
(9) uint32_t sil_rew_iop(void *iop)
(10) void sil_wrw_iop(void *iop, uint32_t data)
(11) uint32_t sil_rew_lep(void *iop)
(12) void sil_wrw_lep(void *iop, uint32_t data)
(13) uint32_t sil_rew_bep(void *iop)
(14) void sil_wrw_bep(void *iop, uint32_t data)

サポートしているターゲットが少ないことと，テスト結果の期待値が不明確であるため，
テスト対象外とする．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
プロセッサIDの参照(FMPカーネルのみ)
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
(1) void sil_get_pid(ID *p_prcid)
sil_get_pid()により実行中のプロセッサIDが取得できることを確認する．全処
理単位で，全割り込みロック状態、スピンロック取得状態で確認する．

※マイグレーションによってsil_get_pid発行時にプロセッサIDが変更されるこ
  とは考慮しない．

━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
制約事項
━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
----------------------------------------------------------------------
ソースコードカバレッジ
----------------------------------------------------------------------
SIL関数のソースコードは，ターゲット依存のため，ソースコードカバレッジは，
評価しない．

----------------------------------------------------------------------
リングモード
----------------------------------------------------------------------
SILの機能は，プロセッサの特権モードで実行されているプログラムが使用する
ことから，ASPカーネル，FMPカーネルは常に特権モードで実行されているため，
SILの機能は常に規定した振舞いをする．本テストはASP/FMPカーネルを対象と
しているため，リングモードについては考慮しない．

なお，非特権モードで実行されているプログラムからSILの機能を呼び出した場
合の動作は，以下の場合のみ保証されている．
・微少時間待ちの機能を呼び出すこと
・エンディアンの取得のためのマクロを参照すること
・メモリ空間アクセス関数により，アクセスを許可されたメモリ領域にアクセ
  スすること
・I/O空間アクセス関数により，アクセスを許可されたI/O領域にアクセスする
  こと



以上．
